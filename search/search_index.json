{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I'm Sandy</p> <p>I'm a Software Engineer based in sunny Scotland.</p> <p>Over the past 21 years, I've worked in various areas of software development, including UNIX systems development, data warehousing, data security and IoT.</p> <p>I've worked on and led projects across multipe sectors including immigration and law enforcement in countries like the United Kingdom, United States, and United Arab Emirates.</p>"},{"location":"markista/","title":"Markista","text":"<p>Serving Markdown Flavored Documentation</p>"},{"location":"markista/#introduction","title":"Introduction","text":"<p>Markista is a doclet that turns your Java documentation comments into Markdown, suitable for use with Github, MkDocs, etc. </p> <p>Markista is under active development and has reached a point where it is becoming useful. There will be features that aren't completely implemented yet.</p> <p>As a demonstration, the Markdown Javadoc for Markista itself is available here. It was produced with the <code>-private</code> parameter which tells Markista to document private members of classes. By default only public and protected members are documented.</p>"},{"location":"markista/#gradle","title":"Gradle","text":"<p>Markista can be used from a Gradle build by following these simple steps:</p>"},{"location":"markista/#step-1-define-a-configuration-for-the-doclet","title":"Step 1: Define a Configuration for the Doclet","text":"<p>Create a configuration in your build.gradle file to manage the Markista dependency.</p> <pre><code>configurations {\n    markista\n}\n</code></pre>"},{"location":"markista/#step-2-add-the-markista-dependency","title":"Step 2: Add the Markista Dependency","text":"<p>Add Markista as a dependency under the configuration you just created. Markista is available in the Maven Central repository.</p> <pre><code>dependencies {\n    markista(\"io.github.sandydunlop:markista:0.1.6\")\n}\n</code></pre>"},{"location":"markista/#step-3-configure-the-javadoc-task","title":"Step 3: Configure the Javadoc Task","text":"<p>In the Javadoc task, specify the doclet path and the doclet class. This tells Gradle where to find the doclet and which one to use.</p> <pre><code>javadoc {\n    options {\n        docletpath = configurations.markista.files.asType(List)\n        doclet = 'io.github.sandydunlop.markista.doclet.MarkdownDoclet'\n        source = null\n        addBooleanOption('flatten', true)\n        addBooleanOption('external', true)\n    }\n}\n</code></pre>"},{"location":"markista/#command-line","title":"Command Line","text":"<p>Markista can be used from the command line with the <code>javadoc</code> command as follows:</p> <pre><code>javadoc -docletpath libs/markista-0.1.6.jar -doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet src/main/java/my.package/Hello.java\n</code></pre>"},{"location":"markista/#parameters","title":"Parameters","text":"<code>-d &lt;directory&gt;</code> The directory to write the Markdown files to. <code>-private</code> Generate docs for private members. By default only public  and abstract members are documented. <code>-external</code> Create links to classes defined outside of the API being     documented (eg. java.utils.String) <code>-flatten</code> Don't create directories that contain no classes <code>-verbose</code> Display progress information"},{"location":"markista/#download","title":"Download","text":"<p>JAR files for version 0.1.6 are available to download here.</p>"},{"location":"markista/#source-code","title":"Source Code","text":"<p>Markista's source code is available on Github under the GPLv3 license.</p> <p></p>"},{"location":"markista/javadoc/","title":"API","text":""},{"location":"markista/javadoc/#packages","title":"Packages","text":"Package Description io.github.sandydunlop.markista.util This package contains utility methods used by other packages. io.github.sandydunlop.markista.doclet This package contains the main doclet classes. io.github.sandydunlop.markista.model The classes used to store structure and docuemntation information in the API tree."},{"location":"markista/javadoc/constant-values/","title":"Constant Field Values","text":"Modifier and Type Constant Field Value String DOT_HTML .html String JAVA_24_URL https://docs.oracle.com/en/java/javase/24/docs/api/ String TITLE_API API String TITLE_CONSTANT_FIELD Constant Field String TITLE_CONSTANT_FIELD_VALUES Constant Field Values String TITLE_DESCRIPTION Description String TITLE_EXPORTS Exports String TITLE_IMPLEMENTATIONS Implementations String TITLE_INTERFACE Interface String TITLE_MODIFIER_AND_TYPE Modifier and Type String TITLE_MODULE Module String TITLE_OPENS Opens String TITLE_PACKAGE Package String TITLE_PACKAGES Packages String TITLE_PROVIDES Provides String TITLE_REQUIRES Requires String TITLE_USES Uses String TITLE_VALUE Value boolean OK true boolean FAILED false String UNUSED_OPTION_DESCRIPTION Unused option String TEXT_CLASS Class String TEXT_DESCRIPTION Description String TEXT_MODIFIER_AND_TYPE Modifier and Type String BR String NBSP"},{"location":"markista/javadoc/doclet/","title":"Package io.github.sandydunlop.markista.doclet","text":"<p>This package contains the main doclet classes.</p> <p>The Markista doclet has 3 main functions:</p> <ul> <li>Collecting API and documentation infomation from the Java compiler</li> <li>Arranging the infomation into an API tree using model.* classes</li> <li>Outputting the documentation from the API tree as Markdown</li> </ul> Classes Class Description ModuleWriter MarkdownTable A utility class for creating tables in Markdown documents. MarkdownDoclet A doclet that renders javadoc comments as Markdown PackageWriter A class that outputs API documentation as Markdown. ApiScanner A class that scans code and generates an API tree representing code and Javadoc comments."},{"location":"markista/javadoc/doclet/ApiScanner/","title":"ApiScanner","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#class-apiscanner","title":"Class ApiScanner","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.AbstractElementVisitor6&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner6&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner7&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner8&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner9&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.ApiScanner </p> <p>A class that scans code and generates an API tree representing code and Javadoc comments.</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Api api private DocletEnvironment environment private ModuleNode unnamedModule private ModuleNode currentModule private HashSet&lt;String&gt; includedNames"},{"location":"markista/javadoc/doclet/ApiScanner/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ApiScanner(DocletEnvironment environment) Initializes the ApiScanner with access to the doclet environment."},{"location":"markista/javadoc/doclet/ApiScanner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Api scan(Set&lt;? extends Element&gt; elements) The starting point for a scan of the API structure. private void processIncludedElements(Set&lt;? extends Element&gt; elements) private boolean isIncludedElement(String qualifiedName) private boolean isIncludedElement(Element e) Void scan(Element e, Integer depth) Void visitModule(ModuleElement e, Integer depth) Void visitPackage(PackageElement ee, Integer depth) Void visitType(TypeElement e, Integer depth) Void visitExecutable(ExecutableElement ee, Integer depth) Void visitVariable(VariableElement ve, Integer depth) Void visitTypeParameter(TypeParameterElement e, Integer depth) Void visitRecordComponent(RecordComponentElement e, Integer depth)"},{"location":"markista/javadoc/doclet/ApiScanner/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#api","title":"api","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#environment","title":"environment","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#unnamedmodule","title":"unnamedModule","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#currentmodule","title":"currentModule","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#includednames","title":"includedNames","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/ApiScanner/#scan","title":"scan","text":"<p>Api scan(Set&lt;? extends Element&gt; elements)</p> <p>The starting point for a scan of the API structure. This method sets up the environment and begins the scan of the API.</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#processincludedelements","title":"processIncludedElements","text":"<p>private void processIncludedElements(Set&lt;? extends Element&gt; elements)</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#isincludedelement","title":"isIncludedElement","text":"<p>private boolean isIncludedElement(String qualifiedName)</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#isincludedelement_1","title":"isIncludedElement","text":"<p>private boolean isIncludedElement(Element e)</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#scan_1","title":"scan","text":"<p>Void scan(Element e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.scan from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visitmodule","title":"visitModule","text":"<p>Void visitModule(ModuleElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner9.visitModule from ElementScanner9&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visitpackage","title":"visitPackage","text":"<p>Void visitPackage(PackageElement ee, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.visitPackage from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visittype","title":"visitType","text":"<p>Void visitType(TypeElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.visitType from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visitexecutable","title":"visitExecutable","text":"<p>Void visitExecutable(ExecutableElement ee, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.visitExecutable from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visitvariable","title":"visitVariable","text":"<p>Void visitVariable(VariableElement ve, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner7.visitVariable from ElementScanner7&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visittypeparameter","title":"visitTypeParameter","text":"<p>Void visitTypeParameter(TypeParameterElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.visitTypeParameter from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/ApiScanner/#visitrecordcomponent","title":"visitRecordComponent","text":"<p>Void visitRecordComponent(RecordComponentElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6.visitRecordComponent from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/","title":"MarkdownDoclet.Option","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#class-markdowndocletoption","title":"Class MarkdownDoclet.Option","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet.Option  All Implemented Interfaces: Doclet.Option</p> <p>Enclosing Class: MarkdownDoclet</p> <p>A base class for declaring options. Subtypes for specific options should implement the Doclet.Option.process method to handle instances of the option found on the command line.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name private final boolean hasArg private final String description private final String parameters"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet.Option(String name, boolean hasArg, String description, String parameters)"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description int getArgumentCount() String getDescription() Doclet.Option.Kind getKind() List&lt;String&gt; getNames() String getParameters()"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#name","title":"name","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#hasarg","title":"hasArg","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#description","title":"description","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#parameters","title":"parameters","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getargumentcount","title":"getArgumentCount","text":"<p>int getArgumentCount()</p> <p>Specified By:</p> <p>Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getdescription","title":"getDescription","text":"<p>String getDescription()</p> <p>Specified By:</p> <p>Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getkind","title":"getKind","text":"<p>Doclet.Option.Kind getKind()</p> <p>Specified By:</p> <p>Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getnames","title":"getNames","text":"<p>List&lt;String&gt; getNames()</p> <p>Specified By:</p> <p>Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getparameters","title":"getParameters","text":"<p>String getParameters()</p> <p>Specified By:</p> <p>Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/","title":"MarkdownDoclet","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#class-markdowndoclet","title":"Class MarkdownDoclet","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet  All Implemented Interfaces: Doclet</p> <p>A doclet that renders javadoc comments as Markdown</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description abstract MarkdownDoclet.Option A base class for declaring options."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description static final boolean OK private static final boolean FAILED private static final String UNUSED_OPTION_DESCRIPTION private final Set&lt;MarkdownDoclet.Option&gt; options"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet() The default constructor, does nothing."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void main(String[] args) The starting point of Markista if it is being used without the Javadoc command. void init(Locale locale, Reporter reporter) Initializes the doclet. String getName() Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions() SourceVersion getSupportedSourceVersion() boolean run(DocletEnvironment environment)"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#ok","title":"OK","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#failed","title":"FAILED","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#unused_option_description","title":"UNUSED_OPTION_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#options","title":"options","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#main","title":"main","text":"<p>static void main(String[] args)</p> <p>The starting point of Markista if it is being used without the Javadoc command. This is useful for debugging.</p> <p>Parameters:</p> <p><code>args</code> - this parameter is ignored.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#init","title":"init","text":"<p>void init(Locale locale, Reporter reporter)</p> <p>Initializes the doclet.</p> <p>Parameters:</p> <p><code>locale</code> - The locale used for messages</p> <p><code>reporter</code> - The reporter used for messages</p> <p>Specified By:</p> <p>Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getname","title":"getName","text":"<p>String getName()</p> <p>Specified By:</p> <p>Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedoptions","title":"getSupportedOptions","text":"<p>Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions()</p> <p>Specified By:</p> <p>Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedsourceversion","title":"getSupportedSourceVersion","text":"<p>SourceVersion getSupportedSourceVersion()</p> <p>Specified By:</p> <p>Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#run","title":"run","text":"<p>boolean run(DocletEnvironment environment)</p> <p>Parameters:</p> <p><code>environment</code> - Represents the operating environment of a single invocation of the doclet.</p> <p>Returns:</p> <p>true if completed without errors, false if errors occurred.</p> <p>Specified By:</p> <p>Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/","title":"MarkdownTable.Column","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#class-markdowntablecolumn","title":"Class MarkdownTable.Column","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable.Column  Enclosing Class: MarkdownTable</p> <p>A class to represent the name and width of a column within a table</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description String name int width"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable.Column(String name) Constructs a new <code>Column</code> object with the specified name."},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#name","title":"name","text":""},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#width","title":"width","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/","title":"MarkdownTable","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#class-markdowntable","title":"Class MarkdownTable","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable </p> <p>A utility class for creating tables in Markdown documents.</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description MarkdownTable.Column A class to represent the name and width of a column within a table"},{"location":"markista/javadoc/doclet/MarkdownTable/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;MarkdownTable.Column&gt; columns List&lt;String[]&gt; rows"},{"location":"markista/javadoc/doclet/MarkdownTable/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable()"},{"location":"markista/javadoc/doclet/MarkdownTable/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description MarkdownTable addColumn(String heading) Adds a column with the specified heading to the table MarkdownTable addRow(String[] valueStrings) Adds a row of data to the table void render(Writer writer) Renders the table as Markdown text without any indentation void render(Writer writer, int indent) Renders the table as Markdown text with a given indentation level"},{"location":"markista/javadoc/doclet/MarkdownTable/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#columns","title":"columns","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#rows","title":"rows","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#addcolumn","title":"addColumn","text":"<p>MarkdownTable addColumn(String heading)</p> <p>Adds a column with the specified heading to the table</p> <p>Parameters:</p> <p><code>heading</code> - String to be used as the column heading</p> <p>Returns:</p> <p>The table</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#addrow","title":"addRow","text":"<p>MarkdownTable addRow(String[] valueStrings)</p> <p>Adds a row of data to the table</p> <p>Parameters:</p> <p><code>valueStrings</code> - one or more strings which represnet the data for this row</p> <p>Returns:</p> <p>The table</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#render","title":"render","text":"<p>void render(Writer writer)</p> <p>Renders the table as Markdown text without any indentation</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#render_1","title":"render","text":"<p>void render(Writer writer, int indent)</p> <p>Renders the table as Markdown text with a given indentation level</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/","title":"ModuleWriter","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#class-modulewriter","title":"Class ModuleWriter","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.ModuleWriter </p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TITLE_API private static final String TITLE_CONSTANT_FIELD private static final String TITLE_CONSTANT_FIELD_VALUES private static final String TITLE_DESCRIPTION private static final String TITLE_EXPORTS private static final String TITLE_IMPLEMENTATIONS private static final String TITLE_INTERFACE private static final String TITLE_MODIFIER_AND_TYPE private static final String TITLE_MODULE private static final String TITLE_OPENS private static final String TITLE_PACKAGE private static final String TITLE_PACKAGES private static final String TITLE_PROVIDES private static final String TITLE_REQUIRES private static final String TITLE_USES private static final String TITLE_VALUE private FileUtils fileUtils private Writer writer private Api api"},{"location":"markista/javadoc/doclet/ModuleWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleWriter() Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/doclet/ModuleWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(Api api) Output the documentation files for the specified API private void outputModuleDoc(ModuleNode moduleNode) private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives) private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives) private String multiLink(List&lt;String&gt; names) private String formatDirectivePackageDoc(DirectiveNode directive) private void outputConstantValues(ModuleNode moduleNode)"},{"location":"markista/javadoc/doclet/ModuleWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/ModuleWriter/#title_api","title":"TITLE_API","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_constant_field","title":"TITLE_CONSTANT_FIELD","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_constant_field_values","title":"TITLE_CONSTANT_FIELD_VALUES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_description","title":"TITLE_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_exports","title":"TITLE_EXPORTS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_implementations","title":"TITLE_IMPLEMENTATIONS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_interface","title":"TITLE_INTERFACE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_modifier_and_type","title":"TITLE_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_module","title":"TITLE_MODULE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_opens","title":"TITLE_OPENS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_package","title":"TITLE_PACKAGE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_packages","title":"TITLE_PACKAGES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_provides","title":"TITLE_PROVIDES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_requires","title":"TITLE_REQUIRES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_uses","title":"TITLE_USES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#title_value","title":"TITLE_VALUE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#fileutils","title":"fileUtils","text":""},{"location":"markista/javadoc/doclet/ModuleWriter/#writer","title":"writer","text":""},{"location":"markista/javadoc/doclet/ModuleWriter/#api","title":"api","text":""},{"location":"markista/javadoc/doclet/ModuleWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/ModuleWriter/#writedocs","title":"writeDocs","text":"<p>void writeDocs(Api api)</p> <p>Output the documentation files for the specified API</p> <p>Parameters:</p> <p><code>api</code> - The API to output the documentation for</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#outputmoduledoc","title":"outputModuleDoc","text":"<p>private void outputModuleDoc(ModuleNode moduleNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#outputmoduledirectives","title":"outputModuleDirectives","text":"<p>private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#outputmoduleprovidesdirectives","title":"outputModuleProvidesDirectives","text":"<p>private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#multilink","title":"multiLink","text":"<p>private String multiLink(List&lt;String&gt; names)</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#formatdirectivepackagedoc","title":"formatDirectivePackageDoc","text":"<p>private String formatDirectivePackageDoc(DirectiveNode directive)</p>"},{"location":"markista/javadoc/doclet/ModuleWriter/#outputconstantvalues","title":"outputConstantValues","text":"<p>private void outputConstantValues(ModuleNode moduleNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/","title":"PackageWriter","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#class-packagewriter","title":"Class PackageWriter","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.PackageWriter </p> <p>A class that outputs API documentation as Markdown.</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TEXT_CLASS private static final String TEXT_DESCRIPTION private static final String TEXT_MODIFIER_AND_TYPE private static final String BR private static final String NBSP private String outputDirectory private Writer writer private FileUtils fileUtils"},{"location":"markista/javadoc/doclet/PackageWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageWriter(String outputDirectory) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/doclet/PackageWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(ModuleNode moduleNode) Output the documentation files for the specified API private void outputPackageDoc(PackageNode packageNode) private void outputPackageMembers(String title, List&lt;PackageMember&gt; members) private void outputTypeDoc(TypeNode typeNode) private void outputTypeDoc(TypeNode typeNode, String typeKind) private void outputSupertypes(TypeNode typeDoc) private void outputImplementedInterfaces(TypeNode typeDoc) private void outputEnclosingClass(TypeNode typeDoc) private void outputNestedClassSummary(List&lt;PackageMember&gt; nestedClasses) private void outputEnumConstantsSummary(EnumNode enumNode) private void outputFieldSummary(List&lt;FieldNode&gt; fields) private void outputConstructorSummary(List&lt;MethodNode&gt; methods) private void outputMethodSummary(List&lt;MethodNode&gt; methods) Writes the markdown for a class's method summary table private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode) private void outputDetails(List&lt;Node&gt; nodes) Writes the markdown for a class's method or field details. private void outputReferences(Node node) private void outputMethodDetails(MethodNode method) private void outputMethodParams(MethodNode method) private void outputDeprecation(Deprecation status, Text text)"},{"location":"markista/javadoc/doclet/PackageWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/PackageWriter/#text_class","title":"TEXT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#text_description","title":"TEXT_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#text_modifier_and_type","title":"TEXT_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#br","title":"BR","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#nbsp","title":"NBSP","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputdirectory","title":"outputDirectory","text":""},{"location":"markista/javadoc/doclet/PackageWriter/#writer","title":"writer","text":""},{"location":"markista/javadoc/doclet/PackageWriter/#fileutils","title":"fileUtils","text":""},{"location":"markista/javadoc/doclet/PackageWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/PackageWriter/#writedocs","title":"writeDocs","text":"<p>void writeDocs(ModuleNode moduleNode)</p> <p>Output the documentation files for the specified API</p> <p>Parameters:</p> <p><code>moduleNode</code> - The module containing the packages to output the documentation for</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputpackagedoc","title":"outputPackageDoc","text":"<p>private void outputPackageDoc(PackageNode packageNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputpackagemembers","title":"outputPackageMembers","text":"<p>private void outputPackageMembers(String title, List&lt;PackageMember&gt; members)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputtypedoc","title":"outputTypeDoc","text":"<p>private void outputTypeDoc(TypeNode typeNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputtypedoc_1","title":"outputTypeDoc","text":"<p>private void outputTypeDoc(TypeNode typeNode, String typeKind)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputsupertypes","title":"outputSupertypes","text":"<p>private void outputSupertypes(TypeNode typeDoc)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputimplementedinterfaces","title":"outputImplementedInterfaces","text":"<p>private void outputImplementedInterfaces(TypeNode typeDoc)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputenclosingclass","title":"outputEnclosingClass","text":"<p>private void outputEnclosingClass(TypeNode typeDoc)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputnestedclasssummary","title":"outputNestedClassSummary","text":"<p>private void outputNestedClassSummary(List&lt;PackageMember&gt; nestedClasses)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputenumconstantssummary","title":"outputEnumConstantsSummary","text":"<p>private void outputEnumConstantsSummary(EnumNode enumNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputfieldsummary","title":"outputFieldSummary","text":"<p>private void outputFieldSummary(List&lt;FieldNode&gt; fields)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputconstructorsummary","title":"outputConstructorSummary","text":"<p>private void outputConstructorSummary(List&lt;MethodNode&gt; methods)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputmethodsummary","title":"outputMethodSummary","text":"<p>private void outputMethodSummary(List&lt;MethodNode&gt; methods)</p> <p>Writes the markdown for a class's method summary table</p> <p>Parameters:</p> <p><code>methods</code> - The list of methods to include in the summary table</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputenumconstantdetails","title":"outputEnumConstantDetails","text":"<p>private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputdetails","title":"outputDetails","text":"<p>private void outputDetails(List&lt;Node&gt; nodes)</p> <p>Writes the markdown for a class's method or field details.</p> <p>Parameters:</p> <p><code>nodes</code> - The list of methods to write the details of</p> <p>Throws:</p> <p>IOException</p> <p>Since:</p> <p>0.1.0</p> <p>See Also:</p> <p>http://example.com</p> <p>List</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputreferences","title":"outputReferences","text":"<p>private void outputReferences(Node node)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputmethoddetails","title":"outputMethodDetails","text":"<p>private void outputMethodDetails(MethodNode method)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputmethodparams","title":"outputMethodParams","text":"<p>private void outputMethodParams(MethodNode method)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/doclet/PackageWriter/#outputdeprecation","title":"outputDeprecation","text":"<p>private void outputDeprecation(Deprecation status, Text text)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/model/","title":"Package io.github.sandydunlop.markista.model","text":"<p>The classes used to store structure and docuemntation information in the API tree.</p> ClassesInterfacesEnum Classes Class Description InterfaceNode Reference ExceptionNode AnnotationNode OverriddenMethodNode ModuleNode DirectiveNode EnumNode FieldNode A class to hold information about fields within a class, interface, or enum. PackageNode TypeNode AbstractTypeOwner ParamNode A class to hold information about method parameters. ClassNode Api Node MethodNode Text Class Description PackageMember TypeOwner PackageOwner Class Description Modifier Deprecation"},{"location":"markista/javadoc/model/AbstractTypeOwner/","title":"AbstractTypeOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#class-abstracttypeowner","title":"Class AbstractTypeOwner","text":"<p>Object Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AbstractTypeOwner  All Implemented Interfaces: TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected List&lt;TypeNode&gt; types"},{"location":"markista/javadoc/model/AbstractTypeOwner/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AbstractTypeOwner()"},{"location":"markista/javadoc/model/AbstractTypeOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addType(TypeNode typeNode) List&lt;TypeNode&gt; getTypes() List&lt;PackageMember&gt; getClasses() List&lt;PackageMember&gt; getInterfaces() List&lt;PackageMember&gt; getEnums() List&lt;PackageMember&gt; getAnnotations() void addClass(ClassNode node) void addInterface(InterfaceNode node) void addEnum(EnumNode node) void addException(ExceptionNode node) void addAnnotation(AnnotationNode node) void sort()"},{"location":"markista/javadoc/model/AbstractTypeOwner/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/AbstractTypeOwner/#types","title":"types","text":""},{"location":"markista/javadoc/model/AbstractTypeOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/AbstractTypeOwner/#addtype","title":"addType","text":"<p>void addType(TypeNode typeNode)</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#gettypes","title":"getTypes","text":"<p>List&lt;TypeNode&gt; getTypes()</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getclasses","title":"getClasses","text":"<p>List&lt;PackageMember&gt; getClasses()</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getinterfaces","title":"getInterfaces","text":"<p>List&lt;PackageMember&gt; getInterfaces()</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getenums","title":"getEnums","text":"<p>List&lt;PackageMember&gt; getEnums()</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getannotations","title":"getAnnotations","text":"<p>List&lt;PackageMember&gt; getAnnotations()</p> <p>Specified By:</p> <p>TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addclass","title":"addClass","text":"<p>void addClass(ClassNode node)</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addinterface","title":"addInterface","text":"<p>void addInterface(InterfaceNode node)</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addenum","title":"addEnum","text":"<p>void addEnum(EnumNode node)</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addexception","title":"addException","text":"<p>void addException(ExceptionNode node)</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addannotation","title":"addAnnotation","text":"<p>void addAnnotation(AnnotationNode node)</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#sort","title":"sort","text":"<p>void sort()</p>"},{"location":"markista/javadoc/model/AnnotationNode/","title":"AnnotationNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AnnotationNode/#class-annotationnode","title":"Class AnnotationNode","text":"<p>Object Node AbstractTypeOwner TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationNode </p>"},{"location":"markista/javadoc/model/AnnotationNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/Api/","title":"Api","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Api/#class-api","title":"Class Api","text":"<p>Object Node AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Api </p>"},{"location":"markista/javadoc/model/Api/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;ModuleNode&gt; modules private List&lt;PackageNode&gt; packages private ModuleNode unnamedModule"},{"location":"markista/javadoc/model/Api/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Api()"},{"location":"markista/javadoc/model/Api/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getName() void addModule(ModuleNode node) List&lt;ModuleNode&gt; getModules() ModuleNode getModuleNode(String qualifiedName) ModuleNode getUnnamedModuleNode() void addPackage(PackageNode node) List&lt;PackageNode&gt; getPackages() PackageNode getPackageNode(String qualifiedName) TypeNode getTypeNode(String qualifiedName) TypeNode getTypeNode(TypeElement type) void sort()"},{"location":"markista/javadoc/model/Api/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Api/#modules","title":"modules","text":""},{"location":"markista/javadoc/model/Api/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/Api/#unnamedmodule","title":"unnamedModule","text":""},{"location":"markista/javadoc/model/Api/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Api/#getname","title":"getName","text":"<p>String getName()</p>"},{"location":"markista/javadoc/model/Api/#addmodule","title":"addModule","text":"<p>void addModule(ModuleNode node)</p>"},{"location":"markista/javadoc/model/Api/#getmodules","title":"getModules","text":"<p>List&lt;ModuleNode&gt; getModules()</p>"},{"location":"markista/javadoc/model/Api/#getmodulenode","title":"getModuleNode","text":"<p>ModuleNode getModuleNode(String qualifiedName)</p>"},{"location":"markista/javadoc/model/Api/#getunnamedmodulenode","title":"getUnnamedModuleNode","text":"<p>ModuleNode getUnnamedModuleNode()</p>"},{"location":"markista/javadoc/model/Api/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode node)</p>"},{"location":"markista/javadoc/model/Api/#getpackages","title":"getPackages","text":"<p>List&lt;PackageNode&gt; getPackages()</p>"},{"location":"markista/javadoc/model/Api/#getpackagenode","title":"getPackageNode","text":"<p>PackageNode getPackageNode(String qualifiedName)</p>"},{"location":"markista/javadoc/model/Api/#gettypenode","title":"getTypeNode","text":"<p>TypeNode getTypeNode(String qualifiedName)</p>"},{"location":"markista/javadoc/model/Api/#gettypenode_1","title":"getTypeNode","text":"<p>TypeNode getTypeNode(TypeElement type)</p>"},{"location":"markista/javadoc/model/Api/#sort","title":"sort","text":"<p>void sort()</p> <p>Overrides:</p> <p>AbstractTypeOwner.sort from AbstractTypeOwner</p>"},{"location":"markista/javadoc/model/ClassNode/","title":"ClassNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ClassNode/#class-classnode","title":"Class ClassNode","text":"<p>Object Node AbstractTypeOwner TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ClassNode </p>"},{"location":"markista/javadoc/model/ClassNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ClassNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/Deprecation/","title":"Deprecation","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Deprecation/#enum-deprecation","title":"Enum Deprecation","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Deprecation&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Deprecation </p>"},{"location":"markista/javadoc/model/Deprecation/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE FOR_REMOVAL DEPRECATED"},{"location":"markista/javadoc/model/Deprecation/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Deprecation()"},{"location":"markista/javadoc/model/Deprecation/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Deprecation values() static Deprecation valueOf(String name)"},{"location":"markista/javadoc/model/Deprecation/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Deprecation/#none","title":"NONE","text":"<p>public static final Deprecation NONE</p>"},{"location":"markista/javadoc/model/Deprecation/#for_removal","title":"FOR_REMOVAL","text":"<p>public static final Deprecation FOR_REMOVAL</p>"},{"location":"markista/javadoc/model/Deprecation/#deprecated","title":"DEPRECATED","text":"<p>public static final Deprecation DEPRECATED</p>"},{"location":"markista/javadoc/model/Deprecation/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Deprecation/#values","title":"values","text":"<p>static Deprecation values()</p>"},{"location":"markista/javadoc/model/Deprecation/#valueof","title":"valueOf","text":"<p>static Deprecation valueOf(String name)</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/","title":"DirectiveNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-directivenodekind","title":"Enum DirectiveNode.Kind","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.DirectiveNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode.Kind  Enclosing Class: DirectiveNode</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE REQUIRES EXPORTS OPENS USES PROVIDES"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode.Kind()"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static DirectiveNode.Kind values() static DirectiveNode.Kind valueOf(String name)"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/DirectiveNode.Kind/#none","title":"NONE","text":"<p>public static final DirectiveNode.Kind NONE</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#requires","title":"REQUIRES","text":"<p>public static final DirectiveNode.Kind REQUIRES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#exports","title":"EXPORTS","text":"<p>public static final DirectiveNode.Kind EXPORTS</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#opens","title":"OPENS","text":"<p>public static final DirectiveNode.Kind OPENS</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#uses","title":"USES","text":"<p>public static final DirectiveNode.Kind USES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#provides","title":"PROVIDES","text":"<p>public static final DirectiveNode.Kind PROVIDES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/DirectiveNode.Kind/#values","title":"values","text":"<p>static DirectiveNode.Kind values()</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#valueof","title":"valueOf","text":"<p>static DirectiveNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/DirectiveNode/","title":"DirectiveNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/DirectiveNode/#class-directivenode","title":"Class DirectiveNode","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode </p>"},{"location":"markista/javadoc/model/DirectiveNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private DirectiveNode.Kind kind private String name private boolean transitive private List&lt;String&gt; packages private List&lt;String&gt; implementations private String interfaceName"},{"location":"markista/javadoc/model/DirectiveNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode(DirectiveNode.Kind kind, String name, boolean transitive) DirectiveNode(DirectiveNode.Kind kind, String name)"},{"location":"markista/javadoc/model/DirectiveNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description DirectiveNode.Kind getKind() String getName() boolean isTransitive() void addPackage(String packageName) List&lt;String&gt; getPackages() void addImplementation(String implementationName) List&lt;String&gt; getImplementations() void setInterface(String interfaceName) String getInterface()"},{"location":"markista/javadoc/model/DirectiveNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/DirectiveNode/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/DirectiveNode/#name","title":"name","text":""},{"location":"markista/javadoc/model/DirectiveNode/#transitive","title":"transitive","text":""},{"location":"markista/javadoc/model/DirectiveNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/DirectiveNode/#implementations","title":"implementations","text":""},{"location":"markista/javadoc/model/DirectiveNode/#interfacename","title":"interfaceName","text":""},{"location":"markista/javadoc/model/DirectiveNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/DirectiveNode/#getkind","title":"getKind","text":"<p>DirectiveNode.Kind getKind()</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getname","title":"getName","text":"<p>String getName()</p>"},{"location":"markista/javadoc/model/DirectiveNode/#istransitive","title":"isTransitive","text":"<p>boolean isTransitive()</p>"},{"location":"markista/javadoc/model/DirectiveNode/#addpackage","title":"addPackage","text":"<p>void addPackage(String packageName)</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getpackages","title":"getPackages","text":"<p>List&lt;String&gt; getPackages()</p>"},{"location":"markista/javadoc/model/DirectiveNode/#addimplementation","title":"addImplementation","text":"<p>void addImplementation(String implementationName)</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getimplementations","title":"getImplementations","text":"<p>List&lt;String&gt; getImplementations()</p>"},{"location":"markista/javadoc/model/DirectiveNode/#setinterface","title":"setInterface","text":"<p>void setInterface(String interfaceName)</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getinterface","title":"getInterface","text":"<p>String getInterface()</p>"},{"location":"markista/javadoc/model/EnumNode/","title":"EnumNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/EnumNode/#class-enumnode","title":"Class EnumNode","text":"<p>Object Node AbstractTypeOwner TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.EnumNode </p>"},{"location":"markista/javadoc/model/EnumNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;FieldNode&gt; constants"},{"location":"markista/javadoc/model/EnumNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description EnumNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/EnumNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addConstant(FieldNode constant) List&lt;FieldNode&gt; getConstants()"},{"location":"markista/javadoc/model/EnumNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/EnumNode/#constants","title":"constants","text":""},{"location":"markista/javadoc/model/EnumNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/EnumNode/#addconstant","title":"addConstant","text":"<p>void addConstant(FieldNode constant)</p>"},{"location":"markista/javadoc/model/EnumNode/#getconstants","title":"getConstants","text":"<p>List&lt;FieldNode&gt; getConstants()</p>"},{"location":"markista/javadoc/model/ExceptionNode/","title":"ExceptionNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ExceptionNode/#class-exceptionnode","title":"Class ExceptionNode","text":"<p>Object Node AbstractTypeOwner TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ExceptionNode </p>"},{"location":"markista/javadoc/model/ExceptionNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ExceptionNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/FieldNode/","title":"FieldNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/FieldNode/#class-fieldnode","title":"Class FieldNode","text":"<p>Object Node ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.FieldNode </p> <p>A class to hold information about fields within a class, interface, or enum.</p>"},{"location":"markista/javadoc/model/FieldNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Serializable constantValue"},{"location":"markista/javadoc/model/FieldNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FieldNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/FieldNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Serializable getConstantValue() void setConstantValue(Serializable constantValue) String fullSignature()"},{"location":"markista/javadoc/model/FieldNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/FieldNode/#constantvalue","title":"constantValue","text":""},{"location":"markista/javadoc/model/FieldNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/FieldNode/#getconstantvalue","title":"getConstantValue","text":"<p>Serializable getConstantValue()</p>"},{"location":"markista/javadoc/model/FieldNode/#setconstantvalue","title":"setConstantValue","text":"<p>void setConstantValue(Serializable constantValue)</p>"},{"location":"markista/javadoc/model/FieldNode/#fullsignature","title":"fullSignature","text":"<p>String fullSignature()</p>"},{"location":"markista/javadoc/model/InterfaceNode/","title":"InterfaceNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/InterfaceNode/#class-interfacenode","title":"Class InterfaceNode","text":"<p>Object Node AbstractTypeOwner TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.InterfaceNode </p>"},{"location":"markista/javadoc/model/InterfaceNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description InterfaceNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/MethodNode/","title":"MethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/MethodNode/#class-methodnode","title":"Class MethodNode","text":"<p>Object Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.MethodNode </p>"},{"location":"markista/javadoc/model/MethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Text returnDescription private String specifiedBy private TypeNode returnType private OverriddenMethodNode overrides private List&lt;ParamNode&gt; params private List&lt;String&gt; thrownTypes private TypeNode owner"},{"location":"markista/javadoc/model/MethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MethodNode(TypeNode returnType, String name)"},{"location":"markista/javadoc/model/MethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setOverriddenMethod(OverriddenMethodNode overrides) OverriddenMethodNode getOverriddenMethod() TypeNode getReturnType() void addParam(ParamNode param) List&lt;ParamNode&gt; getParams() void addThrownType(String name) List&lt;String&gt; getThrownTypes() void setOwner(TypeNode owner) TypeNode getOwner() void setSpecifiedBy(String interfaceName) String getSpecifiedBy() void setReturnDescription(Text text) Text getReturnDescription() String signature() void setSimpleName(String name) String getSimpleName()"},{"location":"markista/javadoc/model/MethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/MethodNode/#returndescription","title":"returnDescription","text":""},{"location":"markista/javadoc/model/MethodNode/#specifiedby","title":"specifiedBy","text":""},{"location":"markista/javadoc/model/MethodNode/#returntype","title":"returnType","text":""},{"location":"markista/javadoc/model/MethodNode/#overrides","title":"overrides","text":""},{"location":"markista/javadoc/model/MethodNode/#params","title":"params","text":""},{"location":"markista/javadoc/model/MethodNode/#throwntypes","title":"thrownTypes","text":""},{"location":"markista/javadoc/model/MethodNode/#owner","title":"owner","text":""},{"location":"markista/javadoc/model/MethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/MethodNode/#setoverriddenmethod","title":"setOverriddenMethod","text":"<p>void setOverriddenMethod(OverriddenMethodNode overrides)</p>"},{"location":"markista/javadoc/model/MethodNode/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>OverriddenMethodNode getOverriddenMethod()</p>"},{"location":"markista/javadoc/model/MethodNode/#getreturntype","title":"getReturnType","text":"<p>TypeNode getReturnType()</p>"},{"location":"markista/javadoc/model/MethodNode/#addparam","title":"addParam","text":"<p>void addParam(ParamNode param)</p>"},{"location":"markista/javadoc/model/MethodNode/#getparams","title":"getParams","text":"<p>List&lt;ParamNode&gt; getParams()</p>"},{"location":"markista/javadoc/model/MethodNode/#addthrowntype","title":"addThrownType","text":"<p>void addThrownType(String name)</p>"},{"location":"markista/javadoc/model/MethodNode/#getthrowntypes","title":"getThrownTypes","text":"<p>List&lt;String&gt; getThrownTypes()</p>"},{"location":"markista/javadoc/model/MethodNode/#setowner","title":"setOwner","text":"<p>void setOwner(TypeNode owner)</p>"},{"location":"markista/javadoc/model/MethodNode/#getowner","title":"getOwner","text":"<p>TypeNode getOwner()</p>"},{"location":"markista/javadoc/model/MethodNode/#setspecifiedby","title":"setSpecifiedBy","text":"<p>void setSpecifiedBy(String interfaceName)</p>"},{"location":"markista/javadoc/model/MethodNode/#getspecifiedby","title":"getSpecifiedBy","text":"<p>String getSpecifiedBy()</p>"},{"location":"markista/javadoc/model/MethodNode/#setreturndescription","title":"setReturnDescription","text":"<p>void setReturnDescription(Text text)</p>"},{"location":"markista/javadoc/model/MethodNode/#getreturndescription","title":"getReturnDescription","text":"<p>Text getReturnDescription()</p>"},{"location":"markista/javadoc/model/MethodNode/#signature","title":"signature","text":"<p>String signature()</p>"},{"location":"markista/javadoc/model/MethodNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p>"},{"location":"markista/javadoc/model/MethodNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p>"},{"location":"markista/javadoc/model/Modifier/","title":"Modifier","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Modifier/#enum-modifier","title":"Enum Modifier","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Modifier&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Modifier </p>"},{"location":"markista/javadoc/model/Modifier/#enum-constants","title":"Enum Constants","text":"Enum Constant Description PUBLIC PROTECTED PRIVATE STATIC FINAL ABSTRACT SYNCHRONIZED TRANSIENT VOLATILE NATIVE STRICTFP DEFAULT"},{"location":"markista/javadoc/model/Modifier/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name"},{"location":"markista/javadoc/model/Modifier/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Modifier(String s)"},{"location":"markista/javadoc/model/Modifier/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Modifier values() static Modifier valueOf(String name) String toString()"},{"location":"markista/javadoc/model/Modifier/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Modifier/#public","title":"PUBLIC","text":"<p>public static final Modifier PUBLIC</p>"},{"location":"markista/javadoc/model/Modifier/#protected","title":"PROTECTED","text":"<p>public static final Modifier PROTECTED</p>"},{"location":"markista/javadoc/model/Modifier/#private","title":"PRIVATE","text":"<p>public static final Modifier PRIVATE</p>"},{"location":"markista/javadoc/model/Modifier/#static","title":"STATIC","text":"<p>public static final Modifier STATIC</p>"},{"location":"markista/javadoc/model/Modifier/#final","title":"FINAL","text":"<p>public static final Modifier FINAL</p>"},{"location":"markista/javadoc/model/Modifier/#abstract","title":"ABSTRACT","text":"<p>public static final Modifier ABSTRACT</p>"},{"location":"markista/javadoc/model/Modifier/#synchronized","title":"SYNCHRONIZED","text":"<p>public static final Modifier SYNCHRONIZED</p>"},{"location":"markista/javadoc/model/Modifier/#transient","title":"TRANSIENT","text":"<p>public static final Modifier TRANSIENT</p>"},{"location":"markista/javadoc/model/Modifier/#volatile","title":"VOLATILE","text":"<p>public static final Modifier VOLATILE</p>"},{"location":"markista/javadoc/model/Modifier/#native","title":"NATIVE","text":"<p>public static final Modifier NATIVE</p>"},{"location":"markista/javadoc/model/Modifier/#strictfp","title":"STRICTFP","text":"<p>public static final Modifier STRICTFP</p>"},{"location":"markista/javadoc/model/Modifier/#default","title":"DEFAULT","text":"<p>public static final Modifier DEFAULT</p>"},{"location":"markista/javadoc/model/Modifier/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Modifier/#name","title":"name","text":""},{"location":"markista/javadoc/model/Modifier/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Modifier/#values","title":"values","text":"<p>static Modifier values()</p>"},{"location":"markista/javadoc/model/Modifier/#valueof","title":"valueOf","text":"<p>static Modifier valueOf(String name)</p>"},{"location":"markista/javadoc/model/Modifier/#tostring","title":"toString","text":"<p>String toString()</p> <p>Overrides:</p> <p>Enum.toString from Enum&lt;Modifier&gt;</p>"},{"location":"markista/javadoc/model/ModuleNode/","title":"ModuleNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ModuleNode/#class-modulenode","title":"Class ModuleNode","text":"<p>Object Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ModuleNode  All Implemented Interfaces: PackageOwner</p>"},{"location":"markista/javadoc/model/ModuleNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;DirectiveNode&gt; directives private List&lt;PackageMember&gt; packages private List&lt;FieldNode&gt; constantValues"},{"location":"markista/javadoc/model/ModuleNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleNode(String moduleName)"},{"location":"markista/javadoc/model/ModuleNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getName() List&lt;PackageMember&gt; getPackages() void addPackage(PackageNode packageNode) void addDirective(DirectiveNode directive) List&lt;DirectiveNode&gt; getDirectives() void addConstantValue(FieldNode constant) List&lt;FieldNode&gt; getConstantValues() List&lt;DirectiveNode&gt; getExports() List&lt;DirectiveNode&gt; getRequires() List&lt;DirectiveNode&gt; getOpens() List&lt;DirectiveNode&gt; getUses() List&lt;DirectiveNode&gt; getProvides()"},{"location":"markista/javadoc/model/ModuleNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/ModuleNode/#directives","title":"directives","text":""},{"location":"markista/javadoc/model/ModuleNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/ModuleNode/#constantvalues","title":"constantValues","text":""},{"location":"markista/javadoc/model/ModuleNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ModuleNode/#getname","title":"getName","text":"<p>String getName()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getpackages","title":"getPackages","text":"<p>List&lt;PackageMember&gt; getPackages()</p> <p>Specified By:</p> <p>PackageOwner</p>"},{"location":"markista/javadoc/model/ModuleNode/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode packageNode)</p> <p>Specified By:</p> <p>PackageOwner</p>"},{"location":"markista/javadoc/model/ModuleNode/#adddirective","title":"addDirective","text":"<p>void addDirective(DirectiveNode directive)</p>"},{"location":"markista/javadoc/model/ModuleNode/#getdirectives","title":"getDirectives","text":"<p>List&lt;DirectiveNode&gt; getDirectives()</p>"},{"location":"markista/javadoc/model/ModuleNode/#addconstantvalue","title":"addConstantValue","text":"<p>void addConstantValue(FieldNode constant)</p>"},{"location":"markista/javadoc/model/ModuleNode/#getconstantvalues","title":"getConstantValues","text":"<p>List&lt;FieldNode&gt; getConstantValues()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getexports","title":"getExports","text":"<p>List&lt;DirectiveNode&gt; getExports()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getrequires","title":"getRequires","text":"<p>List&lt;DirectiveNode&gt; getRequires()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getopens","title":"getOpens","text":"<p>List&lt;DirectiveNode&gt; getOpens()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getuses","title":"getUses","text":"<p>List&lt;DirectiveNode&gt; getUses()</p>"},{"location":"markista/javadoc/model/ModuleNode/#getprovides","title":"getProvides","text":"<p>List&lt;DirectiveNode&gt; getProvides()</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/","title":"Node.ModifierSorter","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#class-nodemodifiersorter","title":"Class Node.ModifierSorter","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node.ModifierSorter  Enclosing Class: Node</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final List&lt;Modifier&gt; ORDER"},{"location":"markista/javadoc/model/Node.ModifierSorter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node.ModifierSorter()"},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#order","title":"ORDER","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#sortmodifiers","title":"sortModifiers","text":"<p>static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)</p>"},{"location":"markista/javadoc/model/Node/","title":"Node","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node/#class-node","title":"Class Node","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node </p>"},{"location":"markista/javadoc/model/Node/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description Node.ModifierSorter"},{"location":"markista/javadoc/model/Node/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected String simpleName protected String qualifiedName protected PackageNode packageNode private Set&lt;Modifier&gt; modifiers private Deprecation deprecation private Text deprecationText private Text since protected Text firstSentence private Text body private Text fullBody private List&lt;Reference&gt; references"},{"location":"markista/javadoc/model/Node/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node()"},{"location":"markista/javadoc/model/Node/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addModifier(Modifier mod) Set&lt;Modifier&gt; getModifiers() void setDeprecation(Deprecation deprecation) Deprecation getDeprecation() void setDeprecationText(Text text) Text getDeprecationText() void setSince(Text text) Text getSince() void setFirstSentence(Text text) Text getFirstSentence() void setBody(Text text) Text getBody() void setFullBody(Text text) Text getFullBody() void setReferences(List&lt;Reference&gt; refs) List&lt;Reference&gt; getReferences() String getModifiersString()"},{"location":"markista/javadoc/model/Node/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node/#simplename","title":"simpleName","text":""},{"location":"markista/javadoc/model/Node/#qualifiedname","title":"qualifiedName","text":""},{"location":"markista/javadoc/model/Node/#packagenode","title":"packageNode","text":""},{"location":"markista/javadoc/model/Node/#modifiers","title":"modifiers","text":""},{"location":"markista/javadoc/model/Node/#deprecation","title":"deprecation","text":""},{"location":"markista/javadoc/model/Node/#deprecationtext","title":"deprecationText","text":""},{"location":"markista/javadoc/model/Node/#since","title":"since","text":""},{"location":"markista/javadoc/model/Node/#firstsentence","title":"firstSentence","text":""},{"location":"markista/javadoc/model/Node/#body","title":"body","text":""},{"location":"markista/javadoc/model/Node/#fullbody","title":"fullBody","text":""},{"location":"markista/javadoc/model/Node/#references","title":"references","text":""},{"location":"markista/javadoc/model/Node/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node/#addmodifier","title":"addModifier","text":"<p>void addModifier(Modifier mod)</p>"},{"location":"markista/javadoc/model/Node/#getmodifiers","title":"getModifiers","text":"<p>Set&lt;Modifier&gt; getModifiers()</p>"},{"location":"markista/javadoc/model/Node/#setdeprecation","title":"setDeprecation","text":"<p>void setDeprecation(Deprecation deprecation)</p>"},{"location":"markista/javadoc/model/Node/#getdeprecation","title":"getDeprecation","text":"<p>Deprecation getDeprecation()</p>"},{"location":"markista/javadoc/model/Node/#setdeprecationtext","title":"setDeprecationText","text":"<p>void setDeprecationText(Text text)</p>"},{"location":"markista/javadoc/model/Node/#getdeprecationtext","title":"getDeprecationText","text":"<p>Text getDeprecationText()</p>"},{"location":"markista/javadoc/model/Node/#setsince","title":"setSince","text":"<p>void setSince(Text text)</p>"},{"location":"markista/javadoc/model/Node/#getsince","title":"getSince","text":"<p>Text getSince()</p>"},{"location":"markista/javadoc/model/Node/#setfirstsentence","title":"setFirstSentence","text":"<p>void setFirstSentence(Text text)</p>"},{"location":"markista/javadoc/model/Node/#getfirstsentence","title":"getFirstSentence","text":"<p>Text getFirstSentence()</p>"},{"location":"markista/javadoc/model/Node/#setbody","title":"setBody","text":"<p>void setBody(Text text)</p>"},{"location":"markista/javadoc/model/Node/#getbody","title":"getBody","text":"<p>Text getBody()</p>"},{"location":"markista/javadoc/model/Node/#setfullbody","title":"setFullBody","text":"<p>void setFullBody(Text text)</p>"},{"location":"markista/javadoc/model/Node/#getfullbody","title":"getFullBody","text":"<p>Text getFullBody()</p>"},{"location":"markista/javadoc/model/Node/#setreferences","title":"setReferences","text":"<p>void setReferences(List&lt;Reference&gt; refs)</p>"},{"location":"markista/javadoc/model/Node/#getreferences","title":"getReferences","text":"<p>List&lt;Reference&gt; getReferences()</p>"},{"location":"markista/javadoc/model/Node/#getmodifiersstring","title":"getModifiersString","text":"<p>String getModifiersString()</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/","title":"OverriddenMethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#class-overriddenmethodnode","title":"Class OverriddenMethodNode","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.OverriddenMethodNode </p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String qualifiedClassName private String methodName"},{"location":"markista/javadoc/model/OverriddenMethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description OverriddenMethodNode(String qualifiedClassName, String methodName)"},{"location":"markista/javadoc/model/OverriddenMethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getClassName() String getMethodName()"},{"location":"markista/javadoc/model/OverriddenMethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#qualifiedclassname","title":"qualifiedClassName","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#methodname","title":"methodName","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#getclassname","title":"getClassName","text":"<p>String getClassName()</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#getmethodname","title":"getMethodName","text":"<p>String getMethodName()</p>"},{"location":"markista/javadoc/model/PackageMember/","title":"PackageMember","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageMember/#interface-packagemember","title":"Interface PackageMember","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageMember </p>"},{"location":"markista/javadoc/model/PackageMember/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract String getName() abstract Text getDescription()"},{"location":"markista/javadoc/model/PackageMember/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageMember/#getname","title":"getName","text":"<p>abstract String getName()</p>"},{"location":"markista/javadoc/model/PackageMember/#getdescription","title":"getDescription","text":"<p>abstract Text getDescription()</p>"},{"location":"markista/javadoc/model/PackageNode/","title":"PackageNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageNode/#class-packagenode","title":"Class PackageNode","text":"<p>Object Node AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageNode  All Implemented Interfaces: PackageMember, PackageOwner</p>"},{"location":"markista/javadoc/model/PackageNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private ModuleNode module private List&lt;PackageMember&gt; packages"},{"location":"markista/javadoc/model/PackageNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageNode(String packageName)"},{"location":"markista/javadoc/model/PackageNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setModule(ModuleNode module) ModuleNode getModule() List&lt;PackageMember&gt; getPackages() void addPackage(PackageNode packageNode) String getName() Text getDescription()"},{"location":"markista/javadoc/model/PackageNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/PackageNode/#module","title":"module","text":""},{"location":"markista/javadoc/model/PackageNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/PackageNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageNode/#setmodule","title":"setModule","text":"<p>void setModule(ModuleNode module)</p>"},{"location":"markista/javadoc/model/PackageNode/#getmodule","title":"getModule","text":"<p>ModuleNode getModule()</p>"},{"location":"markista/javadoc/model/PackageNode/#getpackages","title":"getPackages","text":"<p>List&lt;PackageMember&gt; getPackages()</p> <p>Specified By:</p> <p>PackageOwner</p>"},{"location":"markista/javadoc/model/PackageNode/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode packageNode)</p> <p>Specified By:</p> <p>PackageOwner</p>"},{"location":"markista/javadoc/model/PackageNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Specified By:</p> <p>PackageMember</p>"},{"location":"markista/javadoc/model/PackageNode/#getdescription","title":"getDescription","text":"<p>Text getDescription()</p> <p>Specified By:</p> <p>PackageMember</p>"},{"location":"markista/javadoc/model/PackageOwner/","title":"PackageOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageOwner/#interface-packageowner","title":"Interface PackageOwner","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageOwner </p>"},{"location":"markista/javadoc/model/PackageOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract List&lt;PackageMember&gt; getPackages() abstract void addPackage(PackageNode packageNode)"},{"location":"markista/javadoc/model/PackageOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageOwner/#getpackages","title":"getPackages","text":"<p>abstract List&lt;PackageMember&gt; getPackages()</p>"},{"location":"markista/javadoc/model/PackageOwner/#addpackage","title":"addPackage","text":"<p>abstract void addPackage(PackageNode packageNode)</p>"},{"location":"markista/javadoc/model/ParamNode/","title":"ParamNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ParamNode/#class-paramnode","title":"Class ParamNode","text":"<p>Object Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ParamNode </p> <p>A class to hold information about method parameters.</p>"},{"location":"markista/javadoc/model/ParamNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private TypeNode type"},{"location":"markista/javadoc/model/ParamNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ParamNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/ParamNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description TypeNode getType() void setType(TypeNode type) void setSimpleName(String name) String getSimpleName() void setQualifiedName(String name) String getQualifiedName()"},{"location":"markista/javadoc/model/ParamNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/ParamNode/#type","title":"type","text":""},{"location":"markista/javadoc/model/ParamNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ParamNode/#gettype","title":"getType","text":"<p>TypeNode getType()</p>"},{"location":"markista/javadoc/model/ParamNode/#settype","title":"setType","text":"<p>void setType(TypeNode type)</p>"},{"location":"markista/javadoc/model/ParamNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p>"},{"location":"markista/javadoc/model/ParamNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p>"},{"location":"markista/javadoc/model/ParamNode/#setqualifiedname","title":"setQualifiedName","text":"<p>void setQualifiedName(String name)</p>"},{"location":"markista/javadoc/model/ParamNode/#getqualifiedname","title":"getQualifiedName","text":"<p>String getQualifiedName()</p>"},{"location":"markista/javadoc/model/Reference.Kind/","title":"Reference.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-referencekind","title":"Enum Reference.Kind","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Kind  Enclosing Class: Reference</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE UNKNOWN URL PAGE MODULE PACKAGE TYPE METHOD PRIMITIVE VOID"},{"location":"markista/javadoc/model/Reference.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Kind()"},{"location":"markista/javadoc/model/Reference.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Reference.Kind values() static Reference.Kind valueOf(String name)"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Kind/#none","title":"NONE","text":"<p>public static final Reference.Kind NONE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#unknown","title":"UNKNOWN","text":"<p>public static final Reference.Kind UNKNOWN</p>"},{"location":"markista/javadoc/model/Reference.Kind/#url","title":"URL","text":"<p>public static final Reference.Kind URL</p>"},{"location":"markista/javadoc/model/Reference.Kind/#page","title":"PAGE","text":"<p>public static final Reference.Kind PAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#module","title":"MODULE","text":"<p>public static final Reference.Kind MODULE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#package","title":"PACKAGE","text":"<p>public static final Reference.Kind PACKAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#type","title":"TYPE","text":"<p>public static final Reference.Kind TYPE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#method","title":"METHOD","text":"<p>public static final Reference.Kind METHOD</p>"},{"location":"markista/javadoc/model/Reference.Kind/#primitive","title":"PRIMITIVE","text":"<p>public static final Reference.Kind PRIMITIVE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#void","title":"VOID","text":"<p>public static final Reference.Kind VOID</p>"},{"location":"markista/javadoc/model/Reference.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference.Kind/#values","title":"values","text":"<p>static Reference.Kind values()</p>"},{"location":"markista/javadoc/model/Reference.Kind/#valueof","title":"valueOf","text":"<p>static Reference.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/Reference.Scope/","title":"Reference.Scope","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-referencescope","title":"Enum Reference.Scope","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Scope&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Scope  Enclosing Class: Reference</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE UNKNOWN LOCAL NATIVE FOREIGN"},{"location":"markista/javadoc/model/Reference.Scope/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Scope()"},{"location":"markista/javadoc/model/Reference.Scope/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Reference.Scope values() static Reference.Scope valueOf(String name)"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Scope/#none","title":"NONE","text":"<p>public static final Reference.Scope NONE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#unknown","title":"UNKNOWN","text":"<p>public static final Reference.Scope UNKNOWN</p>"},{"location":"markista/javadoc/model/Reference.Scope/#local","title":"LOCAL","text":"<p>public static final Reference.Scope LOCAL</p>"},{"location":"markista/javadoc/model/Reference.Scope/#native","title":"NATIVE","text":"<p>public static final Reference.Scope NATIVE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#foreign","title":"FOREIGN","text":"<p>public static final Reference.Scope FOREIGN</p>"},{"location":"markista/javadoc/model/Reference.Scope/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference.Scope/#values","title":"values","text":"<p>static Reference.Scope values()</p>"},{"location":"markista/javadoc/model/Reference.Scope/#valueof","title":"valueOf","text":"<p>static Reference.Scope valueOf(String name)</p>"},{"location":"markista/javadoc/model/Reference/","title":"Reference","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference/#class-reference","title":"Class Reference","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference </p>"},{"location":"markista/javadoc/model/Reference/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Reference.Kind kind private Reference.Scope scope private String name private String uri private String anchor"},{"location":"markista/javadoc/model/Reference/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference() Reference(Reference.Kind kind, String name, String uri) Reference(Reference.Scope scope, Reference.Kind kind, String name) Reference(Reference.Scope scope, Reference.Kind kind, String name, String uri)"},{"location":"markista/javadoc/model/Reference/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setKind(Reference.Kind kind) Reference.Kind getKind() void setScope(Reference.Scope scope) Reference.Scope getScope() void setName(String name) String getName() void setUri(String uri) String getUri() void setAnchor(String anchor) String getAnchor()"},{"location":"markista/javadoc/model/Reference/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Reference/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/Reference/#scope","title":"scope","text":""},{"location":"markista/javadoc/model/Reference/#name","title":"name","text":""},{"location":"markista/javadoc/model/Reference/#uri","title":"uri","text":""},{"location":"markista/javadoc/model/Reference/#anchor","title":"anchor","text":""},{"location":"markista/javadoc/model/Reference/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference/#setkind","title":"setKind","text":"<p>void setKind(Reference.Kind kind)</p>"},{"location":"markista/javadoc/model/Reference/#getkind","title":"getKind","text":"<p>Reference.Kind getKind()</p>"},{"location":"markista/javadoc/model/Reference/#setscope","title":"setScope","text":"<p>void setScope(Reference.Scope scope)</p>"},{"location":"markista/javadoc/model/Reference/#getscope","title":"getScope","text":"<p>Reference.Scope getScope()</p>"},{"location":"markista/javadoc/model/Reference/#setname","title":"setName","text":"<p>void setName(String name)</p>"},{"location":"markista/javadoc/model/Reference/#getname","title":"getName","text":"<p>String getName()</p>"},{"location":"markista/javadoc/model/Reference/#seturi","title":"setUri","text":"<p>void setUri(String uri)</p>"},{"location":"markista/javadoc/model/Reference/#geturi","title":"getUri","text":"<p>String getUri()</p>"},{"location":"markista/javadoc/model/Reference/#setanchor","title":"setAnchor","text":"<p>void setAnchor(String anchor)</p>"},{"location":"markista/javadoc/model/Reference/#getanchor","title":"getAnchor","text":"<p>String getAnchor()</p>"},{"location":"markista/javadoc/model/Text.Segment/","title":"Text.Segment","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text.Segment/#class-textsegment","title":"Class Text.Segment","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.Segment  Enclosing Class: Text</p>"},{"location":"markista/javadoc/model/Text.Segment/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Text.SegmentKind kind private String text private String link"},{"location":"markista/javadoc/model/Text.Segment/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.Segment()"},{"location":"markista/javadoc/model/Text.Segment/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text.Segment empty() Text.Segment setKind(Text.SegmentKind k) Text.SegmentKind getKind() String toString() Text.Segment setText(String text) String getText() Text.Segment setLink(String link) String getLink()"},{"location":"markista/javadoc/model/Text.Segment/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Text.Segment/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/Text.Segment/#text","title":"text","text":""},{"location":"markista/javadoc/model/Text.Segment/#link","title":"link","text":""},{"location":"markista/javadoc/model/Text.Segment/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text.Segment/#empty","title":"empty","text":"<p>static Text.Segment empty()</p>"},{"location":"markista/javadoc/model/Text.Segment/#setkind","title":"setKind","text":"<p>Text.Segment setKind(Text.SegmentKind k)</p>"},{"location":"markista/javadoc/model/Text.Segment/#getkind","title":"getKind","text":"<p>Text.SegmentKind getKind()</p>"},{"location":"markista/javadoc/model/Text.Segment/#tostring","title":"toString","text":"<p>String toString()</p>"},{"location":"markista/javadoc/model/Text.Segment/#settext","title":"setText","text":"<p>Text.Segment setText(String text)</p>"},{"location":"markista/javadoc/model/Text.Segment/#gettext","title":"getText","text":"<p>String getText()</p>"},{"location":"markista/javadoc/model/Text.Segment/#setlink","title":"setLink","text":"<p>Text.Segment setLink(String link)</p>"},{"location":"markista/javadoc/model/Text.Segment/#getlink","title":"getLink","text":"<p>String getLink()</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/","title":"Text.SegmentKind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-textsegmentkind","title":"Enum Text.SegmentKind","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Text.SegmentKind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.SegmentKind  Enclosing Class: Text</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE MARKDOWN TEXT LINK CODE START END"},{"location":"markista/javadoc/model/Text.SegmentKind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.SegmentKind()"},{"location":"markista/javadoc/model/Text.SegmentKind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text.SegmentKind values() static Text.SegmentKind valueOf(String name)"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Text.SegmentKind/#none","title":"NONE","text":"<p>public static final Text.SegmentKind NONE</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#markdown","title":"MARKDOWN","text":"<p>public static final Text.SegmentKind MARKDOWN</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#text","title":"TEXT","text":"<p>public static final Text.SegmentKind TEXT</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#link","title":"LINK","text":"<p>public static final Text.SegmentKind LINK</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#code","title":"CODE","text":"<p>public static final Text.SegmentKind CODE</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#start","title":"START","text":"<p>public static final Text.SegmentKind START</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#end","title":"END","text":"<p>public static final Text.SegmentKind END</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text.SegmentKind/#values","title":"values","text":"<p>static Text.SegmentKind values()</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#valueof","title":"valueOf","text":"<p>static Text.SegmentKind valueOf(String name)</p>"},{"location":"markista/javadoc/model/Text/","title":"Text","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text/#class-text","title":"Class Text","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text </p>"},{"location":"markista/javadoc/model/Text/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description static Text.Segment"},{"location":"markista/javadoc/model/Text/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;Text.Segment&gt; segments"},{"location":"markista/javadoc/model/Text/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text()"},{"location":"markista/javadoc/model/Text/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text empty() String toString() boolean isEmpty() List&lt;Text.Segment&gt; getSegments() void set(Text text) Text append(Text.Segment segment) Text append(Text text)"},{"location":"markista/javadoc/model/Text/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Text/#segments","title":"segments","text":""},{"location":"markista/javadoc/model/Text/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text/#empty","title":"empty","text":"<p>static Text empty()</p>"},{"location":"markista/javadoc/model/Text/#tostring","title":"toString","text":"<p>String toString()</p>"},{"location":"markista/javadoc/model/Text/#isempty","title":"isEmpty","text":"<p>boolean isEmpty()</p>"},{"location":"markista/javadoc/model/Text/#getsegments","title":"getSegments","text":"<p>List&lt;Text.Segment&gt; getSegments()</p>"},{"location":"markista/javadoc/model/Text/#set","title":"set","text":"<p>void set(Text text)</p>"},{"location":"markista/javadoc/model/Text/#append","title":"append","text":"<p>Text append(Text.Segment segment)</p>"},{"location":"markista/javadoc/model/Text/#append_1","title":"append","text":"<p>Text append(Text text)</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/","title":"TypeNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-typenodekind","title":"Enum TypeNode.Kind","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.TypeNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode.Kind  Enclosing Class: TypeNode</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE CLASS INTERFACE ENUM ANNOTATION"},{"location":"markista/javadoc/model/TypeNode.Kind/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name"},{"location":"markista/javadoc/model/TypeNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode.Kind(String s)"},{"location":"markista/javadoc/model/TypeNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static TypeNode.Kind values() static TypeNode.Kind valueOf(String name) String toString()"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#none","title":"NONE","text":"<p>public static final TypeNode.Kind NONE</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#class","title":"CLASS","text":"<p>public static final TypeNode.Kind CLASS</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#interface","title":"INTERFACE","text":"<p>public static final TypeNode.Kind INTERFACE</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum","title":"ENUM","text":"<p>public static final TypeNode.Kind ENUM</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#annotation","title":"ANNOTATION","text":"<p>public static final TypeNode.Kind ANNOTATION</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#name","title":"name","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#values","title":"values","text":"<p>static TypeNode.Kind values()</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#valueof","title":"valueOf","text":"<p>static TypeNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#tostring","title":"toString","text":"<p>String toString()</p> <p>Overrides:</p> <p>Enum.toString from Enum&lt;TypeNode.Kind&gt;</p>"},{"location":"markista/javadoc/model/TypeNode/","title":"TypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode/#class-typenode","title":"Class TypeNode","text":"<p>Object Node AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode  All Implemented Interfaces: PackageMember</p>"},{"location":"markista/javadoc/model/TypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private TypeOwner owner private List&lt;String&gt; implementedInterfaces private List&lt;String&gt; supertypes private String arrayBrackets private List&lt;MethodNode&gt; constructors private List&lt;MethodNode&gt; methods private List&lt;FieldNode&gt; fields protected TypeNode.Kind kind"},{"location":"markista/javadoc/model/TypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode(String qualifiedName, String simpleName, PackageNode packageNode)"},{"location":"markista/javadoc/model/TypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setArrayBrackets(String brackets) String getArrayBrackets() void setImplementedInterfaces(List&lt;String&gt; implementedInterfaces) void setSupertypes(List&lt;String&gt; supertypes) List&lt;String&gt; getSupertypes() List&lt;String&gt; getImplementedInterfaces() void setOwner(TypeOwner owner) TypeOwner getOwner() void setSimpleName(String name) String getSimpleName() void setQualifiedName(String name) String getQualifiedName() String getPackageName() PackageNode getPackage() void setKind(TypeNode.Kind kind) TypeNode.Kind getKind() void addMethod(MethodNode method) List&lt;MethodNode&gt; getMethods() void addConstructor(MethodNode constructor) List&lt;MethodNode&gt; getConstructors() void addField(FieldNode field) List&lt;FieldNode&gt; getFields() FieldNode getField(String fieldName) MethodNode getMethod(MethodNode method) MethodNode getConstructor(MethodNode method) String getName() Text getDescription()"},{"location":"markista/javadoc/model/TypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/TypeNode/#owner","title":"owner","text":""},{"location":"markista/javadoc/model/TypeNode/#implementedinterfaces","title":"implementedInterfaces","text":""},{"location":"markista/javadoc/model/TypeNode/#supertypes","title":"supertypes","text":""},{"location":"markista/javadoc/model/TypeNode/#arraybrackets","title":"arrayBrackets","text":""},{"location":"markista/javadoc/model/TypeNode/#constructors","title":"constructors","text":""},{"location":"markista/javadoc/model/TypeNode/#methods","title":"methods","text":""},{"location":"markista/javadoc/model/TypeNode/#fields","title":"fields","text":""},{"location":"markista/javadoc/model/TypeNode/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/TypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode/#setarraybrackets","title":"setArrayBrackets","text":"<p>void setArrayBrackets(String brackets)</p>"},{"location":"markista/javadoc/model/TypeNode/#getarraybrackets","title":"getArrayBrackets","text":"<p>String getArrayBrackets()</p>"},{"location":"markista/javadoc/model/TypeNode/#setimplementedinterfaces","title":"setImplementedInterfaces","text":"<p>void setImplementedInterfaces(List&lt;String&gt; implementedInterfaces)</p>"},{"location":"markista/javadoc/model/TypeNode/#setsupertypes","title":"setSupertypes","text":"<p>void setSupertypes(List&lt;String&gt; supertypes)</p>"},{"location":"markista/javadoc/model/TypeNode/#getsupertypes","title":"getSupertypes","text":"<p>List&lt;String&gt; getSupertypes()</p>"},{"location":"markista/javadoc/model/TypeNode/#getimplementedinterfaces","title":"getImplementedInterfaces","text":"<p>List&lt;String&gt; getImplementedInterfaces()</p>"},{"location":"markista/javadoc/model/TypeNode/#setowner","title":"setOwner","text":"<p>void setOwner(TypeOwner owner)</p>"},{"location":"markista/javadoc/model/TypeNode/#getowner","title":"getOwner","text":"<p>TypeOwner getOwner()</p>"},{"location":"markista/javadoc/model/TypeNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p>"},{"location":"markista/javadoc/model/TypeNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p>"},{"location":"markista/javadoc/model/TypeNode/#setqualifiedname","title":"setQualifiedName","text":"<p>void setQualifiedName(String name)</p>"},{"location":"markista/javadoc/model/TypeNode/#getqualifiedname","title":"getQualifiedName","text":"<p>String getQualifiedName()</p>"},{"location":"markista/javadoc/model/TypeNode/#getpackagename","title":"getPackageName","text":"<p>String getPackageName()</p>"},{"location":"markista/javadoc/model/TypeNode/#getpackage","title":"getPackage","text":"<p>PackageNode getPackage()</p>"},{"location":"markista/javadoc/model/TypeNode/#setkind","title":"setKind","text":"<p>void setKind(TypeNode.Kind kind)</p>"},{"location":"markista/javadoc/model/TypeNode/#getkind","title":"getKind","text":"<p>TypeNode.Kind getKind()</p>"},{"location":"markista/javadoc/model/TypeNode/#addmethod","title":"addMethod","text":"<p>void addMethod(MethodNode method)</p>"},{"location":"markista/javadoc/model/TypeNode/#getmethods","title":"getMethods","text":"<p>List&lt;MethodNode&gt; getMethods()</p>"},{"location":"markista/javadoc/model/TypeNode/#addconstructor","title":"addConstructor","text":"<p>void addConstructor(MethodNode constructor)</p>"},{"location":"markista/javadoc/model/TypeNode/#getconstructors","title":"getConstructors","text":"<p>List&lt;MethodNode&gt; getConstructors()</p>"},{"location":"markista/javadoc/model/TypeNode/#addfield","title":"addField","text":"<p>void addField(FieldNode field)</p>"},{"location":"markista/javadoc/model/TypeNode/#getfields","title":"getFields","text":"<p>List&lt;FieldNode&gt; getFields()</p>"},{"location":"markista/javadoc/model/TypeNode/#getfield","title":"getField","text":"<p>FieldNode getField(String fieldName)</p>"},{"location":"markista/javadoc/model/TypeNode/#getmethod","title":"getMethod","text":"<p>MethodNode getMethod(MethodNode method)</p>"},{"location":"markista/javadoc/model/TypeNode/#getconstructor","title":"getConstructor","text":"<p>MethodNode getConstructor(MethodNode method)</p>"},{"location":"markista/javadoc/model/TypeNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Specified By:</p> <p>PackageMember</p>"},{"location":"markista/javadoc/model/TypeNode/#getdescription","title":"getDescription","text":"<p>Text getDescription()</p> <p>Specified By:</p> <p>PackageMember</p>"},{"location":"markista/javadoc/model/TypeOwner/","title":"TypeOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeOwner/#interface-typeowner","title":"Interface TypeOwner","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeOwner </p>"},{"location":"markista/javadoc/model/TypeOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract void addType(TypeNode typeNode) abstract List&lt;TypeNode&gt; getTypes() abstract List&lt;PackageMember&gt; getClasses() abstract List&lt;PackageMember&gt; getInterfaces() abstract List&lt;PackageMember&gt; getEnums() abstract List&lt;PackageMember&gt; getAnnotations() abstract String getName()"},{"location":"markista/javadoc/model/TypeOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeOwner/#addtype","title":"addType","text":"<p>abstract void addType(TypeNode typeNode)</p>"},{"location":"markista/javadoc/model/TypeOwner/#gettypes","title":"getTypes","text":"<p>abstract List&lt;TypeNode&gt; getTypes()</p>"},{"location":"markista/javadoc/model/TypeOwner/#getclasses","title":"getClasses","text":"<p>abstract List&lt;PackageMember&gt; getClasses()</p>"},{"location":"markista/javadoc/model/TypeOwner/#getinterfaces","title":"getInterfaces","text":"<p>abstract List&lt;PackageMember&gt; getInterfaces()</p>"},{"location":"markista/javadoc/model/TypeOwner/#getenums","title":"getEnums","text":"<p>abstract List&lt;PackageMember&gt; getEnums()</p>"},{"location":"markista/javadoc/model/TypeOwner/#getannotations","title":"getAnnotations","text":"<p>abstract List&lt;PackageMember&gt; getAnnotations()</p>"},{"location":"markista/javadoc/model/TypeOwner/#getname","title":"getName","text":"<p>abstract String getName()</p>"},{"location":"markista/javadoc/util/","title":"Package io.github.sandydunlop.markista.util","text":"<p>This package contains utility methods used by other packages.</p> Classes Class Description LinkResolver This class woks calculates the paths for Markdown documents  to link between different packages and to URLs of external packages and their contents. TypeUtils Markdown ModuleDirectives A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive objects scanned by the ApiScanner. FileUtils Utils A set of utility methods for changing between qualified and unqualified names. Configuration"},{"location":"markista/javadoc/util/Configuration/","title":"Configuration","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Configuration/#class-configuration","title":"Class Configuration","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Configuration </p>"},{"location":"markista/javadoc/util/Configuration/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Reporter reporter private static String outputDirectory private static boolean documentPrivateMembers private static boolean createExternalLinks private static boolean flattenDirectories private static boolean verbose"},{"location":"markista/javadoc/util/Configuration/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Configuration()"},{"location":"markista/javadoc/util/Configuration/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void setReporter(Reporter r) static Reporter getReporter() static void setOutputDirectory(String path) static String getOutputDirectory() static void setDocumentPrivateMembers(boolean b) static boolean getDocumentPrivateMembers() static void setCreateExternalLinks(boolean b) static boolean getCreateExternalLinks() static void setFlattenDirectories(boolean b) static boolean getFlattenDirectories() static void setVerbose(boolean b) static boolean getVerbose()"},{"location":"markista/javadoc/util/Configuration/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/Configuration/#reporter","title":"reporter","text":""},{"location":"markista/javadoc/util/Configuration/#outputdirectory","title":"outputDirectory","text":""},{"location":"markista/javadoc/util/Configuration/#documentprivatemembers","title":"documentPrivateMembers","text":""},{"location":"markista/javadoc/util/Configuration/#createexternallinks","title":"createExternalLinks","text":""},{"location":"markista/javadoc/util/Configuration/#flattendirectories","title":"flattenDirectories","text":""},{"location":"markista/javadoc/util/Configuration/#verbose","title":"verbose","text":""},{"location":"markista/javadoc/util/Configuration/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Configuration/#setreporter","title":"setReporter","text":"<p>static void setReporter(Reporter r)</p>"},{"location":"markista/javadoc/util/Configuration/#getreporter","title":"getReporter","text":"<p>static Reporter getReporter()</p>"},{"location":"markista/javadoc/util/Configuration/#setoutputdirectory","title":"setOutputDirectory","text":"<p>static void setOutputDirectory(String path)</p>"},{"location":"markista/javadoc/util/Configuration/#getoutputdirectory","title":"getOutputDirectory","text":"<p>static String getOutputDirectory()</p>"},{"location":"markista/javadoc/util/Configuration/#setdocumentprivatemembers","title":"setDocumentPrivateMembers","text":"<p>static void setDocumentPrivateMembers(boolean b)</p>"},{"location":"markista/javadoc/util/Configuration/#getdocumentprivatemembers","title":"getDocumentPrivateMembers","text":"<p>static boolean getDocumentPrivateMembers()</p>"},{"location":"markista/javadoc/util/Configuration/#setcreateexternallinks","title":"setCreateExternalLinks","text":"<p>static void setCreateExternalLinks(boolean b)</p>"},{"location":"markista/javadoc/util/Configuration/#getcreateexternallinks","title":"getCreateExternalLinks","text":"<p>static boolean getCreateExternalLinks()</p>"},{"location":"markista/javadoc/util/Configuration/#setflattendirectories","title":"setFlattenDirectories","text":"<p>static void setFlattenDirectories(boolean b)</p>"},{"location":"markista/javadoc/util/Configuration/#getflattendirectories","title":"getFlattenDirectories","text":"<p>static boolean getFlattenDirectories()</p>"},{"location":"markista/javadoc/util/Configuration/#setverbose","title":"setVerbose","text":"<p>static void setVerbose(boolean b)</p>"},{"location":"markista/javadoc/util/Configuration/#getverbose","title":"getVerbose","text":"<p>static boolean getVerbose()</p>"},{"location":"markista/javadoc/util/FileUtils/","title":"FileUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/FileUtils/#class-fileutils","title":"Class FileUtils","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.FileUtils </p>"},{"location":"markista/javadoc/util/FileUtils/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String outputDirectory private String flattenedDirectories"},{"location":"markista/javadoc/util/FileUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FileUtils(ModuleNode moduleNode, String outputDir) This constructor initializes <code>FileUtils</code> for use with the specified module."},{"location":"markista/javadoc/util/FileUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getFlattenedDirectories() void setFlattenedDirectories(ModuleNode moduleNode) String commonBase(List&lt;String&gt; packageNames) static int countDots(String str) Utility method that counts the amounts of dots in a <code>String</code>. File buildContainingDirPath(String outputDirectory, String packageName) Creates a filesystem path based on the specified output directory and the fully qualified name of a package. static char pathSeparator() Returns the character used to separate parts of a filesystem path. Writer createFile(String className, String packageName) Writer createModuleFile(String moduleName, String fileName) static String joinPaths(String base, String part)"},{"location":"markista/javadoc/util/FileUtils/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/FileUtils/#outputdirectory","title":"outputDirectory","text":""},{"location":"markista/javadoc/util/FileUtils/#flatteneddirectories","title":"flattenedDirectories","text":""},{"location":"markista/javadoc/util/FileUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/FileUtils/#getflatteneddirectories","title":"getFlattenedDirectories","text":"<p>String getFlattenedDirectories()</p>"},{"location":"markista/javadoc/util/FileUtils/#setflatteneddirectories","title":"setFlattenedDirectories","text":"<p>void setFlattenedDirectories(ModuleNode moduleNode)</p>"},{"location":"markista/javadoc/util/FileUtils/#commonbase","title":"commonBase","text":"<p>String commonBase(List&lt;String&gt; packageNames)</p>"},{"location":"markista/javadoc/util/FileUtils/#countdots","title":"countDots","text":"<p>static int countDots(String str)</p> <p>Utility method that counts the amounts of dots in a <code>String</code>.</p>"},{"location":"markista/javadoc/util/FileUtils/#buildcontainingdirpath","title":"buildContainingDirPath","text":"<p>File buildContainingDirPath(String outputDirectory, String packageName)</p> <p>Creates a filesystem path based on the specified output directory and the fully qualified name of a package. Each section of the package name becomes a directory unless FileUtils.setFlattenedDirectories has been called, in which case only the directories which will contain documentation for types will be created.</p> <p>Parameters:</p> <p><code>outputDirectory</code> - output path specified by the <code>-d</code> command line parameter</p> <p><code>packageName</code> - the name of the package being documented</p>"},{"location":"markista/javadoc/util/FileUtils/#pathseparator","title":"pathSeparator","text":"<p>static char pathSeparator()</p> <p>Returns the character used to separate parts of a filesystem path. This method is necessary because Java's built-in <code>File.pathSeparatorChar</code> has a bug where it returns the wrong character on macOS.</p>"},{"location":"markista/javadoc/util/FileUtils/#createfile","title":"createFile","text":"<p>Writer createFile(String className, String packageName)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/util/FileUtils/#createmodulefile","title":"createModuleFile","text":"<p>Writer createModuleFile(String moduleName, String fileName)</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/util/FileUtils/#joinpaths","title":"joinPaths","text":"<p>static String joinPaths(String base, String part)</p>"},{"location":"markista/javadoc/util/LinkResolver/","title":"LinkResolver","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/LinkResolver/#class-linkresolver","title":"Class LinkResolver","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkResolver </p> <p>This class woks calculates the paths for Markdown documents  to link between different packages and to URLs of external packages and their contents.</p>"},{"location":"markista/javadoc/util/LinkResolver/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String DOT_HTML private static final String JAVA_24_URL private static final List&lt;String&gt; primitives private static String currentModuleName private static final ModuleLayer moduleLayer private static String currentPackageName private static HashMap&lt;String, String&gt; nativeModuleNames private static HashMap&lt;String, String&gt; nativePackageNames private static HashMap&lt;String, String&gt; suffix private static Api api private static String flattenedDirectories"},{"location":"markista/javadoc/util/LinkResolver/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkResolver()"},{"location":"markista/javadoc/util/LinkResolver/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void init(Api a) static void setFlattenedDirectories(String sd) static void setCurrentPackageName(String name) static void setCurrentModuleName(String name) static void addNativeModuleUrl(String moduleName, String baseUrl, String s) private static String getPackageName(String id) private static String getClassName(String id) static Reference resolve(String to) static Reference resolve(String from, String to) private static Reference resolveUnsupported(String target) Checks if the target is unsupported by the <code>LinkResolver</code>. private static Reference resolvePrimitiveOrVoid(String target) Checks if the target is a primitive type or is void or the Void type. static String qualifyType(String name) Gets the canonical package name and class name of a class that is part of the API being documented. static Reference resolveNativePackageOrType(String toPackageName, String toClassName) Checks if the target is native package. static Reference resolveLocalPackageOrType(String from, String toPackageName, String toClassName) private static void addClassToReference(String className, Reference link) static Reference resolveModule(String from, String target) Gets a <code>Reference</code> for a package with <code>name</code> being the canonical name of the module. static ModuleNode getModule(String moduleName) Gets a module node by its name static boolean isPackageQualified(String name) Checks if a package name is qualified (canonical) or unqualified. static String qualifyClass(String simpleName) Gets the canonical name of a class defined in the API being documented. static String qualifyPackage(String simpleName) Returns the canonical name of a package defined in the API being documented. static String relativize(String to) static String relativizeWithModules(String from, String to) static String relativize(String from, String to) private static String flattenDirectory(String path) private static int findCommonIndex(String[] fromParts, String[] toParts) private static void appendParentDirs(StringBuilder rel, int count) private static void appendTargetDirs(StringBuilder rel, String[] toParts, int start) private static void addNativeModule(String moduleName) static void addNativeModules()"},{"location":"markista/javadoc/util/LinkResolver/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#dot_html","title":"DOT_HTML","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/LinkResolver/#java_24_url","title":"JAVA_24_URL","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/LinkResolver/#primitives","title":"primitives","text":""},{"location":"markista/javadoc/util/LinkResolver/#currentmodulename","title":"currentModuleName","text":""},{"location":"markista/javadoc/util/LinkResolver/#modulelayer","title":"moduleLayer","text":""},{"location":"markista/javadoc/util/LinkResolver/#currentpackagename","title":"currentPackageName","text":""},{"location":"markista/javadoc/util/LinkResolver/#nativemodulenames","title":"nativeModuleNames","text":""},{"location":"markista/javadoc/util/LinkResolver/#nativepackagenames","title":"nativePackageNames","text":""},{"location":"markista/javadoc/util/LinkResolver/#suffix","title":"suffix","text":""},{"location":"markista/javadoc/util/LinkResolver/#api","title":"api","text":""},{"location":"markista/javadoc/util/LinkResolver/#flatteneddirectories","title":"flattenedDirectories","text":""},{"location":"markista/javadoc/util/LinkResolver/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#init","title":"init","text":"<p>static void init(Api a)</p>"},{"location":"markista/javadoc/util/LinkResolver/#setflatteneddirectories","title":"setFlattenedDirectories","text":"<p>static void setFlattenedDirectories(String sd)</p>"},{"location":"markista/javadoc/util/LinkResolver/#setcurrentpackagename","title":"setCurrentPackageName","text":"<p>static void setCurrentPackageName(String name)</p>"},{"location":"markista/javadoc/util/LinkResolver/#setcurrentmodulename","title":"setCurrentModuleName","text":"<p>static void setCurrentModuleName(String name)</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemoduleurl","title":"addNativeModuleUrl","text":"<p>static void addNativeModuleUrl(String moduleName, String baseUrl, String s)</p>"},{"location":"markista/javadoc/util/LinkResolver/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String id)</p>"},{"location":"markista/javadoc/util/LinkResolver/#getclassname","title":"getClassName","text":"<p>private static String getClassName(String id)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve","title":"resolve","text":"<p>static Reference resolve(String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve_1","title":"resolve","text":"<p>static Reference resolve(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolveunsupported","title":"resolveUnsupported","text":"<p>private static Reference resolveUnsupported(String target)</p> <p>Checks if the target is unsupported by the <code>LinkResolver</code>.</p> <p>Parameters:</p> <p><code>target</code> - The target to be resolved</p> <p>Returns:</p> <p>A <code>Reference</code> with <code>Reference.Kind.UNSUPPORTED</code> if the target         is unsupported, otherwise with <code>Reference.Kind.NONE</code>.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolveprimitiveorvoid","title":"resolvePrimitiveOrVoid","text":"<p>private static Reference resolvePrimitiveOrVoid(String target)</p> <p>Checks if the target is a primitive type or is void or the Void type.</p> <p>Parameters:</p> <p><code>target</code> - The target to be resolved</p> <p>Returns:</p> <p>A <code>Reference</code> with <code>Reference.Kind.UNSUPPORTED</code> if the target         is a primitive type or is void or the Void type, otherwise         <code>Reference.Kind.NONE</code>.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifytype","title":"qualifyType","text":"<p>static String qualifyType(String name)</p> <p>Gets the canonical package name and class name of a class that is part of the API being documented.</p> <p>Parameters:</p> <p><code>name</code> - The name of a class</p> <p>Returns:</p> <p>An array containing the canonical name of the          class's package, and the class name.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvenativepackageortype","title":"resolveNativePackageOrType","text":"<p>static Reference resolveNativePackageOrType(String toPackageName, String toClassName)</p> <p>Checks if the target is native package. If it is a native package, the <code>Reference</code> bring returned will have <code>Reference.Type.URL</code> and its <code>uri</code> will be the URL of the Oracle Javadoc for the package.</p> <p>Parameters:</p> <p><code>toPackageName</code> - The package name of the target to be resolved</p> <p><code>toClassName</code> - The class name of the target to be resolved</p> <p>Returns:</p> <p>A <code>Reference</code> with <code>Reference.Scope.NATIVE</code> if the target         is a native Java type, otherwise <code>Reference.Scope.NONE</code>.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvelocalpackageortype","title":"resolveLocalPackageOrType","text":"<p>static Reference resolveLocalPackageOrType(String from, String toPackageName, String toClassName)</p>"},{"location":"markista/javadoc/util/LinkResolver/#addclasstoreference","title":"addClassToReference","text":"<p>private static void addClassToReference(String className, Reference link)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvemodule","title":"resolveModule","text":"<p>static Reference resolveModule(String from, String target)</p> <p>Gets a <code>Reference</code> for a package with <code>name</code> being the canonical name of the module.</p> <p>For packages defined in the API being documented, this will have <code>scope</code> <code>Reference.Scope.LOCAL</code> and <code>kind</code> <code>Reference.Kind.MODULE</code>, with <code>uri</code> being the relative path between the from package and the target package.</p> <p>For native Java modules, this will have <code>scope</code> <code>Reference.Scope.NATIVE</code> and <code>kind</code> <code>Reference.Kind.URL</code>, with its <code>uri</code> being set to the URL  of the Oracle Javadoc for the package.</p> <p>Parameters:</p> <p><code>from</code> - The package that's currently being documented</p> <p><code>target</code> - The name of the module tha is being linked to</p> <p>Returns:</p> <p>A Reference object containing the link. If the link cannot         be resolved, a <code>Reference</code> with <code>kind</code> set to <code>Reference.Kind.NONE</code>         is returned.</p>"},{"location":"markista/javadoc/util/LinkResolver/#getmodule","title":"getModule","text":"<p>static ModuleNode getModule(String moduleName)</p> <p>Gets a module node by its name</p> <p>Parameters:</p> <p><code>moduleName</code> - The module's name (eg java.base)</p> <p>Returns:</p> <p>a <code>ModuleNode</code> for the requested module</p>"},{"location":"markista/javadoc/util/LinkResolver/#ispackagequalified","title":"isPackageQualified","text":"<p>static boolean isPackageQualified(String name)</p> <p>Checks if a package name is qualified (canonical) or unqualified.</p> <p>Parameters:</p> <p><code>name</code> - A package name</p> <p>Returns:</p> <p>True if the name is a qualified name, false otherwise.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifyclass","title":"qualifyClass","text":"<p>static String qualifyClass(String simpleName)</p> <p>Gets the canonical name of a class defined in the API being documented.</p> <p>Parameters:</p> <p><code>simpleName</code> - The unqualified name of the class.</p> <p>Returns:</p> <p>The canonical name of the class, or an empty string         if the class wasn't found in the API model.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifypackage","title":"qualifyPackage","text":"<p>static String qualifyPackage(String simpleName)</p> <p>Returns the canonical name of a package defined in the API being documented.</p> <p>Parameters:</p> <p><code>simpleName</code> - The unqualified name of the package.</p> <p>Returns:</p> <p>The canonical name of the package, or an empty string         if the package wasn't found in the API model.</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize","title":"relativize","text":"<p>static String relativize(String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativizewithmodules","title":"relativizeWithModules","text":"<p>static String relativizeWithModules(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize_1","title":"relativize","text":"<p>static String relativize(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#flattendirectory","title":"flattenDirectory","text":"<p>private static String flattenDirectory(String path)</p>"},{"location":"markista/javadoc/util/LinkResolver/#findcommonindex","title":"findCommonIndex","text":"<p>private static int findCommonIndex(String[] fromParts, String[] toParts)</p>"},{"location":"markista/javadoc/util/LinkResolver/#appendparentdirs","title":"appendParentDirs","text":"<p>private static void appendParentDirs(StringBuilder rel, int count)</p>"},{"location":"markista/javadoc/util/LinkResolver/#appendtargetdirs","title":"appendTargetDirs","text":"<p>private static void appendTargetDirs(StringBuilder rel, String[] toParts, int start)</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodule","title":"addNativeModule","text":"<p>private static void addNativeModule(String moduleName)</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodules","title":"addNativeModules","text":"<p>static void addNativeModules()</p>"},{"location":"markista/javadoc/util/Markdown/","title":"Markdown","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Markdown/#class-markdown","title":"Class Markdown","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Markdown </p>"},{"location":"markista/javadoc/util/Markdown/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Markdown()"},{"location":"markista/javadoc/util/Markdown/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String fullSignature(MethodNode method) static String formatParams(List&lt;ParamNode&gt; params) static String formatReference(Reference ref) static String formatText(Text text) static String formatMarkdown(String markdown) static String formatLink(Text.Segment segment) static String resolveLinks(String markdown) private static String processMarkdownLink(String markdown, int openBracket, int closeBracket, int openParenthesis, int closeParenthesis) static String mdAutoLink(String identifier) static String mdAutoLink(String identifier, boolean simplify) Create a markdown link, automatically deciding what kind of link to make static String mdRefLink(String pre, Reference link, String post) static String mdRefLink(Reference link) static String linkGenerics(String str) Changes qualified generic type names to unqualified generic type names and adds links to their API documentation. static String splitAndLink(String typesString) static String mdAnchor(String phrase) static String mdAnchorLink(String phrase) static String mdDocumentLink(String docName) static String mdDocumentLink(String phrase, String docName) static String mdFolderLink(String docName) static String mdFolderLink(String phrase, String docName) static String escape(String str)"},{"location":"markista/javadoc/util/Markdown/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Markdown/#fullsignature","title":"fullSignature","text":"<p>static String fullSignature(MethodNode method)</p>"},{"location":"markista/javadoc/util/Markdown/#formatparams","title":"formatParams","text":"<p>static String formatParams(List&lt;ParamNode&gt; params)</p>"},{"location":"markista/javadoc/util/Markdown/#formatreference","title":"formatReference","text":"<p>static String formatReference(Reference ref)</p>"},{"location":"markista/javadoc/util/Markdown/#formattext","title":"formatText","text":"<p>static String formatText(Text text)</p>"},{"location":"markista/javadoc/util/Markdown/#formatmarkdown","title":"formatMarkdown","text":"<p>static String formatMarkdown(String markdown)</p>"},{"location":"markista/javadoc/util/Markdown/#formatlink","title":"formatLink","text":"<p>static String formatLink(Text.Segment segment)</p>"},{"location":"markista/javadoc/util/Markdown/#resolvelinks","title":"resolveLinks","text":"<p>static String resolveLinks(String markdown)</p>"},{"location":"markista/javadoc/util/Markdown/#processmarkdownlink","title":"processMarkdownLink","text":"<p>private static String processMarkdownLink(String markdown, int openBracket, int closeBracket, int openParenthesis, int closeParenthesis)</p>"},{"location":"markista/javadoc/util/Markdown/#mdautolink","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier)</p>"},{"location":"markista/javadoc/util/Markdown/#mdautolink_1","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier, boolean simplify)</p> <p>Create a markdown link, automatically deciding what kind of link to make</p> <p>Parameters:</p> <p><code>identifier</code> - a package, type, or method identifier</p> <p><code>simplify</code> - if true, the fully simplified version of the identifier is shown</p> <p>Returns:</p> <p>markdown text for a link to a document for the specified identifier or an anchor link</p>"},{"location":"markista/javadoc/util/Markdown/#mdreflink","title":"mdRefLink","text":"<p>static String mdRefLink(String pre, Reference link, String post)</p>"},{"location":"markista/javadoc/util/Markdown/#mdreflink_1","title":"mdRefLink","text":"<p>static String mdRefLink(Reference link)</p>"},{"location":"markista/javadoc/util/Markdown/#linkgenerics","title":"linkGenerics","text":"<p>static String linkGenerics(String str)</p> <p>Changes qualified generic type names to unqualified generic type names and adds links to their API documentation.</p> <p>Parameters:</p> <p><code>str</code> - A string containing a qualified generic name.</p> <p>Returns:</p> <p>A string with the qualified names changed to unqualified names and links to types added</p>"},{"location":"markista/javadoc/util/Markdown/#splitandlink","title":"splitAndLink","text":"<p>static String splitAndLink(String typesString)</p>"},{"location":"markista/javadoc/util/Markdown/#mdanchor","title":"mdAnchor","text":"<p>static String mdAnchor(String phrase)</p>"},{"location":"markista/javadoc/util/Markdown/#mdanchorlink","title":"mdAnchorLink","text":"<p>static String mdAnchorLink(String phrase)</p>"},{"location":"markista/javadoc/util/Markdown/#mddocumentlink","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String docName)</p>"},{"location":"markista/javadoc/util/Markdown/#mddocumentlink_1","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String phrase, String docName)</p>"},{"location":"markista/javadoc/util/Markdown/#mdfolderlink","title":"mdFolderLink","text":"<p>static String mdFolderLink(String docName)</p>"},{"location":"markista/javadoc/util/Markdown/#mdfolderlink_1","title":"mdFolderLink","text":"<p>static String mdFolderLink(String phrase, String docName)</p>"},{"location":"markista/javadoc/util/Markdown/#escape","title":"escape","text":"<p>static String escape(String str)</p>"},{"location":"markista/javadoc/util/ModuleDirectives/","title":"ModuleDirectives","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#class-moduledirectives","title":"Class ModuleDirectives","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.ModuleDirectives </p> <p>A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive objects scanned by the ApiScanner.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static DocletEnvironment environment"},{"location":"markista/javadoc/util/ModuleDirectives/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleDirectives()"},{"location":"markista/javadoc/util/ModuleDirectives/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void setEnvironment(DocletEnvironment env) Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements. static DirectiveNode createFrom(ModuleElement.Directive directive) Creates a DirectiveNode to encapsulate the information provided by a module directive element. static DirectiveNode createRequiresDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a requires directive. static DirectiveNode createExportsDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an exports directive. static DirectiveNode createOpensDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an opens directive. static DirectiveNode createUsesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a uses directive. static DirectiveNode createProvidesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a provides directive."},{"location":"markista/javadoc/util/ModuleDirectives/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#environment","title":"environment","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#setenvironment","title":"setEnvironment","text":"<p>static void setEnvironment(DocletEnvironment env)</p> <p>Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements.</p> <p>Parameters:</p> <p><code>env</code> - The doclet environment</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createfrom","title":"createFrom","text":"<p>static DirectiveNode createFrom(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode to encapsulate the information provided by a module directive element.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned module directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createrequiresdirective","title":"createRequiresDirective","text":"<p>static DirectiveNode createRequiresDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a requires directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned RequiresDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createexportsdirective","title":"createExportsDirective","text":"<p>static DirectiveNode createExportsDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an exports directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned ExportsDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createopensdirective","title":"createOpensDirective","text":"<p>static DirectiveNode createOpensDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an opens directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned OpensDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createusesdirective","title":"createUsesDirective","text":"<p>static DirectiveNode createUsesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a uses directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned UsesDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createprovidesdirective","title":"createProvidesDirective","text":"<p>static DirectiveNode createProvidesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a provides directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned ProvidesDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/TypeUtils/","title":"TypeUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/TypeUtils/#class-typeutils","title":"Class TypeUtils","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.TypeUtils </p>"},{"location":"markista/javadoc/util/TypeUtils/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static DocletEnvironment environment private static Api api"},{"location":"markista/javadoc/util/TypeUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeUtils()"},{"location":"markista/javadoc/util/TypeUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void init(Api a, DocletEnvironment e) static TypeNode nodeFromElement(TypeElement element) static void setEnumConstants(EnumNode enumNode, TypeElement e) static MethodNode nodeFromElement(ExecutableElement element) static FieldNode nodeFromElement(VariableElement element) static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind) static Text createText(List&lt;? extends DocTree&gt; dtList) static Text.Segment createTextSegment(DocTree docTree) static String getDocTreeText(DocTree docTree, int start) static String getDocTreePart(DocTree docTree, int n) static void setDocumentation(Node node, Element e) static void setTypeOwnership(TypeNode typeNode, TypeElement element) static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement) static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement) static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement) static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement) static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method) Returns a method that is overridden by the specified method when the  overridden method belongs to a Java native type. static void addConstantFieldValuesReference(ModuleNode moduleNode) static boolean isInterface(TypeMirror typeMirror) static void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result) static void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result) static DeprecatedTree getDeprecation(DocCommentTree docComment) static ReturnTree getReturnTree(DocCommentTree dcTree) static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter) static List&lt;Reference&gt; getReferences(DocCommentTree dcTree) Returns a list of <code>Reference</code> objects. static Text getSince(DocCommentTree dcTree) static String getUrl(String html) static void setModifiers(Node node, Set&lt;Modifier&gt; modifiers) static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes) static void setDeprecationStatus(Node node, Element e, DocCommentTree dct) static boolean isIncludedInApi(Element e) static void setMethodParams(MethodNode methodDoc, ExecutableElement ee) static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations) static TypeNode getFieldType(String className, String fieldName) static TypeNode getParamType(ExecutableElement method, String fieldName) private static String getPackageName(String qualifiedTypeName) static PackageElement getEnclosingPackageElement(Element element) static TypeElement getEnclosingTypeElement(Element element) Returns the TypeElement of the class the specified element belongs to."},{"location":"markista/javadoc/util/TypeUtils/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/TypeUtils/#environment","title":"environment","text":""},{"location":"markista/javadoc/util/TypeUtils/#api","title":"api","text":""},{"location":"markista/javadoc/util/TypeUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/TypeUtils/#init","title":"init","text":"<p>static void init(Api a, DocletEnvironment e)</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement","title":"nodeFromElement","text":"<p>static TypeNode nodeFromElement(TypeElement element)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setenumconstants","title":"setEnumConstants","text":"<p>static void setEnumConstants(EnumNode enumNode, TypeElement e)</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement_1","title":"nodeFromElement","text":"<p>static MethodNode nodeFromElement(ExecutableElement element)</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement_2","title":"nodeFromElement","text":"<p>static FieldNode nodeFromElement(VariableElement element)</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtypenode","title":"createTypeNode","text":"<p>static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind)</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtext","title":"createText","text":"<p>static Text createText(List&lt;? extends DocTree&gt; dtList)</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtextsegment","title":"createTextSegment","text":"<p>static Text.Segment createTextSegment(DocTree docTree)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdoctreetext","title":"getDocTreeText","text":"<p>static String getDocTreeText(DocTree docTree, int start)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdoctreepart","title":"getDocTreePart","text":"<p>static String getDocTreePart(DocTree docTree, int n)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setdocumentation","title":"setDocumentation","text":"<p>static void setDocumentation(Node node, Element e)</p>"},{"location":"markista/javadoc/util/TypeUtils/#settypeownership","title":"setTypeOwnership","text":"<p>static void setTypeOwnership(TypeNode typeNode, TypeElement element)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmethodannotations","title":"setMethodAnnotations","text":"<p>static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setspecifiedby","title":"setSpecifiedBy","text":"<p>static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddenmethod_1","title":"getOverriddenMethod","text":"<p>static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddennativemethod","title":"getOverriddenNativeMethod","text":"<p>static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method)</p> <p>Returns a method that is overridden by the specified method when the  overridden method belongs to a Java native type.</p>"},{"location":"markista/javadoc/util/TypeUtils/#addconstantfieldvaluesreference","title":"addConstantFieldValuesReference","text":"<p>static void addConstantFieldValuesReference(ModuleNode moduleNode)</p>"},{"location":"markista/javadoc/util/TypeUtils/#isinterface","title":"isInterface","text":"<p>static boolean isInterface(TypeMirror typeMirror)</p>"},{"location":"markista/javadoc/util/TypeUtils/#findimplementedinterfaces","title":"findImplementedInterfaces","text":"<p>static void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result)</p>"},{"location":"markista/javadoc/util/TypeUtils/#collectallsupertypes","title":"collectAllSupertypes","text":"<p>static void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdeprecation","title":"getDeprecation","text":"<p>static DeprecatedTree getDeprecation(DocCommentTree docComment)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getreturntree","title":"getReturnTree","text":"<p>static ReturnTree getReturnTree(DocCommentTree dcTree)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getparamtree","title":"getParamTree","text":"<p>static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getreferences","title":"getReferences","text":"<p>static List&lt;Reference&gt; getReferences(DocCommentTree dcTree)</p> <p>Returns a list of <code>Reference</code> objects. Each one represents an occurrence of <code>@see</code> in a Javadoc comment.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getsince","title":"getSince","text":"<p>static Text getSince(DocCommentTree dcTree)</p>"},{"location":"markista/javadoc/util/TypeUtils/#geturl","title":"getUrl","text":"<p>static String getUrl(String html)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmodifiers","title":"setModifiers","text":"<p>static void setModifiers(Node node, Set&lt;Modifier&gt; modifiers)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setthrowntypes","title":"setThrownTypes","text":"<p>static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setdeprecationstatus","title":"setDeprecationStatus","text":"<p>static void setDeprecationStatus(Node node, Element e, DocCommentTree dct)</p>"},{"location":"markista/javadoc/util/TypeUtils/#isincludedinapi","title":"isIncludedInApi","text":"<p>static boolean isIncludedInApi(Element e)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmethodparams","title":"setMethodParams","text":"<p>static void setMethodParams(MethodNode methodDoc, ExecutableElement ee)</p>"},{"location":"markista/javadoc/util/TypeUtils/#setimplementations","title":"setImplementations","text":"<p>static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getfieldtype","title":"getFieldType","text":"<p>static TypeNode getFieldType(String className, String fieldName)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getparamtype","title":"getParamType","text":"<p>static TypeNode getParamType(ExecutableElement method, String fieldName)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String qualifiedTypeName)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getenclosingpackageelement","title":"getEnclosingPackageElement","text":"<p>static PackageElement getEnclosingPackageElement(Element element)</p>"},{"location":"markista/javadoc/util/TypeUtils/#getenclosingtypeelement","title":"getEnclosingTypeElement","text":"<p>static TypeElement getEnclosingTypeElement(Element element)</p> <p>Returns the TypeElement of the class the specified element belongs to.</p> <p>Parameters:</p> <p><code>element</code> - A program element such as a field or method</p> <p>Returns:</p> <p>the TypeElement of the class the specified element belongs to.</p>"},{"location":"markista/javadoc/util/Utils/","title":"Utils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Utils/#class-utils","title":"Class Utils","text":"<p>Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Utils </p> <p>A set of utility methods for changing between qualified and unqualified names.</p>"},{"location":"markista/javadoc/util/Utils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Utils()"},{"location":"markista/javadoc/util/Utils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String removeGenerics(String str) Removes the generic type and its surrounding &lt;&gt; from a string, if present static String removeParentheses(String expression) Removes parentheses and what they contain from an expression static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. private static String simplifyNamesLoop(String input) private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c) private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i) static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name. static boolean isNullOrEmpty(String str) Checks if a string is null or empty static String inOneLine(String str) Removes new line characters from a string, replacing them with spaces"},{"location":"markista/javadoc/util/Utils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Utils/#removegenerics","title":"removeGenerics","text":"<p>static String removeGenerics(String str)</p> <p>Removes the generic type and its surrounding &lt;&gt; from a string, if present</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>The string with the generic type and surrounding &lt;&gt; removed</p>"},{"location":"markista/javadoc/util/Utils/#removeparentheses","title":"removeParentheses","text":"<p>static String removeParentheses(String expression)</p> <p>Removes parentheses and what they contain from an expression</p> <p>Parameters:</p> <p><code>expression</code> - An expression such as <code>classname.method(parameter)</code>.</p> <p>Returns:</p> <p>The expression with the parentheses removed</p>"},{"location":"markista/javadoc/util/Utils/#simplifynames","title":"simplifyNames","text":"<p>static String simplifyNames(String str)</p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Parameters:</p> <p><code>str</code> - A string that may contain one or more qualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/util/Utils/#simplifynamesloop","title":"simplifyNamesLoop","text":"<p>private static String simplifyNamesLoop(String input)</p>"},{"location":"markista/javadoc/util/Utils/#shouldreplacequalifiedwithsimple","title":"shouldReplaceQualifiedWithSimple","text":"<p>private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c)</p>"},{"location":"markista/javadoc/util/Utils/#replacequalifiedwithsimple","title":"replaceQualifiedWithSimple","text":"<p>private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i)</p>"},{"location":"markista/javadoc/util/Utils/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p>static boolean isValidSimpleNameChar(char c)</p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/util/Utils/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p>static boolean isValidQualifiedNameChar(char c)</p> <p>Checks if the given character is valid in a qualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/util/Utils/#isnullorempty","title":"isNullOrEmpty","text":"<p>static boolean isNullOrEmpty(String str)</p> <p>Checks if a string is null or empty</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>True if the string either null or empty</p>"},{"location":"markista/javadoc/util/Utils/#inoneline","title":"inOneLine","text":"<p>static String inOneLine(String str)</p> <p>Removes new line characters from a string, replacing them with spaces</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>The string, with newlines converted to spaces</p>"},{"location":"newsfeed/","title":"Newsfeed - An RSS News Reader for Minecraft","text":""},{"location":"newsfeed/#features","title":"Features","text":"<p>This mod adds a news feed to the game that displays the latest news from a configurable source. The mod is designed to be lightweight and easy to use, with a simple interface that allows you to quickly view the latest news headlines. The default news source is set to the BBC World News RSS feed, but you can change it to any RSS feed you like. </p> <p>When a new article is published to the feed, a notification will appear in the game. You can view the article by pressing the Newsfeed key (default <code>N</code>). The article will be displayed in a GUI that shows the title, description, and a link to the full article. You can also view previous headlines in the GUI.</p> <p> news article being displayed</p> <p> news headline being displayed</p>"},{"location":"newsfeed/#download","title":"Download","text":"<p>Downloads are available for Minecraft versions 1.21.4 to 1.21.7.</p> <p>JAR files are available to download on Modrinth.</p> <p>Source code is available on Github.</p>"},{"location":"newsfeed/#configuration","title":"Configuration","text":"<p>Newsfeed is compatible with mod_menu and can be configured in-game. </p> <p> configuration screen</p> <p>Alternatively, the configuration file is located in the <code>config</code> folder of your Minecraft instance. The file is named <code>newsfeed.json</code>. You can edit this file to change the settings of the mod.</p>"},{"location":"newsfeed/#license","title":"License","text":"<p>This mod is licensed under the MIT License. You are free to use, modify, and distribute this mod as long as you include the original license in your distribution.</p>"}]}
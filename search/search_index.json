{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I'm Sandy</p> <p>I'm a Software Engineer based in sunny Scotland.</p> <p>Over the past 21 years, I've worked in various areas of software development, including UNIX systems development, data warehousing, data security and IoT.</p> <p>I've worked on and led projects across multipe sectors including immigration and law enforcement in countries like the United Kingdom, United States, and United Arab Emirates.</p>"},{"location":"markista/","title":"Markista","text":"<p>The Markdown Doclet</p>"},{"location":"markista/#introduction","title":"Introduction","text":"<p>Markist is a doclet that turns your Java documentation comments into Markdown, suitable for use with Github, MkDocs, etc. </p> <p>Marklist is under active development and has reached a point where it is becoming useful. There will be features that aren't completely implemented yet.</p> <p>As a demonstration, the Markdown Javadoc for Markista itself is available here. It was produced with the <code>--private</code> parameter which tells Markista to document private members of classes. By default only public and protected members are documented.</p>"},{"location":"markista/#gradle","title":"Gradle","text":"<p>Markista can be used from a Gradle build by adding the following code to your Gradle build file. Change <code>libs/markista-0.1.0.jar</code> to match wherever you've put the Markista JAR file.</p> <pre><code>javadoc {\n    options {\n        source = sourceSets.main.allJava\n        destinationDir = file(\"$buildDir/docs/javadoc\")\n        options.doclet = 'io.github.sandydunlop.markista.doclet.MarkdownDoclet'\n        options.docletpath = files('libs/markista-0.1.0.jar')\n        options.encoding = 'UTF-8'\n        options.source = null\n    }\n}\n</code></pre>"},{"location":"markista/#command-line","title":"Command Line","text":"<p>Markista can be used from the command line with the <code>javadoc</code> command as follows:</p> <pre><code>javadoc -docletpath libs/markista-0.1.0.jar -doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet src/main/java/my.package/Hello.java\n</code></pre>"},{"location":"markista/#parameters","title":"Parameters","text":"<code>-d &lt;directory&gt;</code> The directory to write the Markdown files to. <code>--private</code> Generate docs for private members. By default only public  and abstract members are documented. <code>--external-links</code> Create links to classes defined outside of the API being     documented (eg. java.utils.String) <p>Note</p> <p>Currently only packages within the java.base module are considered when linking to classes defined in external packages. It is planned that all built in Java packages will be supported, as well as links to other projects' documentation.</p>"},{"location":"markista/#download","title":"Download","text":"<p>JAR files for version 0.1.0 are available to download here.</p>"},{"location":"markista/#source-code","title":"Source Code","text":"<p>Markista's souce code is available on Github under the GPLv3 license.</p>"},{"location":"markista/javadoc/","title":"Package io.github.sandydunlop.markista","text":"<p>This package provides a doclet that outputs Markdown instead of HTML.</p>"},{"location":"markista/javadoc/doclet/","title":"Package io.github.sandydunlop.markista.doclet","text":"Classes Class Description MarkdownTable A utility class for creating tables in Markdown documents. MarkdownDoclet A doclet that renders javadoc comments as Markdown MarkdownWriter A class that outputs API documentation as Markdown. ApiCollector A class that scans code and generates an API tree representing code and Javadoc comments."},{"location":"markista/javadoc/doclet/ApiCollector/","title":"ApiCollector","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#class-apicollector","title":"Class ApiCollector","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.AbstractElementVisitor6&lt;Void,Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner6&lt;Void,Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner7&lt;Void,Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner8&lt;Void,Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner9&lt;Void,Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.ApiCollector </p>"},{"location":"markista/javadoc/doclet/ApiCollector/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Types typeUtils private static DocTrees treeUtils private PackageNode packageDoc private Set&lt;Element&gt; encounteredSupertypes private static Elements elementUtils private boolean documentPrivateMembers private Api api"},{"location":"markista/javadoc/doclet/ApiCollector/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ApiCollector(DocletEnvironment environment)"},{"location":"markista/javadoc/doclet/ApiCollector/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Void visitVariable(VariableElement ve, Integer depth) Void visitType(TypeElement e, Integer depth) Void visitPackage(PackageElement ee, Integer depth) Void visitExecutable(ExecutableElement ee, Integer depth) private void setMethodParams(MethodNode methodDoc, ExecutableElement ee) void setDocumentPrivateMembers(boolean documentPrivateMembers) Void scan(Element e, Integer depth) boolean isInterface(TypeMirror typeMirror) private boolean isIncludedInApi(Element e) private TypeNode insantiateSubtype(ElementKind kind, String qualifiedName, String simpleName, String packageName) private static String getSimpleName(String qualifiedTypeName) private String getReturnComment(DocCommentTree docComment) private static String getParamType(Elements elementUtils, String className, ExecutableElement method, String fieldName) private String getParamComment(DocCommentTree dcTree, VariableElement parameter) private static String getPackageName(String qualifiedTypeName) private static String getFieldType(Elements elementUtils, String className, String fieldName) static TypeElement getEnclosingTypeElement(Element element) Returns the TypeElement of the class the specified element belongs to. static PackageElement getEnclosingPackageElement(Element element) private Deprecation getDeprecationStatus(Element e) private void findImplementedInterfaces(TypeElement typeElement, List result) private void collectAllSupertypes(TypeMirror t, List result) Api collect(Set elements)"},{"location":"markista/javadoc/doclet/ApiCollector/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#visitvariable","title":"visitVariable","text":"<p><code>Void visitVariable(VariableElement ve, Integer depth)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visittype","title":"visitType","text":"<p><code>Void visitType(TypeElement e, Integer depth)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visitpackage","title":"visitPackage","text":"<p><code>Void visitPackage(PackageElement ee, Integer depth)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visitexecutable","title":"visitExecutable","text":"<p><code>Void visitExecutable(ExecutableElement ee, Integer depth)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#setmethodparams","title":"setMethodParams","text":"<p><code>private void setMethodParams(MethodNode methodDoc, ExecutableElement ee)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#setdocumentprivatemembers","title":"setDocumentPrivateMembers","text":"<p><code>void setDocumentPrivateMembers(boolean documentPrivateMembers)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#scan","title":"scan","text":"<p><code>Void scan(Element e, Integer depth)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#isinterface","title":"isInterface","text":"<p><code>boolean isInterface(TypeMirror typeMirror)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#isincludedinapi","title":"isIncludedInApi","text":"<p><code>private boolean isIncludedInApi(Element e)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#insantiatesubtype","title":"insantiateSubtype","text":"<p><code>private TypeNode insantiateSubtype(ElementKind kind, String qualifiedName, String simpleName, String packageName)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getsimplename","title":"getSimpleName","text":"<p><code>private static String getSimpleName(String qualifiedTypeName)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getreturncomment","title":"getReturnComment","text":"<p><code>private String getReturnComment(DocCommentTree docComment)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getparamtype","title":"getParamType","text":"<p><code>private static String getParamType(Elements elementUtils, String className, ExecutableElement method, String fieldName)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getparamcomment","title":"getParamComment","text":"<p><code>private String getParamComment(DocCommentTree dcTree, VariableElement parameter)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getpackagename","title":"getPackageName","text":"<p><code>private static String getPackageName(String qualifiedTypeName)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getfieldtype","title":"getFieldType","text":"<p><code>private static String getFieldType(Elements elementUtils, String className, String fieldName)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getenclosingtypeelement","title":"getEnclosingTypeElement","text":"<p><code>static TypeElement getEnclosingTypeElement(Element element)</code></p> <p>Returns:</p> <p>[the TypeElement of the class the specified element belongs to.]</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getenclosingpackageelement","title":"getEnclosingPackageElement","text":"<p><code>static PackageElement getEnclosingPackageElement(Element element)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getdeprecationstatus","title":"getDeprecationStatus","text":"<p><code>private Deprecation getDeprecationStatus(Element e)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#findimplementedinterfaces","title":"findImplementedInterfaces","text":"<p><code>private void findImplementedInterfaces(TypeElement typeElement, List result)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#collectallsupertypes","title":"collectAllSupertypes","text":"<p><code>private void collectAllSupertypes(TypeMirror t, List result)</code></p>"},{"location":"markista/javadoc/doclet/ApiCollector/#collect","title":"collect","text":"<p><code>Api collect(Set elements)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/","title":"MarkdownDoclet.Option","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#class-markdowndocletoption","title":"Class MarkdownDoclet.Option","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet.Option  All Implemented Interfaces: \u00a0\u00a0\u00a0\u00a0Doclet.Option</p> <p>Enclosing Class: MarkdownDoclet</p> <p>Subtypes for specific options should implement the ,{@linkplain #process(String,List) process}, method to handle instances of the option found on the command line.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String parameters private final String name private final boolean hasArg private final String description"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet.Option(String name, boolean hasArg, String description, String parameters)"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getParameters() List&lt;String&gt; getNames() Doclet.Option.Kind getKind() String getDescription() int getArgumentCount()"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getparameters","title":"getParameters","text":"<p><code>String getParameters()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getnames","title":"getNames","text":"<p><code>List&lt;String&gt; getNames()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getkind","title":"getKind","text":"<p><code>Doclet.Option.Kind getKind()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getdescription","title":"getDescription","text":"<p><code>String getDescription()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getargumentcount","title":"getArgumentCount","text":"<p><code>int getArgumentCount()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/","title":"MarkdownDoclet","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#class-markdowndoclet","title":"Class MarkdownDoclet","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet  All Implemented Interfaces: \u00a0\u00a0\u00a0\u00a0Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description abstract MarkdownDoclet.Option A base class for declaring options."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String outputDirectory private final Set&lt;MarkdownDoclet.Option&gt; options private boolean documentPrivateMembers private boolean createExternalLinks private static final boolean OK private static final boolean FAILED"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet() The default constructor, does nothing."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description boolean run(DocletEnvironment environment) [] static void main(String[] args) void init(Locale locale, Reporter reporter) Initializes the doclet. SourceVersion getSupportedSourceVersion() Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions() String getName()"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#run","title":"run","text":"<p><code>boolean run(DocletEnvironment environment)</code></p> <p>[]</p> <p>Returns:</p> <p>[true if completed without errors, false if errors occurred.]</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#main","title":"main","text":"<p><code>static void main(String[] args)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#init","title":"init","text":"<p><code>void init(Locale locale, Reporter reporter)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedsourceversion","title":"getSupportedSourceVersion","text":"<p><code>SourceVersion getSupportedSourceVersion()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedoptions","title":"getSupportedOptions","text":"<p><code>Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getname","title":"getName","text":"<p><code>String getName()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/","title":"MarkdownTable.Column","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#class-markdowntablecolumn","title":"Class MarkdownTable.Column","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable.Column  Enclosing Class: MarkdownTable</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description int width String name"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable.Column(String name) Constructs a new <code>Column</code> object with the specified name."},{"location":"markista/javadoc/doclet/MarkdownTable/","title":"MarkdownTable","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#class-markdowntable","title":"Class MarkdownTable","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable </p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description MarkdownTable.Column"},{"location":"markista/javadoc/doclet/MarkdownTable/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;String[]&gt; rows List&lt;MarkdownTable.Column&gt; columns"},{"location":"markista/javadoc/doclet/MarkdownTable/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable()"},{"location":"markista/javadoc/doclet/MarkdownTable/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void render(Writer writer) Renders the table as Markdown text without any indentation void render(Writer writer, int indent) Renders the table as Markdown text with a given indentation level MarkdownTable addRow(String[] valueStrings) Adds a row of data to the table MarkdownTable addColumn(String heading) Adds a column with the specified heading to the table"},{"location":"markista/javadoc/doclet/MarkdownTable/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#render","title":"render","text":"<p><code>void render(Writer writer)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#render_1","title":"render","text":"<p><code>void render(Writer writer, int indent)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#addrow","title":"addRow","text":"<p><code>MarkdownTable addRow(String[] valueStrings)</code></p> <p>Returns:</p> <p>[The table]</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#addcolumn","title":"addColumn","text":"<p><code>MarkdownTable addColumn(String heading)</code></p> <p>Returns:</p> <p>[The table]</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/","title":"MarkdownWriter","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#class-markdownwriter","title":"Class MarkdownWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownWriter </p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Writer writer private String outputDirectory private TypeNode linkFrom private Api api private static final String NBSP private static final String BR"},{"location":"markista/javadoc/doclet/MarkdownWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownWriter(String outputDirectory) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/doclet/MarkdownWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(Api api) Ouput the documentation files for the specified API private char pathSeparator() private void outputTypeDoc(TypeNode typeDoc, String subType) private void outputSupertypes(TypeNode typeDoc) private void outputPackageMembers(String title, List members) private void outputPackageDoc(PackageNode packageDoc) private void outputNestedClassSummary(List nestedClasses) private void outputMethodSummary(List methods) private void outputMethodDetails(List methods) private void outputImplementedInterfaces(TypeNode typeDoc) private void outputFieldSummary(List fields) private void outputEnclosingClass(TypeNode typeDoc) private void outputConstructorSummary(List methods) private String mdDocumentLink(String docName) private String mdDocumentLink(String phrase, String docName) private String mdAutoLink(String identifier) private String mdAutoLink(String identifier, boolean qualify) Create a markdown link, automatically deciding where it needs to link to private String mdAnchorLink(String phrase) private static String mdAnchor(String phrase) private boolean isNullOrEmpty(String s) private static String inOneLine(String text) private String escape(String str) private Writer createFile(String className, String packageName) private File buildContainingDirPath(String outputDirectory, String packageName) []"},{"location":"markista/javadoc/doclet/MarkdownWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#writedocs","title":"writeDocs","text":"<p><code>void writeDocs(Api api)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#pathseparator","title":"pathSeparator","text":"<p><code>private char pathSeparator()</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputtypedoc","title":"outputTypeDoc","text":"<p><code>private void outputTypeDoc(TypeNode typeDoc, String subType)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputsupertypes","title":"outputSupertypes","text":"<p><code>private void outputSupertypes(TypeNode typeDoc)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputpackagemembers","title":"outputPackageMembers","text":"<p><code>private void outputPackageMembers(String title, List members)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputpackagedoc","title":"outputPackageDoc","text":"<p><code>private void outputPackageDoc(PackageNode packageDoc)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputnestedclasssummary","title":"outputNestedClassSummary","text":"<p><code>private void outputNestedClassSummary(List nestedClasses)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputmethodsummary","title":"outputMethodSummary","text":"<p><code>private void outputMethodSummary(List methods)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputmethoddetails","title":"outputMethodDetails","text":"<p><code>private void outputMethodDetails(List methods)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputimplementedinterfaces","title":"outputImplementedInterfaces","text":"<p><code>private void outputImplementedInterfaces(TypeNode typeDoc)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputfieldsummary","title":"outputFieldSummary","text":"<p><code>private void outputFieldSummary(List fields)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputenclosingclass","title":"outputEnclosingClass","text":"<p><code>private void outputEnclosingClass(TypeNode typeDoc)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputconstructorsummary","title":"outputConstructorSummary","text":"<p><code>private void outputConstructorSummary(List methods)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mddocumentlink","title":"mdDocumentLink","text":"<p><code>private String mdDocumentLink(String docName)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mddocumentlink_1","title":"mdDocumentLink","text":"<p><code>private String mdDocumentLink(String phrase, String docName)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mdautolink","title":"mdAutoLink","text":"<p><code>private String mdAutoLink(String identifier)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mdautolink_1","title":"mdAutoLink","text":"<p><code>private String mdAutoLink(String identifier, boolean qualify)</code></p> <p>Returns:</p> <p>[markdown text for a link to a document for the specified identifier or an anchor link]</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mdanchorlink","title":"mdAnchorLink","text":"<p><code>private String mdAnchorLink(String phrase)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#mdanchor","title":"mdAnchor","text":"<p><code>private static String mdAnchor(String phrase)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#isnullorempty","title":"isNullOrEmpty","text":"<p><code>private boolean isNullOrEmpty(String s)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#inoneline","title":"inOneLine","text":"<p><code>private static String inOneLine(String text)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#escape","title":"escape","text":"<p><code>private String escape(String str)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#createfile","title":"createFile","text":"<p><code>private Writer createFile(String className, String packageName)</code></p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#buildcontainingdirpath","title":"buildContainingDirPath","text":"<p><code>private File buildContainingDirPath(String outputDirectory, String packageName)</code></p> <p>[]</p>"},{"location":"markista/javadoc/model/","title":"Package io.github.sandydunlop.markista.model","text":"ClassesEnum Classes Class Description InterfaceNode ExceptionNode AnnotationNode EnumNode FieldNode A class to hold infomation about fields within a class, interface, or enum. PackageNode TypeNode ParamNode A class to hold infomation about method parameters. ClassNode Api Node MethodNode Class Description Deprecation"},{"location":"markista/javadoc/model/AnnotationNode/","title":"AnnotationNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AnnotationNode/#class-annotationnode","title":"Class AnnotationNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationNode </p>"},{"location":"markista/javadoc/model/AnnotationNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/Api/","title":"Api","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Api/#class-api","title":"Class Api","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Api </p>"},{"location":"markista/javadoc/model/Api/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;PackageNode&gt; packages private List&lt;InterfaceNode&gt; interfaces private List&lt;ExceptionNode&gt; exceptions private List&lt;EnumNode&gt; enums private List&lt;ClassNode&gt; classes private List&lt;AnnotationNode&gt; annotations"},{"location":"markista/javadoc/model/Api/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Api()"},{"location":"markista/javadoc/model/Api/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sort() TypeNode getTypeDoc(String qualifiedName, List docs) List&lt;PackageNode&gt; getPackages() PackageNode getPackageDoc(String qualifiedName) List&lt;InterfaceNode&gt; getInterfaces() List&lt;ExceptionNode&gt; getExceptions() List&lt;EnumNode&gt; getEnums() List&lt;ClassNode&gt; getClasses() ClassNode getClassDoc(TypeElement type) List&lt;AnnotationNode&gt; getAnnotations() void addPackage(PackageNode node) void addInterface(InterfaceNode node) void addException(ExceptionNode node) void addEnum(EnumNode node) void addClass(ClassNode node) void addAnnotation(AnnotationNode node)"},{"location":"markista/javadoc/model/Api/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Api/#sort","title":"sort","text":"<p><code>void sort()</code></p>"},{"location":"markista/javadoc/model/Api/#gettypedoc","title":"getTypeDoc","text":"<p><code>TypeNode getTypeDoc(String qualifiedName, List docs)</code></p>"},{"location":"markista/javadoc/model/Api/#getpackages","title":"getPackages","text":"<p><code>List&lt;PackageNode&gt; getPackages()</code></p>"},{"location":"markista/javadoc/model/Api/#getpackagedoc","title":"getPackageDoc","text":"<p><code>PackageNode getPackageDoc(String qualifiedName)</code></p>"},{"location":"markista/javadoc/model/Api/#getinterfaces","title":"getInterfaces","text":"<p><code>List&lt;InterfaceNode&gt; getInterfaces()</code></p>"},{"location":"markista/javadoc/model/Api/#getexceptions","title":"getExceptions","text":"<p><code>List&lt;ExceptionNode&gt; getExceptions()</code></p>"},{"location":"markista/javadoc/model/Api/#getenums","title":"getEnums","text":"<p><code>List&lt;EnumNode&gt; getEnums()</code></p>"},{"location":"markista/javadoc/model/Api/#getclasses","title":"getClasses","text":"<p><code>List&lt;ClassNode&gt; getClasses()</code></p>"},{"location":"markista/javadoc/model/Api/#getclassdoc","title":"getClassDoc","text":"<p><code>ClassNode getClassDoc(TypeElement type)</code></p>"},{"location":"markista/javadoc/model/Api/#getannotations","title":"getAnnotations","text":"<p><code>List&lt;AnnotationNode&gt; getAnnotations()</code></p>"},{"location":"markista/javadoc/model/Api/#addpackage","title":"addPackage","text":"<p><code>void addPackage(PackageNode node)</code></p>"},{"location":"markista/javadoc/model/Api/#addinterface","title":"addInterface","text":"<p><code>void addInterface(InterfaceNode node)</code></p>"},{"location":"markista/javadoc/model/Api/#addexception","title":"addException","text":"<p><code>void addException(ExceptionNode node)</code></p>"},{"location":"markista/javadoc/model/Api/#addenum","title":"addEnum","text":"<p><code>void addEnum(EnumNode node)</code></p>"},{"location":"markista/javadoc/model/Api/#addclass","title":"addClass","text":"<p><code>void addClass(ClassNode node)</code></p>"},{"location":"markista/javadoc/model/Api/#addannotation","title":"addAnnotation","text":"<p><code>void addAnnotation(AnnotationNode node)</code></p>"},{"location":"markista/javadoc/model/ClassNode/","title":"ClassNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ClassNode/#class-classnode","title":"Class ClassNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ClassNode </p>"},{"location":"markista/javadoc/model/ClassNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ClassNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/ClassNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description MethodNode getMethod(MethodNode method) FieldNode getField(String fieldName) MethodNode getConstructor(MethodNode method)"},{"location":"markista/javadoc/model/ClassNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ClassNode/#getmethod","title":"getMethod","text":"<p><code>MethodNode getMethod(MethodNode method)</code></p>"},{"location":"markista/javadoc/model/ClassNode/#getfield","title":"getField","text":"<p><code>FieldNode getField(String fieldName)</code></p>"},{"location":"markista/javadoc/model/ClassNode/#getconstructor","title":"getConstructor","text":"<p><code>MethodNode getConstructor(MethodNode method)</code></p>"},{"location":"markista/javadoc/model/Deprecation/","title":"Deprecation","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Deprecation/#enum-deprecation","title":"Enum Deprecation","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;Deprecation&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Deprecation </p>"},{"location":"markista/javadoc/model/EnumNode/","title":"EnumNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/EnumNode/#class-enumnode","title":"Class EnumNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.EnumNode </p>"},{"location":"markista/javadoc/model/EnumNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description EnumNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/ExceptionNode/","title":"ExceptionNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ExceptionNode/#class-exceptionnode","title":"Class ExceptionNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ExceptionNode </p>"},{"location":"markista/javadoc/model/ExceptionNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ExceptionNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/FieldNode/","title":"FieldNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/FieldNode/#class-fieldnode","title":"Class FieldNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.FieldNode </p>"},{"location":"markista/javadoc/model/FieldNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description Serializable constantValue"},{"location":"markista/javadoc/model/FieldNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FieldNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/InterfaceNode/","title":"InterfaceNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/InterfaceNode/#class-interfacenode","title":"Class InterfaceNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.InterfaceNode </p>"},{"location":"markista/javadoc/model/InterfaceNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description InterfaceNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/MethodNode/","title":"MethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/MethodNode/#class-methodnode","title":"Class MethodNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.MethodNode </p>"},{"location":"markista/javadoc/model/MethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;? extends TypeMirror&gt; thrownTypes TypeNode returnType String returnDescription List&lt;ParamNode&gt; params String fullDescription"},{"location":"markista/javadoc/model/MethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MethodNode(TypeNode returnType, String name)"},{"location":"markista/javadoc/model/MethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String signature() String paramsString() String fullSignature()"},{"location":"markista/javadoc/model/MethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/MethodNode/#signature","title":"signature","text":"<p><code>String signature()</code></p>"},{"location":"markista/javadoc/model/MethodNode/#paramsstring","title":"paramsString","text":"<p><code>String paramsString()</code></p>"},{"location":"markista/javadoc/model/MethodNode/#fullsignature","title":"fullSignature","text":"<p><code>String fullSignature()</code></p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/","title":"Node.ModifierSorter","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#class-nodemodifiersorter","title":"Class Node.ModifierSorter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node.ModifierSorter  Enclosing Class: Node</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final List&lt;Modifier&gt; ORDER"},{"location":"markista/javadoc/model/Node.ModifierSorter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node.ModifierSorter()"},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static List&lt;Modifier&gt; sortModifiers(Set modifierSet)"},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#sortmodifiers","title":"sortModifiers","text":"<p><code>static List&lt;Modifier&gt; sortModifiers(Set modifierSet)</code></p>"},{"location":"markista/javadoc/model/Node/","title":"Node","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node/#class-node","title":"Class Node","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node </p>"},{"location":"markista/javadoc/model/Node/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description Node.ModifierSorter"},{"location":"markista/javadoc/model/Node/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description String simpleName String qualifiedName String packageName Node owner Set&lt;Modifier&gt; modifiers String firstSentence String description Deprecation deprecation"},{"location":"markista/javadoc/model/Node/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node()"},{"location":"markista/javadoc/model/Node/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sortModifiers() String getModifiers()"},{"location":"markista/javadoc/model/Node/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node/#sortmodifiers","title":"sortModifiers","text":"<p><code>void sortModifiers()</code></p>"},{"location":"markista/javadoc/model/Node/#getmodifiers","title":"getModifiers","text":"<p><code>String getModifiers()</code></p>"},{"location":"markista/javadoc/model/PackageNode/","title":"PackageNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageNode/#class-packagenode","title":"Class PackageNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageNode </p>"},{"location":"markista/javadoc/model/PackageNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;InterfaceNode&gt; interfaces String fullDescription List&lt;ExceptionNode&gt; exceptionClasses List&lt;EnumNode&gt; enumClasses String description List&lt;ClassNode&gt; classes List&lt;AnnotationNode&gt; annotationClasses"},{"location":"markista/javadoc/model/PackageNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageNode(String packageName)"},{"location":"markista/javadoc/model/ParamNode/","title":"ParamNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ParamNode/#class-paramnode","title":"Class ParamNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ParamNode </p>"},{"location":"markista/javadoc/model/ParamNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description TypeNode type"},{"location":"markista/javadoc/model/ParamNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ParamNode() ParamNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/TypeNode/","title":"TypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode/#class-typenode","title":"Class TypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode </p>"},{"location":"markista/javadoc/model/TypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;String&gt; supertypes List&lt;MethodNode&gt; methods List&lt;InterfaceNode&gt; interfaces List&lt;String&gt; implementedInterfaces String fullDescription List&lt;FieldNode&gt; fields List&lt;ExceptionNode&gt; exceptionClasses List&lt;EnumNode&gt; enumClasses List&lt;MethodNode&gt; constructors List&lt;ClassNode&gt; classes List&lt;AnnotationNode&gt; annotationClasses"},{"location":"markista/javadoc/model/TypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/TypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sort()"},{"location":"markista/javadoc/model/TypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode/#sort","title":"sort","text":"<p><code>void sort()</code></p>"},{"location":"markista/javadoc/util/","title":"Package io.github.sandydunlop.markista.util","text":"Classes Class Description LinkResolver This class woks calculates the paths for Markdown documents  to link between different packages and to URLs of external packages and their contents. NameUtils A set of utility methods for changing between qualified and unqualified names."},{"location":"markista/javadoc/util/LinkResolver/","title":"LinkResolver","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/LinkResolver/#class-linkresolver","title":"Class LinkResolver","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkResolver </p>"},{"location":"markista/javadoc/util/LinkResolver/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static HashMap&lt;String,String&gt; suffix private static HashMap&lt;String,String&gt; nativePackageNames private static final ModuleLayer moduleLayer private static HashSet&lt;String&gt; localPackageNames"},{"location":"markista/javadoc/util/LinkResolver/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkResolver()"},{"location":"markista/javadoc/util/LinkResolver/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String resolve(String from, String to) private static String getPackageName(String id) private static String getClassName(String id) static void addNativeModule(String moduleName, String baseUrl, String s) static void addLocalPackage(String identifier)"},{"location":"markista/javadoc/util/LinkResolver/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#resolve","title":"resolve","text":"<p><code>static String resolve(String from, String to)</code></p>"},{"location":"markista/javadoc/util/LinkResolver/#getpackagename","title":"getPackageName","text":"<p><code>private static String getPackageName(String id)</code></p>"},{"location":"markista/javadoc/util/LinkResolver/#getclassname","title":"getClassName","text":"<p><code>private static String getClassName(String id)</code></p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodule","title":"addNativeModule","text":"<p><code>static void addNativeModule(String moduleName, String baseUrl, String s)</code></p>"},{"location":"markista/javadoc/util/LinkResolver/#addlocalpackage","title":"addLocalPackage","text":"<p><code>static void addLocalPackage(String identifier)</code></p>"},{"location":"markista/javadoc/util/NameUtils/","title":"NameUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/NameUtils/#class-nameutils","title":"Class NameUtils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.NameUtils </p>"},{"location":"markista/javadoc/util/NameUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description NameUtils()"},{"location":"markista/javadoc/util/NameUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. static String simplifyGenerics(String str) Changes qualified generic names to unqualified generic names. static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name."},{"location":"markista/javadoc/util/NameUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/NameUtils/#simplifynames","title":"simplifyNames","text":"<p><code>static String simplifyNames(String str)</code></p> <p>Returns:</p> <p>[The input string, with all qualified names changed to unqualified names.]</p>"},{"location":"markista/javadoc/util/NameUtils/#simplifygenerics","title":"simplifyGenerics","text":"<p><code>static String simplifyGenerics(String str)</code></p> <p>Returns:</p> <p>[A string with the qualified names changed to unqualified names.]</p>"},{"location":"markista/javadoc/util/NameUtils/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p><code>static boolean isValidSimpleNameChar(char c)</code></p> <p>Returns:</p> <p>[Whether or not the character is valid in an unqualified name.]</p>"},{"location":"markista/javadoc/util/NameUtils/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p><code>static boolean isValidQualifiedNameChar(char c)</code></p> <p>Returns:</p> <p>[Whether or not the character is valid in a qualified name.]</p>"},{"location":"newsfeed/","title":"Newsfeed - An RSS News Reader for Minecraft","text":""},{"location":"newsfeed/#features","title":"Features","text":"<p>This mod adds a news feed to the game that displays the latest news from a configurable source. The mod is designed to be lightweight and easy to use, with a simple interface that allows you to quickly view the latest news headlines. The default news source is set to the BBC World News RSS feed, but you can change it to any RSS feed you like. </p> <p>When a new article is published to the feed, a notification will appear in the game. You can view the article by pressing the Newsfeed key (default <code>N</code>). The article will be displayed in a GUI that shows the title, description, and a link to the full article. You can also view previous headlines in the GUI.</p> <p> news article being displayed</p> <p> news headline being displayed</p>"},{"location":"newsfeed/#download","title":"Download","text":"<p>Downloads are available for Minecraft versions 1.21.4 to 1.21.7.</p> <p>JAR files are available to download on Modrinth.</p> <p>Source code is available on Github.</p>"},{"location":"newsfeed/#configuration","title":"Configuration","text":"<p>Newsfeed is compatible with mod_menu and can be configured in-game. </p> <p> configuration screen</p> <p>Alternatively, the configuration file is located in the <code>config</code> folder of your Minecraft instance. The file is named <code>newsfeed.json</code>. You can edit this file to change the settings of the mod.</p>"},{"location":"newsfeed/#license","title":"License","text":"<p>This mod is licensed under the MIT License. You are free to use, modify, and distribute this mod as long as you include the original license in your distribution.</p>"}]}
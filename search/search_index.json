{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I'm Sandy</p> <p>I'm a Software Engineer based in sunny Scotland.</p> <p>Over the past 21 years, I've worked in various areas of software development, including UNIX systems development, data warehousing, data security and IoT.</p> <p>I've worked on and led projects across multipe sectors including immigration and law enforcement in countries like the United Kingdom, United States, and United Arab Emirates.</p>"},{"location":"markista/","title":"Markista","text":"<p>Serving Markdown Flavored Documentation</p>"},{"location":"markista/#introduction","title":"Introduction","text":"<p>Markista is a doclet that turns your Java documentation comments into Markdown, suitable for use with Github, MkDocs, etc. </p> <p>Markista is a strong addition to the list of doclets for generating Markdown documentation from Java source code. Its focus on simplicity and readability makes it a great choice for developers looking to enhance their documentation process. If you're exploring options for Markdown generation, Markista is definitely worth considering alongside other tools like MDoclet, mddoclet, and Doxygen.</p>"},{"location":"markista/#benefits-of-using-markista","title":"Benefits of using Markista","text":"<ul> <li>Simplicity: Markista is straightforward to use, making it accessible for developers who may not have extensive experience with documentation tools.</li> <li>Readable Output: The generated Markdown is clean and easy to read, which is essential for effective documentation.</li> <li>Automation: By integrating with build tools, Markista allows for automatic documentation updates, ensuring that the documentation stays in sync with the codebase.</li> <li>Extensibility: Markista uses Java Service Provider Interfaces (SPI) to allow extensions to be written which can take advantage of Markista's easy to use API model.</li> </ul>"},{"location":"markista/#demonstration-and-sample-projects","title":"Demonstration and Sample Projects","text":"<p>As a demonstration, the Markdown Javadoc for Markista itself is available here. It was produced with the <code>-private</code> parameter which tells Markista to document private members of classes. By default only public and protected members are documented.</p> <p>Several sample projects have been created to show how to integrate Markista with your build.</p>"},{"location":"markista/#gradle","title":"Gradle","text":"<p>Markista can be used from a Gradle build by following these simple steps:</p>"},{"location":"markista/#step-1-define-a-configuration-for-the-doclet","title":"Step 1: Define a Configuration for the Doclet","text":"<p>Create a configuration in your build.gradle file to manage the Markista dependency.</p> <pre><code>configurations {\n    markista\n}\n</code></pre>"},{"location":"markista/#step-2-add-the-markista-dependency","title":"Step 2: Add the Markista Dependency","text":"<p>Add Markista as a dependency under the configuration you just created. Markista is available in the Maven Central repository.</p> <pre><code>dependencies {\n    markista(\"io.github.sandydunlop:markista:0.1.19\")\n}\n</code></pre>"},{"location":"markista/#step-3-configure-the-javadoc-task","title":"Step 3: Configure the Javadoc Task","text":"<p>In the Javadoc task, specify the doclet path and the doclet class. This tells Gradle where to find the doclet and which one to use.</p> <pre><code>javadoc {\n    options {\n        docletpath = configurations.markista.files.asType(List)\n        doclet = 'io.github.sandydunlop.markista.doclet.MarkdownDoclet'\n        source = null\n        addBooleanOption('-flatten-packages', true)\n        addBooleanOption('link', true)\n    }\n}\n</code></pre>"},{"location":"markista/#maven","title":"Maven","text":"<p>pom.xml:</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;io.github.sandydunlop&lt;/groupId&gt;\n    &lt;artifactId&gt;example.module.maven&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;24&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;24&lt;/maven.compiler.target&gt;\n        &lt;maven.compiler.release&gt;24&lt;/maven.compiler.release&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;maven-local&lt;/id&gt;\n            &lt;url&gt;file://${user.home}/.m2/repository&lt;/url&gt;\n        &lt;/repository&gt;\n        &lt;repository&gt;\n            &lt;id&gt;central&lt;/id&gt;\n            &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.github.sandydunlop&lt;/groupId&gt;\n            &lt;artifactId&gt;markista&lt;/artifactId&gt;\n            &lt;version&gt;0.1.19&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;${maven.compiler.source}&lt;/source&gt;\n                    &lt;target&gt;${maven.compiler.target}&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.3.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;${maven.compiler.source}&lt;/source&gt;\n                    &lt;windowTitle&gt;${project.name} API Documentation&lt;/windowTitle&gt;\n                    &lt;docTitle&gt;${project.name} API Documentation&lt;/docTitle&gt;\n                    &lt;additionalparam&gt;-doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet&lt;/additionalparam&gt;\n                    &lt;additionalparam&gt;-private&lt;/additionalparam&gt;\n                    &lt;additionalparam&gt;-link&lt;/additionalparam&gt;\n                    &lt;additionalparam&gt;-verbose&lt;/additionalparam&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"markista/#command-line","title":"Command Line","text":"<p>Markista can be used from the command line with the <code>javadoc</code> command as follows:</p> <pre><code>javadoc -docletpath libs/markista-0.1.19.jar -doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet src/main/java/my.package/Hello.java\n</code></pre>"},{"location":"markista/#parameters","title":"Parameters","text":"<code>-d &lt;directory&gt;</code> The directory where documentation will be written to. <code>-d &lt;title&gt;</code> The title of the API being documented. <code>--extensions</code> Colon-seaparated ordered list of extensions to run. If extensions are available through SPI and this option is not specified, they will all be run. <code>--flatten-modules</code> Don't create individual module directories This option should be used if you have multiple modules in individual subprojects and want to be able to link between them in the docs <code>--flatten-packages</code> Don't create package directories that contain no classes. <code>-link</code> Create links to classes defined outside of the API being     documented (eg. java.utils.String). <code>--link-modules</code> Create links to modules outside of the API that are on the module-path. <code>--module-path</code> Colon-separated list that specifies where to find application modules. <code>-private</code> Generate docs for private members. By default only public  and abstract members are documented. <code>-tabs</code> Display summary tables in content tabs. <code>-verbose</code> Display progress information."},{"location":"markista/#download","title":"Download","text":"<p>JAR files for version 0.1.19 are available to download here.</p>"},{"location":"markista/#source-code","title":"Source Code","text":"<p>Markista's source code is available on Github under the GPLv3 license.</p> <p></p>"},{"location":"markista/examples/","title":"Example Projects","text":""},{"location":"markista/examples/#projects-with-markdown-output","title":"Projects with Markdown Output","text":""},{"location":"markista/examples/#single-module-project","title":"Single Module Project","text":"<p>A single module Gradle project:  View on GitHub</p> <p>A single module Maven project:  View on GitHub</p>"},{"location":"markista/examples/#multi-module-project","title":"Multi-Module Project","text":"<p>A Gradle project set up to make it simple to add multiple modules:  View on GitHub</p>"},{"location":"markista/examples/#other-examples","title":"Other Examples","text":""},{"location":"markista/examples/#example-docservice-extension-to-markista","title":"Example DocService Extension to Markista","text":"<p>View on GitHub</p>"},{"location":"markista/structure/","title":"Documentation Structure","text":"<p>The file structure of the documentation produced changes, depending on options passed to Markista.</p>"},{"location":"markista/structure/#basic-java-project","title":"Basic Java Project","text":"<p>In this basic Java project there are no <code>package-info.java</code> or <code>module-info.java</code> files.</p> Source Code Module Structure <p>Running Markista with the default options, the following documentation file structure is created:</p> <p></p> <p>The documentation is created in a directory with the same name as the project directory as there is no module name to use for it. The top-level <code>index.md</code> file lists the packages that have been documented.</p>"},{"location":"markista/structure/#modular-java-project","title":"Modular Java Project","text":"<p>In this modular Java project, there are <code>package-info.java</code> and <code>module-info.java</code> files.</p> Source Code Module Structure <p>Running Markista with the default options, the following documentation file structure is created with the standard Javadoc layout:</p> <p></p> <p>The documentation is created in a directory with the same name as the package being documented. The top-level <code>index.md</code> file is the package documentation, which can contain the package's directives (<code>requires</code>, <code>exports</code>, etc) with links to contained packages and other modules (if relevant).</p> <p>To flatten the directory structure, run Markista with the <code>--flatten-packages</code> option.</p> <p>The following documentation file structure is created:</p> <p></p>"},{"location":"markista/docagrams/","title":"Docagrams","text":"<p>Docagrams is a DocService extension to the Markista doclet that produces Java module and directury structure diagrams in SVG format.</p>"},{"location":"markista/docagrams/#getting-started","title":"Getting Started","text":"<p>Docagram's source is available from its GitHub repository, and binaries are available on its releases page.</p> <p>When running Markista as your Javadoc doclet, ensure the Docagrams JAR file is in your module path. That's it - Markista will automatically load and run it. Diagrams will be written to a <code>diagrams</code> folder inside your project's documentation folder.</p>"},{"location":"markista/docagrams/#sample-output","title":"Sample Output","text":"<p>Docagrams produces three diagrams. Samples are shown below.</p>"},{"location":"markista/docagrams/#java-module-structure","title":"Java Module Structure","text":""},{"location":"markista/docagrams/#source-tree","title":"Source Tree","text":""},{"location":"markista/docagrams/#documentation-structure","title":"Documentation Structure","text":""},{"location":"markista/javadoc/markista/","title":"Module markista","text":"<p>Markista is a tool for generating Markdown documentation from Java source code. It is designed to work with Java 24 and later versions. The module-info.java file defines the module and its exports.</p> ExportsRequiresOpensUses Package Description io.github.sandydunlop.markista.core A package for classes that are used everywhere, by Markista and its extensions. io.github.sandydunlop.markista.doclet This package contains only the MarkdownDoclet class. io.github.sandydunlop.markista.model The types used to store structure and documentation information of the API. io.github.sandydunlop.markista.spi Service interface for extensions Module Description java.base jdk.compiler jdk.javadoc java.compiler Package Description io.github.sandydunlop.markista.core A package for classes that are used everywhere, by Markista and its extensions. io.github.sandydunlop.markista.doclet This package contains only the MarkdownDoclet class. io.github.sandydunlop.markista.markdown This package contains the classes responsible for writing the Markdown file. io.github.sandydunlop.markista.model The types used to store structure and documentation information of the API. io.github.sandydunlop.markista.spi Service interface for extensions io.github.sandydunlop.markista.util This package contains utility methods used by other packages. Interface Description io.github.sandydunlop.markista.spi.DocService This interface defines a service for processing a project's structure and documentation with the  Markista markdown doclet."},{"location":"markista/javadoc/markista/constant-values/","title":"Constant Field Values","text":"Modifier and Type Constant Field Value private static final  java.lang.String DEFAULT_OUTPUT_DIRECTORY build/md-docs public static final  boolean OK true private static final  boolean FAILED false private static final  java.lang.String UNUSED_OPTION_DESCRIPTION Unused option private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  long serialVersionUID 1 private static final  java.lang.String TEXT_CLASS Class private static final  java.lang.String TEXT_DESCRIPTION Description private static final  java.lang.String TEXT_MODIFIER_AND_TYPE Modifier and Type private static final  java.lang.String BR private static final  java.lang.String TEXT_CLASS Class private static final  java.lang.String TEXT_DESCRIPTION Description private static final  java.lang.String TITLE_CONSTANT_FIELD Constant Field private static final  java.lang.String TITLE_CONSTANT_FIELD_VALUES Constant Field Values private static final  java.lang.String TITLE_DESCRIPTION Description private static final  java.lang.String TITLE_EXPORTS Exports private static final  java.lang.String TITLE_IMPLEMENTATIONS Implementations private static final  java.lang.String TITLE_INTERFACE Interface private static final  java.lang.String TITLE_MODIFIER_AND_TYPE Modifier and Type private static final  java.lang.String TITLE_MODULE Module private static final  java.lang.String TITLE_OPENS Opens private static final  java.lang.String TITLE_PACKAGE Package private static final  java.lang.String TITLE_PACKAGES Packages private static final  java.lang.String TITLE_PROVIDES Provides private static final  java.lang.String TITLE_REQUIRES Requires private static final  java.lang.String TITLE_USES Uses private static final  java.lang.String TITLE_VALUE Value private static final  java.lang.String FORMAT_SIMPLE_LINK [%s](%s) private static final  java.lang.String DOT_CLASS .class private static final  java.lang.String DOT_HTML .html private static final  java.lang.String JAVA_24_URL https://docs.oracle.com/en/java/javase/24/docs/api/"},{"location":"markista/javadoc/markista/core/","title":"Package io.github.sandydunlop.markista.core","text":"<p>A package for classes that are used everywhere, by Markista and its extensions.</p> Classes Class Description Context Singleton class that maintains the current context during documentation generation. Configuration Utility class holding global configuration settings for the documentation generator."},{"location":"markista/javadoc/markista/core/Configuration/","title":"Configuration","text":"<p>Package io.github.sandydunlop.markista.core</p>"},{"location":"markista/javadoc/markista/core/Configuration/#class-configuration","title":"Class Configuration","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.core.Configuration </p> <p>public class Configuration</p> <p>Utility class holding global configuration settings for the documentation generator.</p> <p>This class provides static getter and setter methods for various options that control the behavior of the documentation output, such as output directory, verbosity, and which members to include.</p> <p>All configuration fields are static and global and the constructor is hidden to prevent instantiation.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static String docTitle The title of the API documentation being generated private static boolean createExternalLinks If true, links to types defined outside the API being documented will be generated private static boolean documentPrivateMembers If true, private members of packages and types will be included in the generated documentation private static boolean flattenPackages If true, empty package directories will not be created, leading to a flatter directory structure private static boolean flattenModules If true, module directories will not be created, leading to a flatter directory structure private static boolean useContentTabs If true, summary tables will be created inside Markdown content tabs. private static boolean verbose If true, logging will include status information. private static String modulePathList The list of module paths passed in from the Javadoc command line private static String linkExternal The list of modules that have local Javadoc that can be linked to private static String projectPath private static String extensionsOrder"},{"location":"markista/javadoc/markista/core/Configuration/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Configuration() The default constructor"},{"location":"markista/javadoc/markista/core/Configuration/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void setDocTitle(String title) Sets the title used in the generated documentation public static String getDocTitle() Returns the title used in the generated documentation public static void setCreateExternalLinks(boolean b) Sets whether to generate links to external documentation for referenced types and modules. public static boolean getCreateExternalLinks() Returns whether the documentation generator creates links to external documentation. public static void setDocumentPrivateMembers(boolean b) Sets whether private members (fields, methods) should be included in the generated documentation. public static boolean getDocumentPrivateMembers() Returns whether private members are included in the documentation. public static void setFlattenPackages(boolean b) Sets whether to flatten package directory structure when generating the documentation output. public static boolean getFlattenPackages() Returns whether the documentation output package directory structure is flattened. public static void setFlattenModules(boolean b) Sets whether to flatten module directory structure when generating the documentation output. public static boolean getFlattenModules() Returns whether the documentation output module directory structure is flattened. public static void setUseContentTabs(boolean b) Sets whether to use content tabs in the generated documentation. public static boolean getUseContentTabs() Returns whether content tabs are used in documentation. public static void setVerbose(boolean b) Sets whether verbose logging or output should be enabled during documentation generation. public static boolean getVerbose() Returns whether verbose output is enabled. public static void setLinkExternal(String moduleList) Sets the list of sibling modules that can be linked to public static String getLinkExternal() Gets the list of sibling modules that can be linked to public static void setModulePaths(String modulePaths) Sets the directory containing modules. public static String getModulePaths() Gets the list of modules public static void setProjectPath(String path) public static String getProjectPath() public static void setExtensionsOrder(String order) public static String getExtensionsOrder()"},{"location":"markista/javadoc/markista/core/Configuration/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/core/Configuration/#doctitle","title":"docTitle","text":"<p>The title of the API documentation being generated</p>"},{"location":"markista/javadoc/markista/core/Configuration/#createexternallinks","title":"createExternalLinks","text":"<p>If true, links to types defined outside the API being documented will be generated</p>"},{"location":"markista/javadoc/markista/core/Configuration/#documentprivatemembers","title":"documentPrivateMembers","text":"<p>If true, private members of packages and types will be included in the generated documentation</p>"},{"location":"markista/javadoc/markista/core/Configuration/#flattenpackages","title":"flattenPackages","text":"<p>If true, empty package directories will not be created, leading to a flatter directory structure</p>"},{"location":"markista/javadoc/markista/core/Configuration/#flattenmodules","title":"flattenModules","text":"<p>If true, module directories will not be created, leading to a flatter directory structure</p>"},{"location":"markista/javadoc/markista/core/Configuration/#usecontenttabs","title":"useContentTabs","text":"<p>If true, summary tables will be created inside Markdown content tabs. See mkdocs-material for more information.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#verbose","title":"verbose","text":"<p>If true, logging will include status information.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#modulepathlist","title":"modulePathList","text":"<p>The list of module paths passed in from the Javadoc command line</p>"},{"location":"markista/javadoc/markista/core/Configuration/#linkexternal","title":"linkExternal","text":"<p>The list of modules that have local Javadoc that can be linked to</p>"},{"location":"markista/javadoc/markista/core/Configuration/#projectpath","title":"projectPath","text":""},{"location":"markista/javadoc/markista/core/Configuration/#extensionsorder","title":"extensionsOrder","text":""},{"location":"markista/javadoc/markista/core/Configuration/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/core/Configuration/#setdoctitle","title":"setDocTitle","text":"<p>public static void setDocTitle(String title)</p> <p>Sets the title used in the generated documentation</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getdoctitle","title":"getDocTitle","text":"<p>public static String getDocTitle()</p> <p>Returns the title used in the generated documentation</p> <p>Returns:</p> <p>The title to be used</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setcreateexternallinks","title":"setCreateExternalLinks","text":"<p>public static void setCreateExternalLinks(boolean b)</p> <p>Sets whether to generate links to external documentation for referenced types and modules.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getcreateexternallinks","title":"getCreateExternalLinks","text":"<p>public static boolean getCreateExternalLinks()</p> <p>Returns whether the documentation generator creates links to external documentation.</p> <p>Returns:</p> <p>true if external links should be created, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setdocumentprivatemembers","title":"setDocumentPrivateMembers","text":"<p>public static void setDocumentPrivateMembers(boolean b)</p> <p>Sets whether private members (fields, methods) should be included in the generated documentation.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getdocumentprivatemembers","title":"getDocumentPrivateMembers","text":"<p>public static boolean getDocumentPrivateMembers()</p> <p>Returns whether private members are included in the documentation.</p> <p>Returns:</p> <p>true if private members are included, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setflattenpackages","title":"setFlattenPackages","text":"<p>public static void setFlattenPackages(boolean b)</p> <p>Sets whether to flatten package directory structure when generating the documentation output.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getflattenpackages","title":"getFlattenPackages","text":"<p>public static boolean getFlattenPackages()</p> <p>Returns whether the documentation output package directory structure is flattened.</p> <p>Returns:</p> <p>true if package directories are flattened, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setflattenmodules","title":"setFlattenModules","text":"<p>public static void setFlattenModules(boolean b)</p> <p>Sets whether to flatten module directory structure when generating the documentation output.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getflattenmodules","title":"getFlattenModules","text":"<p>public static boolean getFlattenModules()</p> <p>Returns whether the documentation output module directory structure is flattened.</p> <p>Returns:</p> <p>true if module directories are flattened, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setusecontenttabs","title":"setUseContentTabs","text":"<p>public static void setUseContentTabs(boolean b)</p> <p>Sets whether to use content tabs in the generated documentation.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getusecontenttabs","title":"getUseContentTabs","text":"<p>public static boolean getUseContentTabs()</p> <p>Returns whether content tabs are used in documentation.</p> <p>Returns:</p> <p>true if content tabs are enabled, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setverbose","title":"setVerbose","text":"<p>public static void setVerbose(boolean b)</p> <p>Sets whether verbose logging or output should be enabled during documentation generation.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getverbose","title":"getVerbose","text":"<p>public static boolean getVerbose()</p> <p>Returns whether verbose output is enabled.</p> <p>Returns:</p> <p>true if verbose output is enabled, false otherwise.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setlinkexternal","title":"setLinkExternal","text":"<p>public static void setLinkExternal(String moduleList)</p> <p>Sets the list of sibling modules that can be linked to</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getlinkexternal","title":"getLinkExternal","text":"<p>public static String getLinkExternal()</p> <p>Gets the list of sibling modules that can be linked to</p> <p>Returns:</p> <p>a list of sibling modules that can be linked to</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setmodulepaths","title":"setModulePaths","text":"<p>public static void setModulePaths(String modulePaths)</p> <p>Sets the directory containing modules.</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getmodulepaths","title":"getModulePaths","text":"<p>public static String getModulePaths()</p> <p>Gets the list of modules</p> <p>Returns:</p> <p>A list of the module paths</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setprojectpath","title":"setProjectPath","text":"<p>public static void setProjectPath(String path)</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getprojectpath","title":"getProjectPath","text":"<p>public static String getProjectPath()</p>"},{"location":"markista/javadoc/markista/core/Configuration/#setextensionsorder","title":"setExtensionsOrder","text":"<p>public static void setExtensionsOrder(String order)</p>"},{"location":"markista/javadoc/markista/core/Configuration/#getextensionsorder","title":"getExtensionsOrder","text":"<p>public static String getExtensionsOrder()</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/","title":"Context.NameSimplifier","text":"<p>Package io.github.sandydunlop.markista.core</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#class-contextnamesimplifier","title":"Class Context.NameSimplifier","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.core.Context.NameSimplifier  Enclosing Class: io.github.sandydunlop.markista.core.Context</p> <p>public class Context.NameSimplifier</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Context.NameSimplifier()"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. private static String simplifyNamesLoop(String input) private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c) private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i) public static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. public static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name."},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#simplifynames","title":"simplifyNames","text":"<p>public static String simplifyNames(String str)</p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#simplifynamesloop","title":"simplifyNamesLoop","text":"<p>private static String simplifyNamesLoop(String input)</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#shouldreplacequalifiedwithsimple","title":"shouldReplaceQualifiedWithSimple","text":"<p>private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c)</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#replacequalifiedwithsimple","title":"replaceQualifiedWithSimple","text":"<p>private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i)</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p>public static boolean isValidSimpleNameChar(char c)</p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/markista/core/Context.NameSimplifier/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p>public static boolean isValidQualifiedNameChar(char c)</p> <p>Checks if the given character is valid in a qualified name.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/markista/core/Context/","title":"Context","text":"<p>Package io.github.sandydunlop.markista.core</p>"},{"location":"markista/javadoc/markista/core/Context/#class-context","title":"Class Context","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.core.Context </p> <p>public class Context</p> <p>Singleton class that maintains the current context during documentation generation.</p> <p>This class tracks the current API model, output directory, current module, package, type, method, and field names, as well as the reporter used for reporting messages such as INFO, WARNING, and ERROR.</p> <p>It provides utilities to create directories and files for output, report errors or warnings with location information, and manage the structure of output paths in relation to package and module names.</p> <p>The Context instance should be obtained via getInstance(), and its fields configured as the documentation generation progresses. This class is not thread-safe.</p>"},{"location":"markista/javadoc/markista/core/Context/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public Context.NameSimplifier"},{"location":"markista/javadoc/markista/core/Context/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String DEFAULT_OUTPUT_DIRECTORY The default output directory private static Context instance The instance of this class that is returned to callers of getInstance() private Reporter reporter The Reporter used for logging messages private Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation. private String outputDirectory The directory the documentation is being generated in private String flattenedDirectories The base section of the directory structure that contains no  documentation and can be skipped when creating directories. private String moduleName The name of the module currently being documented private String packageName The name of the package currently being documented private String typeName The name of the type currently being documented private String methodName The name of the method currently being documented private String fieldName The name of the field currently being documented"},{"location":"markista/javadoc/markista/core/Context/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Context() The default constructor"},{"location":"markista/javadoc/markista/core/Context/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getFlattenedDirectories() public static Context getInstance() Returns the singleton instance of this Context. public void setApi(Api api) Sets the Api model associated with this context, also initializing the flattened directories string. public Api getApi() Returns the Api model associated with this context. public void setOutputDirectory(String outputDirectory) Sets the output directory path where documentation files will be written. public String getOutputDirectory() public void setReporter(Reporter reporter) Sets the reporter used for reporting messages and diagnostics during doc generation. public Reporter getReporter() Returns the currently set reporter instance. public void setModuleName(String name) Sets the current module name and resets the package name. public String getModuleName() Returns the current module name. public void setPackageName(String name) Sets the current package name and resets the type name. public String getPackageName() Returns the current package name. public void setTypeName(String name) Sets the current type name. public String getTypeName() Returns the current type name. public void setMethodName(String name) Sets the current method name. public String getMethodName() Returns the current method name. public void setFieldName(String name) Sets the current field name. public String getFieldName() Returns the current field name. public void reportInfo(String message) Reports an informational message through the reporter. public void reportWarning(String message) Reports a warning message including location information. public void reportError(String message) Reports an error message including location information. private String location() Returns a string describing the current location context in module, package, type, method, and field. public File getPackageDirectory() Constructs a File object representing the directory path corresponding to the current output directory, module, and fully qualified package name. public Writer createFileInPackage() Creates a Writer for writing a file corresponding to the current context (type name, package, module). File createPackageFilePath() public Writer createFileInModule(String fileName) Creates a Writer for writing a module-level file inside the module's directory. File createModuleFilePath(String fileName) private Writer createFileInternal(File file) Helper method that creates a Writer for a file inside the specified directory."},{"location":"markista/javadoc/markista/core/Context/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/core/Context/#default_output_directory","title":"DEFAULT_OUTPUT_DIRECTORY","text":"<p>The default output directory</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/core/Context/#instance","title":"instance","text":"<p>The instance of this class that is returned to callers of getInstance()</p>"},{"location":"markista/javadoc/markista/core/Context/#reporter","title":"reporter","text":"<p>The Reporter used for logging messages</p>"},{"location":"markista/javadoc/markista/core/Context/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/markista/core/Context/#outputdirectory","title":"outputDirectory","text":"<p>The directory the documentation is being generated in</p>"},{"location":"markista/javadoc/markista/core/Context/#flatteneddirectories","title":"flattenedDirectories","text":"<p>The base section of the directory structure that contains no  documentation and can be skipped when creating directories.</p>"},{"location":"markista/javadoc/markista/core/Context/#modulename","title":"moduleName","text":"<p>The name of the module currently being documented</p>"},{"location":"markista/javadoc/markista/core/Context/#packagename","title":"packageName","text":"<p>The name of the package currently being documented</p>"},{"location":"markista/javadoc/markista/core/Context/#typename","title":"typeName","text":"<p>The name of the type currently being documented</p>"},{"location":"markista/javadoc/markista/core/Context/#methodname","title":"methodName","text":"<p>The name of the method currently being documented</p>"},{"location":"markista/javadoc/markista/core/Context/#fieldname","title":"fieldName","text":"<p>The name of the field currently being documented</p>"},{"location":"markista/javadoc/markista/core/Context/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/core/Context/#getflatteneddirectories","title":"getFlattenedDirectories","text":"<p>public String getFlattenedDirectories()</p>"},{"location":"markista/javadoc/markista/core/Context/#getinstance","title":"getInstance","text":"<p>public static Context getInstance()</p> <p>Returns the singleton instance of this Context.</p> <p>Returns:</p> <p>The Context singleton instance.</p>"},{"location":"markista/javadoc/markista/core/Context/#setapi","title":"setApi","text":"<p>public void setApi(Api api)</p> <p>Sets the Api model associated with this context, also initializing the flattened directories string.</p>"},{"location":"markista/javadoc/markista/core/Context/#getapi","title":"getApi","text":"<p>public Api getApi()</p> <p>Returns the Api model associated with this context.</p> <p>Returns:</p> <p>The current Api model.</p>"},{"location":"markista/javadoc/markista/core/Context/#setoutputdirectory","title":"setOutputDirectory","text":"<p>public void setOutputDirectory(String outputDirectory)</p> <p>Sets the output directory path where documentation files will be written.</p>"},{"location":"markista/javadoc/markista/core/Context/#getoutputdirectory","title":"getOutputDirectory","text":"<p>public String getOutputDirectory()</p>"},{"location":"markista/javadoc/markista/core/Context/#setreporter","title":"setReporter","text":"<p>public void setReporter(Reporter reporter)</p> <p>Sets the reporter used for reporting messages and diagnostics during doc generation.</p>"},{"location":"markista/javadoc/markista/core/Context/#getreporter","title":"getReporter","text":"<p>public Reporter getReporter()</p> <p>Returns the currently set reporter instance.</p> <p>Returns:</p> <p>The Reporter.</p>"},{"location":"markista/javadoc/markista/core/Context/#setmodulename","title":"setModuleName","text":"<p>public void setModuleName(String name)</p> <p>Sets the current module name and resets the package name.</p>"},{"location":"markista/javadoc/markista/core/Context/#getmodulename","title":"getModuleName","text":"<p>public String getModuleName()</p> <p>Returns the current module name.</p> <p>Returns:</p> <p>The module name.</p>"},{"location":"markista/javadoc/markista/core/Context/#setpackagename","title":"setPackageName","text":"<p>public void setPackageName(String name)</p> <p>Sets the current package name and resets the type name.</p>"},{"location":"markista/javadoc/markista/core/Context/#getpackagename","title":"getPackageName","text":"<p>public String getPackageName()</p> <p>Returns the current package name.</p> <p>Returns:</p> <p>The package name.</p>"},{"location":"markista/javadoc/markista/core/Context/#settypename","title":"setTypeName","text":"<p>public void setTypeName(String name)</p> <p>Sets the current type name.</p>"},{"location":"markista/javadoc/markista/core/Context/#gettypename","title":"getTypeName","text":"<p>public String getTypeName()</p> <p>Returns the current type name.</p> <p>Returns:</p> <p>The type name.</p>"},{"location":"markista/javadoc/markista/core/Context/#setmethodname","title":"setMethodName","text":"<p>public void setMethodName(String name)</p> <p>Sets the current method name.</p>"},{"location":"markista/javadoc/markista/core/Context/#getmethodname","title":"getMethodName","text":"<p>public String getMethodName()</p> <p>Returns the current method name.</p> <p>Returns:</p> <p>The method name.</p>"},{"location":"markista/javadoc/markista/core/Context/#setfieldname","title":"setFieldName","text":"<p>public void setFieldName(String name)</p> <p>Sets the current field name.</p>"},{"location":"markista/javadoc/markista/core/Context/#getfieldname","title":"getFieldName","text":"<p>public String getFieldName()</p> <p>Returns the current field name.</p> <p>Returns:</p> <p>The field name.</p>"},{"location":"markista/javadoc/markista/core/Context/#reportinfo","title":"reportInfo","text":"<p>public void reportInfo(String message)</p> <p>Reports an informational message through the reporter.</p>"},{"location":"markista/javadoc/markista/core/Context/#reportwarning","title":"reportWarning","text":"<p>public void reportWarning(String message)</p> <p>Reports a warning message including location information.</p>"},{"location":"markista/javadoc/markista/core/Context/#reporterror","title":"reportError","text":"<p>public void reportError(String message)</p> <p>Reports an error message including location information.</p>"},{"location":"markista/javadoc/markista/core/Context/#location","title":"location","text":"<p>private String location()</p> <p>Returns a string describing the current location context in module, package, type, method, and field. Used to append context details to diagnostic messages.</p> <p>Returns:</p> <p>A formatted multi-line string describing the current location, or empty if no location info.</p>"},{"location":"markista/javadoc/markista/core/Context/#getpackagedirectory","title":"getPackageDirectory","text":"<p>public File getPackageDirectory()</p> <p>Constructs a File object representing the directory path corresponding to the current output directory, module, and fully qualified package name. If flattenDirectories is enabled, only directories containing documentation for types are created according to the flattenedDirectories prefix.</p> <p>Returns:</p> <p>The File object representing the directory.</p>"},{"location":"markista/javadoc/markista/core/Context/#createfileinpackage","title":"createFileInPackage","text":"<p>public Writer createFileInPackage()</p> <p>Creates a Writer for writing a file corresponding to the current context (type name, package, module). Creates directories as necessary. Defaults of output directory are applied if not set.</p> <p>Returns:</p> <p>A Writer object for writing the file.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/core/Context/#createpackagefilepath","title":"createPackageFilePath","text":"<p>File createPackageFilePath()</p>"},{"location":"markista/javadoc/markista/core/Context/#createfileinmodule","title":"createFileInModule","text":"<p>public Writer createFileInModule(String fileName)</p> <p>Creates a Writer for writing a module-level file inside the module's directory. Creates directories as necessary. Defaults of output directory are applied if not set.</p> <p>Returns:</p> <p>A Writer object for writing the file.</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/core/Context/#createmodulefilepath","title":"createModuleFilePath","text":"<p>File createModuleFilePath(String fileName)</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException</p>"},{"location":"markista/javadoc/markista/core/Context/#createfileinternal","title":"createFileInternal","text":"<p>private Writer createFileInternal(File file)</p> <p>Helper method that creates a Writer for a file inside the specified directory.</p> <p>Returns:</p> <p>A Writer for the file.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/doclet/","title":"Package io.github.sandydunlop.markista.doclet","text":"<p>This package contains only the MarkdownDoclet class. it is here only to allow the <code>markista</code> module to export the doclet without exposing the other packages the doclet depends on.</p> Classes Class Description MarkdownDoclet A doclet that renders javadoc comments as Markdown."},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/","title":"MarkdownDoclet.Option","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#class-markdowndocletoption","title":"Class MarkdownDoclet.Option","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet.Option  All Implemented Interfaces: jdk.javadoc.doclet.Doclet.Option</p> <p>Enclosing Class: io.github.sandydunlop.markista.doclet.MarkdownDoclet</p> <p>public abstract class MarkdownDoclet.Option</p> <p>A base class for declaring options. Subtypes for specific options should implement the process method to handle instances of the option found on the command line.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name private final boolean hasArg private final String description private final String parameters"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet.Option(String name, boolean hasArg, String description, String parameters)"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public int getArgumentCount() public String getDescription() public Doclet.Option.Kind getKind() public List&lt;String&gt; getNames() public String getParameters()"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#name","title":"name","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#hasarg","title":"hasArg","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#description","title":"description","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#parameters","title":"parameters","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#getargumentcount","title":"getArgumentCount","text":"<p>public int getArgumentCount()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#getdescription","title":"getDescription","text":"<p>public String getDescription()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#getkind","title":"getKind","text":"<p>public Doclet.Option.Kind getKind()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#getnames","title":"getNames","text":"<p>public List&lt;String&gt; getNames()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet.Option/#getparameters","title":"getParameters","text":"<p>public String getParameters()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/","title":"MarkdownDoclet","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#class-markdowndoclet","title":"Class MarkdownDoclet","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet  All Implemented Interfaces: jdk.javadoc.doclet.Doclet</p> <p>public class MarkdownDoclet</p> <p>A doclet that renders javadoc comments as Markdown.</p> <p>For more information, see the Markista homepage.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public abstract MarkdownDoclet.Option A base class for declaring options."},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. public static final boolean OK Indicates success private static final boolean FAILED Indicates failure static String[] docletArgs static List&lt;String&gt; javadocArgs private static final String UNUSED_OPTION_DESCRIPTION private final Set&lt;MarkdownDoclet.Option&gt; options"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet() The default constructor, does nothing."},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void readJavadocOptions(String optionsPath) Reads a javadoc.options file containing command line arguments for Javadoc. public static void main([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] args) The starting point of Markista if it is being used without the Javadoc command. public void init(Locale locale, Reporter reporter) Initializes the doclet. public String getName() public Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions() public SourceVersion getSupportedSourceVersion() public boolean run(DocletEnvironment environment) The <code>run</code> method is called by the Javadoc tool to begin running the doclet. DocService getMainServiceAndExtensions(ServiceLoader&lt;DocService&gt; loader, DocService defaultDocService, List&lt;DocService&gt; orderedExtensions) Populates the list of extensions and determines the main DocService. private DocService populateExtensionsWithOrder(ServiceLoader&lt;DocService&gt; loader, List&lt;DocService&gt; orderedExtensions, DocService defaultDocService) private DocService populateExtensionsWithoutOrder(ServiceLoader&lt;DocService&gt; loader, List&lt;DocService&gt; orderedExtensions, DocService defaultDocService) private void addExtensionToMap(HashMap&lt;String, DocService&gt; extensions, DocService extension) private DocService handleExtension(DocService mainDocService, DocService defaultDocService, List&lt;DocService&gt; orderedExtensions, DocService extension)"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#ok","title":"OK","text":"<p>Indicates success</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#failed","title":"FAILED","text":"<p>Indicates failure</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#docletargs","title":"docletArgs","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#javadocargs","title":"javadocArgs","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#unused_option_description","title":"UNUSED_OPTION_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#options","title":"options","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#readjavadocoptions","title":"readJavadocOptions","text":"<p>public static void readJavadocOptions(String optionsPath)</p> <p>Reads a javadoc.options file containing command line arguments for Javadoc.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#main","title":"main","text":"<p>public static void main([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] args)</p> <p>The starting point of Markista if it is being used without the Javadoc command. This is useful for debugging.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#init","title":"init","text":"<p>public void init(Locale locale, Reporter reporter)</p> <p>Initializes the doclet.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#getname","title":"getName","text":"<p>public String getName()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#getsupportedoptions","title":"getSupportedOptions","text":"<p>public Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#getsupportedsourceversion","title":"getSupportedSourceVersion","text":"<p>public SourceVersion getSupportedSourceVersion()</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#run","title":"run","text":"<p>public boolean run(DocletEnvironment environment)</p> <p>The <code>run</code> method is called by the Javadoc tool to begin running the doclet.</p> <p>Returns:</p> <p>true if completed without errors, false if errors occurred.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#getmainserviceandextensions","title":"getMainServiceAndExtensions","text":"<p>DocService getMainServiceAndExtensions(ServiceLoader&lt;DocService&gt; loader, DocService defaultDocService, List&lt;DocService&gt; orderedExtensions)</p> <p>Populates the list of extensions and determines the main DocService.</p> <p>Returns:</p> <p>The DocService that is expected to output the main documentation files. Null if loading extensions failed.</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#populateextensionswithorder","title":"populateExtensionsWithOrder","text":"<p>private DocService populateExtensionsWithOrder(ServiceLoader&lt;DocService&gt; loader, List&lt;DocService&gt; orderedExtensions, DocService defaultDocService)</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#populateextensionswithoutorder","title":"populateExtensionsWithoutOrder","text":"<p>private DocService populateExtensionsWithoutOrder(ServiceLoader&lt;DocService&gt; loader, List&lt;DocService&gt; orderedExtensions, DocService defaultDocService)</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#addextensiontomap","title":"addExtensionToMap","text":"<p>private void addExtensionToMap(HashMap&lt;String, DocService&gt; extensions, DocService extension)</p>"},{"location":"markista/javadoc/markista/doclet/MarkdownDoclet/#handleextension","title":"handleExtension","text":"<p>private DocService handleExtension(DocService mainDocService, DocService defaultDocService, List&lt;DocService&gt; orderedExtensions, DocService extension)</p>"},{"location":"markista/javadoc/markista/markdown/","title":"Package io.github.sandydunlop.markista.markdown","text":"<p>This package contains the classes responsible for writing the Markdown file. ModuleWriter handles the top-level module documentation including constant field values for the module. It uses PackageWriter to output the Markdown files for each package  contained within, which in turn uses TypeWriter to output the Markdown  files for each type  contained within.</p> Classes Class Description MarkdownTable A utility class for creating tables in Markdown documents. MarkdownService TypeWriter A class that outputs API type documentation as Markdown. PackageWriter A class that outputs API package documentation as Markdown. ModuleWriter A class that outputs a module's API documentation as Markdown."},{"location":"markista/javadoc/markista/markdown/MarkdownService/","title":"MarkdownService","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#class-markdownservice","title":"Class MarkdownService","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.MarkdownService  All Implemented Interfaces: io.github.sandydunlop.markista.spi.DocService</p> <p>public class MarkdownService</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownService()"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public boolean replacesDefault() public boolean start(Api api, Context ctx) public boolean finish()"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownService/#replacesdefault","title":"replacesDefault","text":"<p>public boolean replacesDefault()</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#start","title":"start","text":"<p>public boolean start(Api api, Context ctx)</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownService/#finish","title":"finish","text":"<p>public boolean finish()</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/","title":"MarkdownTable.Column","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#class-markdowntablecolumn","title":"Class MarkdownTable.Column","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.MarkdownTable.Column  Enclosing Class: io.github.sandydunlop.markista.markdown.MarkdownTable</p> <p>public class MarkdownTable.Column</p> <p>A class to represent the name and width of a column within a table.</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description String name int width"},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable.Column(String name) Constructs a new <code>Column</code> object with the specified name."},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#name","title":"name","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable.Column/#width","title":"width","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable/","title":"MarkdownTable","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#class-markdowntable","title":"Class MarkdownTable","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.MarkdownTable </p> <p>public class MarkdownTable</p> <p>A utility class for creating tables in Markdown documents.</p> <p>This class allows adding columns with headings and rows with data. It automatically calculates column widths to align the table content.</p> <p>The table can be rendered as Markdown text to a Writer, optionally with indentation for nested formatting.</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public MarkdownTable.Column A class to represent the name and width of a column within a table."},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;MarkdownTable.Column&gt; columns List&lt;String[]&gt; rows"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable() Constructs an empty MarkdownTable."},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public MarkdownTable addColumn(String heading) Adds a column with the specified heading to the table. public MarkdownTable addRow([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] valueStrings) Adds a row of data to the table. public void render(Writer writer) Renders the table as Markdown text without any indentation. public void render(Writer writer, int indent) Renders the table as Markdown text with a given indentation level (number of spaces)."},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#columns","title":"columns","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#rows","title":"rows","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#addcolumn","title":"addColumn","text":"<p>public MarkdownTable addColumn(String heading)</p> <p>Adds a column with the specified heading to the table.</p> <p>Returns:</p> <p>The table (this) to allow method chaining.</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#addrow","title":"addRow","text":"<p>public MarkdownTable addRow([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] valueStrings)</p> <p>Adds a row of data to the table. The number of values should match or be less than the number of columns.</p> <p>Returns:</p> <p>The table (this) to allow method chaining.</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#render","title":"render","text":"<p>public void render(Writer writer)</p> <p>Renders the table as Markdown text without any indentation.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/MarkdownTable/#render_1","title":"render","text":"<p>public void render(Writer writer, int indent)</p> <p>Renders the table as Markdown text with a given indentation level (number of spaces).</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/","title":"ModuleWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#class-modulewriter","title":"Class ModuleWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.ModuleWriter </p> <p>public class ModuleWriter</p> <p>A class that outputs a module's API documentation as Markdown.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TITLE_CONSTANT_FIELD private static final String TITLE_CONSTANT_FIELD_VALUES private static final String TITLE_DESCRIPTION private static final String TITLE_EXPORTS private static final String TITLE_IMPLEMENTATIONS private static final String TITLE_INTERFACE private static final String TITLE_MODIFIER_AND_TYPE private static final String TITLE_MODULE private static final String TITLE_OPENS private static final String TITLE_PACKAGE private static final String TITLE_PACKAGES private static final String TITLE_PROVIDES private static final String TITLE_REQUIRES private static final String TITLE_USES private static final String TITLE_VALUE private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document. private Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation."},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleWriter(Context context) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void writeDocs(Api api) Output the documentation files for the specified API private void outputModuleDoc(ModuleNode moduleNode) Outputs a single module's documentation as a Markdown file. private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives) Outputs the directives declared in a module's <code>module-info.java</code> file. private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives) Outputs the <code>provides</code> directives declared in a module's <code>module-info.java</code> file. private String multiLink(List&lt;Reference&gt; references) Turns each member of a list of strings into a link to the documentation for the module, package, or type denoted by that list member. private String formatDirectivePackageDoc(DirectiveNode directive) Formats the first sentence of a DirectiveNode's documentation so that it uses only one line in the markdown output and links and code are rendered properly. private void outputConstantValues(ModuleNode moduleNode) Outputs the Constant Field Values page. private static String escape(String text)"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_constant_field","title":"TITLE_CONSTANT_FIELD","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_constant_field_values","title":"TITLE_CONSTANT_FIELD_VALUES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_description","title":"TITLE_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_exports","title":"TITLE_EXPORTS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_implementations","title":"TITLE_IMPLEMENTATIONS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_interface","title":"TITLE_INTERFACE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_modifier_and_type","title":"TITLE_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_module","title":"TITLE_MODULE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_opens","title":"TITLE_OPENS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_package","title":"TITLE_PACKAGE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_packages","title":"TITLE_PACKAGES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_provides","title":"TITLE_PROVIDES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_requires","title":"TITLE_REQUIRES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_uses","title":"TITLE_USES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#title_value","title":"TITLE_VALUE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p> <p>Warning Do not make this <code>final</code>. It will break tests with mocked Context.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#writedocs","title":"writeDocs","text":"<p>public void writeDocs(Api api)</p> <p>Output the documentation files for the specified API</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#outputmoduledoc","title":"outputModuleDoc","text":"<p>private void outputModuleDoc(ModuleNode moduleNode)</p> <p>Outputs a single module's documentation as a Markdown file. For each module, the documentation for each package it contains are then written.</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#outputmoduledirectives","title":"outputModuleDirectives","text":"<p>private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives)</p> <p>Outputs the directives declared in a module's <code>module-info.java</code> file.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#outputmoduleprovidesdirectives","title":"outputModuleProvidesDirectives","text":"<p>private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives)</p> <p>Outputs the <code>provides</code> directives declared in a module's <code>module-info.java</code> file.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#multilink","title":"multiLink","text":"<p>private String multiLink(List&lt;Reference&gt; references)</p> <p>Turns each member of a list of strings into a link to the documentation for the module, package, or type denoted by that list member.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#formatdirectivepackagedoc","title":"formatDirectivePackageDoc","text":"<p>private String formatDirectivePackageDoc(DirectiveNode directive)</p> <p>Formats the first sentence of a DirectiveNode's documentation so that it uses only one line in the markdown output and links and code are rendered properly.</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#outputconstantvalues","title":"outputConstantValues","text":"<p>private void outputConstantValues(ModuleNode moduleNode)</p> <p>Outputs the Constant Field Values page.</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/ModuleWriter/#escape","title":"escape","text":"<p>private static String escape(String text)</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/","title":"PackageWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#class-packagewriter","title":"Class PackageWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.PackageWriter </p> <p>public class PackageWriter</p> <p>A class that outputs API package documentation as Markdown.</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TEXT_CLASS private static final String TEXT_DESCRIPTION private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document."},{"location":"markista/javadoc/markista/markdown/PackageWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageWriter(Context context) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markista/markdown/PackageWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void writeDocs(ModuleNode moduleNode) Output the documentation files for the specified API void outputPackageDoc(PackageNode packageNode) Writes the Javadoc for a package as Markdown private void outputPackageMemberPackages(String title, List&lt;PackageNode&gt; members) Writes the Javadoc for a package's member packages as Markdown private void outputPackageMemberTypes(String title, List&lt;TypeView&gt; members) Writes the Javadoc for a package's members as Markdown"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/markdown/PackageWriter/#text_class","title":"TEXT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#text_description","title":"TEXT_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p> <p>Warning Do not make this <code>final</code>. It will break tests with mocked Context.</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/markdown/PackageWriter/#writedocs","title":"writeDocs","text":"<p>public void writeDocs(ModuleNode moduleNode)</p> <p>Output the documentation files for the specified API</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#outputpackagedoc","title":"outputPackageDoc","text":"<p>void outputPackageDoc(PackageNode packageNode)</p> <p>Writes the Javadoc for a package as Markdown</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#outputpackagememberpackages","title":"outputPackageMemberPackages","text":"<p>private void outputPackageMemberPackages(String title, List&lt;PackageNode&gt; members)</p> <p>Writes the Javadoc for a package's member packages as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/PackageWriter/#outputpackagemembertypes","title":"outputPackageMemberTypes","text":"<p>private void outputPackageMemberTypes(String title, List&lt;TypeView&gt; members)</p> <p>Writes the Javadoc for a package's members as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/","title":"TypeWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#class-typewriter","title":"Class TypeWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.TypeWriter </p> <p>public class TypeWriter</p> <p>A class that outputs API type documentation as Markdown.</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TEXT_CLASS private static final String TEXT_DESCRIPTION private static final String TEXT_MODIFIER_AND_TYPE private static final String BR private static final String NBSP private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document."},{"location":"markista/javadoc/markista/markdown/TypeWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeWriter(Context context) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markista/markdown/TypeWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void outputTypeDoc(TypeNode typeNode) Writes a Markdown file for the Javadoc of a type private void outputSupertypes(TypeNode typeNode) Outputs the hierarchy of supertypes of a class private void outputImplementedInterfaces(TypeNode typeNode) Outputs details of any interfaces that this class implements private void outputEnclosingClass(TypeNode typeNode) Outputs details of the class that encloses this one private void outputDeclaration(TypeNode typeNode) Outputs the type declaration private String createAnnotationString(AppliedAnnotationNode annotation) Creates a string of the elements within an annotation private void outputNestedClassSummary(List&lt;TypeView&gt; nestedClasses) Outputs a summary of nested classes within this one as Markdown private void outputEnumConstantsSummary(EnumTypeNode enumNode) Outputs as summary of an enum's constants as Markdown private void outputFieldSummary(List&lt;FieldNode&gt; fields) Outputs a summary of this class's fields as Markdown private void outputConstructorSummary(List&lt;MethodNode&gt; methods) Outputs a the summary of this class's constructors as Markdown private void outputMethodSummary(List&lt;MethodNode&gt; methods) Writes the markdown for a class's method summary table private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants) Outputs enum constant details as Markdown private void outputDetails(List&lt;Node&gt; nodes) Writes the markdown for a class's method or field details. private void outputReferences(Node node) Outputs references for a type member private void outputMethodDetails(MethodNode method) Outputs the Javadoc of a method as Markdown private void outputMethodParams(MethodNode method) Outputs the parameters of a method as Markdown private void outputDeprecation(Deprecation status, Text text) Outputs the deprecation status of this type as Markdown"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/markdown/TypeWriter/#text_class","title":"TEXT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#text_description","title":"TEXT_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#text_modifier_and_type","title":"TEXT_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#br","title":"BR","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#nbsp","title":"NBSP","text":""},{"location":"markista/javadoc/markista/markdown/TypeWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p> <p>Warning Do not make this <code>final</code>. It will break tests with mocked Context.</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputtypedoc","title":"outputTypeDoc","text":"<p>public void outputTypeDoc(TypeNode typeNode)</p> <p>Writes a Markdown file for the Javadoc of a type</p> <p>Throws:</p> <p>java.nio.file.InvalidPathException , java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputsupertypes","title":"outputSupertypes","text":"<p>private void outputSupertypes(TypeNode typeNode)</p> <p>Outputs the hierarchy of supertypes of a class</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputimplementedinterfaces","title":"outputImplementedInterfaces","text":"<p>private void outputImplementedInterfaces(TypeNode typeNode)</p> <p>Outputs details of any interfaces that this class implements</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputenclosingclass","title":"outputEnclosingClass","text":"<p>private void outputEnclosingClass(TypeNode typeNode)</p> <p>Outputs details of the class that encloses this one</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputdeclaration","title":"outputDeclaration","text":"<p>private void outputDeclaration(TypeNode typeNode)</p> <p>Outputs the type declaration</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#createannotationstring","title":"createAnnotationString","text":"<p>private String createAnnotationString(AppliedAnnotationNode annotation)</p> <p>Creates a string of the elements within an annotation</p> <p>Returns:</p> <p>The string</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputnestedclasssummary","title":"outputNestedClassSummary","text":"<p>private void outputNestedClassSummary(List&lt;TypeView&gt; nestedClasses)</p> <p>Outputs a summary of nested classes within this one as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputenumconstantssummary","title":"outputEnumConstantsSummary","text":"<p>private void outputEnumConstantsSummary(EnumTypeNode enumNode)</p> <p>Outputs as summary of an enum's constants as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputfieldsummary","title":"outputFieldSummary","text":"<p>private void outputFieldSummary(List&lt;FieldNode&gt; fields)</p> <p>Outputs a summary of this class's fields as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputconstructorsummary","title":"outputConstructorSummary","text":"<p>private void outputConstructorSummary(List&lt;MethodNode&gt; methods)</p> <p>Outputs a the summary of this class's constructors as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputmethodsummary","title":"outputMethodSummary","text":"<p>private void outputMethodSummary(List&lt;MethodNode&gt; methods)</p> <p>Writes the markdown for a class's method summary table</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputenumconstantdetails","title":"outputEnumConstantDetails","text":"<p>private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants)</p> <p>Outputs enum constant details as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputdetails","title":"outputDetails","text":"<p>private void outputDetails(List&lt;Node&gt; nodes)</p> <p>Writes the markdown for a class's method or field details.</p> <p>Throws:</p> <p>java.io.IOException</p> <p>Since:</p> <p>0.1.0</p> <p>See Also:</p> <p>http://example.com</p> <p>java.util.List</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputreferences","title":"outputReferences","text":"<p>private void outputReferences(Node node)</p> <p>Outputs references for a type member</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputmethoddetails","title":"outputMethodDetails","text":"<p>private void outputMethodDetails(MethodNode method)</p> <p>Outputs the Javadoc of a method as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputmethodparams","title":"outputMethodParams","text":"<p>private void outputMethodParams(MethodNode method)</p> <p>Outputs the parameters of a method as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/markdown/TypeWriter/#outputdeprecation","title":"outputDeprecation","text":"<p>private void outputDeprecation(Deprecation status, Text text)</p> <p>Outputs the deprecation status of this type as Markdown</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/model/","title":"Package io.github.sandydunlop.markista.model","text":"<p>The types used to store structure and documentation information of the API.</p> InterfacesClassesEnum Classes Class Description TypeView Minimal view of a type used by PackageOrTypeNode. Class Description RecordTypeNode Represents a Java record class. Text Represents a block of text. Node The base class for all types of nodes in the API model. AppliedAnnotationNode An annotation applied to a type Pair AnnotationTypeNode A Node that represents an Annotation class FieldNode A class to hold information about fields within a class, interface, or enum. ModuleNode Represents a module node that contains directives, packages, and constant values. DirectiveNode Represents a directive within a module declaration, such as requires, exports, or provides. MethodNode Contains information about a method being documented EnumTypeNode Represents an enum type node with its constants. PackageNode Represents a Java package InterfaceTypeNode A node representing a Java interface type ParamNode A class to hold information about method parameters. Reference <code>Reference</code> encapsulates links to web pages, markdown pages, modules, packages, types, and methods. TypeNode Represents a type in the API model, including its kind (class, interface, enum, annotation), supertypes, implemented interfaces, constructors, methods, fields, ownership, and relevant metadata. AnnotationElement An element of an annotation PackageOrTypeNode OverriddenMethodNode Represents a method from another type that is overridden by a method in the type being documented. ClassTypeNode Represents a Java class. Api Represents the API being documented, encapsulating its modules and packages. AbstractPackageMember Class Description Modifier Enum representing Java language modifiers with their string  representations. Deprecation Enum representing the deprecation status of an element"},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/","title":"AbstractPackageMember.ModifierSorter","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#class-abstractpackagemembermodifiersorter","title":"Class AbstractPackageMember.ModifierSorter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AbstractPackageMember.ModifierSorter  Enclosing Class: io.github.sandydunlop.markista.model.AbstractPackageMember</p> <p>public static class AbstractPackageMember.ModifierSorter</p> <p>Utility class to sort modifiers according to Java language conventions.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final List&lt;Modifier&gt; ORDER The fixed order of modifiers as per Java language specification."},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AbstractPackageMember.ModifierSorter() Private constructor to prevent instantiation."},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet) Sort the given set of modifiers into the standard order."},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#order","title":"ORDER","text":"<p>The fixed order of modifiers as per Java language specification.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/AbstractPackageMember.ModifierSorter/#sortmodifiers","title":"sortModifiers","text":"<p>public static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)</p> <p>Sort the given set of modifiers into the standard order.</p> <p>Returns:</p> <p>List of modifiers sorted in the defined order.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/","title":"AbstractPackageMember","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#class-abstractpackagemember","title":"Class AbstractPackageMember","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AbstractPackageMember </p> <p>public abstract class AbstractPackageMember</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public static AbstractPackageMember.ModifierSorter Utility class to sort modifiers according to Java language conventions."},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final Set&lt;Modifier&gt; modifiers A list of the modifiers a node has protected String simpleName The simple form of the node's name protected String qualifiedName The canonical form of the type's name protected String packageName A PackageNode representing the package the node belongs to"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AbstractPackageMember()"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void setSimpleName(String name) Sets the simple name of this type. public String getSimpleName() Returns the simple name of this type. public void setQualifiedName(String name) Sets the qualified name of this type. public String getQualifiedName() Returns the qualified name of this type. public void addModifier(Modifier mod) Adds a modifier to the set of modifiers. public Set&lt;Modifier&gt; getModifiers() Returns the set of modifiers for this node. public String getModifiersString() Returns a string representation of modifiers."},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#modifiers","title":"modifiers","text":"<p>A list of the modifiers a node has</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#simplename","title":"simpleName","text":"<p>The simple form of the node's name</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#qualifiedname","title":"qualifiedName","text":"<p>The canonical form of the type's name</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#packagename","title":"packageName","text":"<p>A PackageNode representing the package the node belongs to</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#setsimplename","title":"setSimpleName","text":"<p>public void setSimpleName(String name)</p> <p>Sets the simple name of this type.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#getsimplename","title":"getSimpleName","text":"<p>public String getSimpleName()</p> <p>Returns the simple name of this type.</p> <p>Returns:</p> <p>the simple name.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#setqualifiedname","title":"setQualifiedName","text":"<p>public void setQualifiedName(String name)</p> <p>Sets the qualified name of this type.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#getqualifiedname","title":"getQualifiedName","text":"<p>public String getQualifiedName()</p> <p>Returns the qualified name of this type.</p> <p>Returns:</p> <p>the qualified name.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#addmodifier","title":"addModifier","text":"<p>public void addModifier(Modifier mod)</p> <p>Adds a modifier to the set of modifiers.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#getmodifiers","title":"getModifiers","text":"<p>public Set&lt;Modifier&gt; getModifiers()</p> <p>Returns the set of modifiers for this node.</p> <p>Returns:</p> <p>Set of modifiers.</p>"},{"location":"markista/javadoc/markista/model/AbstractPackageMember/#getmodifiersstring","title":"getModifiersString","text":"<p>public String getModifiersString()</p> <p>Returns a string representation of modifiers. The modifiers are sorted according to a predefined order.</p> <p>Returns:</p> <p>A string containing sorted modifiers separated by spaces.</p>"},{"location":"markista/javadoc/markista/model/AnnotationElement/","title":"AnnotationElement","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/AnnotationElement/#class-annotationelement","title":"Class AnnotationElement","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationElement </p> <p>public class AnnotationElement</p> <p>An element of an annotation</p>"},{"location":"markista/javadoc/markista/model/AnnotationElement/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String value"},{"location":"markista/javadoc/markista/model/AnnotationElement/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationElement(String typeName, String name, String value) Constructs an annotation element"},{"location":"markista/javadoc/markista/model/AnnotationElement/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getValue() Gets the value of this annotation element"},{"location":"markista/javadoc/markista/model/AnnotationElement/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/AnnotationElement/#value","title":"value","text":""},{"location":"markista/javadoc/markista/model/AnnotationElement/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/AnnotationElement/#getvalue","title":"getValue","text":"<p>public String getValue()</p> <p>Gets the value of this annotation element</p> <p>Returns:</p> <p>The value of the element</p>"},{"location":"markista/javadoc/markista/model/AnnotationTypeNode/","title":"AnnotationTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/AnnotationTypeNode/#class-annotationtypenode","title":"Class AnnotationTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationTypeNode </p> <p>public class AnnotationTypeNode</p> <p>A Node that represents an Annotation class</p>"},{"location":"markista/javadoc/markista/model/AnnotationTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationTypeNode(String qualifiedName, String simpleName, String packageName) Constructor that sets the minimum required information for an AnnotationTypeNode."},{"location":"markista/javadoc/markista/model/Api/","title":"Api","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Api/#class-api","title":"Class Api","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Api </p> <p>public class Api</p> <p>Represents the API being documented, encapsulating its modules and packages. Provides methods to add and retrieve modules, packages, and types, as well as sorting them.</p>"},{"location":"markista/javadoc/markista/model/Api/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final List&lt;ModuleNode&gt; modules List of modules included in the API. private final List&lt;PackageNode&gt; packages List of packages included in the API. private final ModuleNode unnamedModule Represents the unnamed module in the API. private final List&lt;AppliedAnnotationNode&gt; appliedAnnotations List of applied annotations. private final List&lt;Reference&gt; links List of links."},{"location":"markista/javadoc/markista/model/Api/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Api(String name) Constructs an empty Api instance with the given name."},{"location":"markista/javadoc/markista/model/Api/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getName() Returns the name of the API. public void addModule(ModuleNode node) Adds a module to the API. public List&lt;ModuleNode&gt; getModules() Returns the list of modules in the API. public ModuleNode getModuleNode(String qualifiedName) Retrieves a module matching the specified qualified name. public ModuleNode getUnnamedModuleNode() Returns the unnamed module of the API. public void addPackage(PackageNode node) Adds a package to the API. public List&lt;PackageNode&gt; getPackages() Returns the list of packages in the API. public void addAppliedAnnotation(AppliedAnnotationNode annotation) Adds an applied annotation public List&lt;AppliedAnnotationNode&gt; getAppliedAnnotations() Returns the list of applied annotations public void addLink(Reference link) Adds a link public List&lt;Reference&gt; getLinks() Returns the list of link. public PackageNode getPackageNode(String qualifiedName) Retrieves a package matching the specified qualified name. public TypeNode getTypeNode(String qualifiedName) Retrieves a TypeNode based on its fully qualified name. public void sort() Sorts the types in descending order by qualified name and sorts all child types recursively. public String commonBase() Computes the longest common base package prefix shared by all packages in this API."},{"location":"markista/javadoc/markista/model/Api/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Api/#modules","title":"modules","text":"<p>List of modules included in the API.</p>"},{"location":"markista/javadoc/markista/model/Api/#packages","title":"packages","text":"<p>List of packages included in the API.</p>"},{"location":"markista/javadoc/markista/model/Api/#unnamedmodule","title":"unnamedModule","text":"<p>Represents the unnamed module in the API.</p>"},{"location":"markista/javadoc/markista/model/Api/#appliedannotations","title":"appliedAnnotations","text":"<p>List of applied annotations.</p>"},{"location":"markista/javadoc/markista/model/Api/#links","title":"links","text":"<p>List of links.</p>"},{"location":"markista/javadoc/markista/model/Api/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Api/#getname","title":"getName","text":"<p>public String getName()</p> <p>Returns the name of the API.</p> <p>Returns:</p> <p>The name of the API</p>"},{"location":"markista/javadoc/markista/model/Api/#addmodule","title":"addModule","text":"<p>public void addModule(ModuleNode node)</p> <p>Adds a module to the API.</p>"},{"location":"markista/javadoc/markista/model/Api/#getmodules","title":"getModules","text":"<p>public List&lt;ModuleNode&gt; getModules()</p> <p>Returns the list of modules in the API.</p> <p>Returns:</p> <p>List of ModuleNode objects representing the modules.</p>"},{"location":"markista/javadoc/markista/model/Api/#getmodulenode","title":"getModuleNode","text":"<p>public ModuleNode getModuleNode(String qualifiedName)</p> <p>Retrieves a module matching the specified qualified name.</p> <p>Returns:</p> <p>the matching ModuleNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/markista/model/Api/#getunnamedmodulenode","title":"getUnnamedModuleNode","text":"<p>public ModuleNode getUnnamedModuleNode()</p> <p>Returns the unnamed module of the API.</p> <p>Returns:</p> <p>the unnamed ModuleNode.</p>"},{"location":"markista/javadoc/markista/model/Api/#addpackage","title":"addPackage","text":"<p>public void addPackage(PackageNode node)</p> <p>Adds a package to the API.</p>"},{"location":"markista/javadoc/markista/model/Api/#getpackages","title":"getPackages","text":"<p>public List&lt;PackageNode&gt; getPackages()</p> <p>Returns the list of packages in the API.</p> <p>Returns:</p> <p>List of PackageNode objects representing the packages.</p>"},{"location":"markista/javadoc/markista/model/Api/#addappliedannotation","title":"addAppliedAnnotation","text":"<p>public void addAppliedAnnotation(AppliedAnnotationNode annotation)</p> <p>Adds an applied annotation</p>"},{"location":"markista/javadoc/markista/model/Api/#getappliedannotations","title":"getAppliedAnnotations","text":"<p>public List&lt;AppliedAnnotationNode&gt; getAppliedAnnotations()</p> <p>Returns the list of applied annotations</p> <p>Returns:</p> <p>list of applied annotations</p>"},{"location":"markista/javadoc/markista/model/Api/#addlink","title":"addLink","text":"<p>public void addLink(Reference link)</p> <p>Adds a link</p>"},{"location":"markista/javadoc/markista/model/Api/#getlinks","title":"getLinks","text":"<p>public List&lt;Reference&gt; getLinks()</p> <p>Returns the list of link.</p> <p>Returns:</p> <p>list of links</p>"},{"location":"markista/javadoc/markista/model/Api/#getpackagenode","title":"getPackageNode","text":"<p>public PackageNode getPackageNode(String qualifiedName)</p> <p>Retrieves a package matching the specified qualified name.</p> <p>Returns:</p> <p>the matching PackageNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/markista/model/Api/#gettypenode","title":"getTypeNode","text":"<p>public TypeNode getTypeNode(String qualifiedName)</p> <p>Retrieves a TypeNode based on its fully qualified name.</p> <p>Returns:</p> <p>the matching TypeNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/markista/model/Api/#sort","title":"sort","text":"<p>public void sort()</p> <p>Sorts the types in descending order by qualified name and sorts all child types recursively.</p> <p>Overrides:</p> <p>io.github.sandydunlop.markista.model.PackageOrTypeNode.sort.sort</p>"},{"location":"markista/javadoc/markista/model/Api/#commonbase","title":"commonBase","text":"<p>public String commonBase()</p> <p>Computes the longest common base package prefix shared by all packages in this API.</p> <p>This method iterates through the list of packages and determines the common package name prefix, truncated at the nearest dot ('.') boundary. If no common base exists, returns an empty string.</p> <p>Returns:</p> <p>The longest common base package name shared by all packages, or an empty string if none.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/","title":"AppliedAnnotationNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#class-appliedannotationnode","title":"Class AppliedAnnotationNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AppliedAnnotationNode </p> <p>public class AppliedAnnotationNode</p> <p>An annotation applied to a type</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private boolean custom private boolean documented private String typeName private final List&lt;AnnotationElement&gt; elements"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AppliedAnnotationNode() Constructs an AppliedAnnotationNode AppliedAnnotationNode(String type) Constructs an AppliedAnnotationNode with the given type"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void setCustom(boolean b) Specifies if this annotation will be treated as custom or built-in. public boolean isCustom() Indicates if this is a custom annotation public void setDocumented(boolean b) Sets the documented flag, indicating that this annotation should be displayed in the documentation of types or fields that it is applied to. public boolean isDocumented() Gets the flag the indicates this annotation should appear in the documentation of the type or field it is applied to. public String getTypeName() Returns the type of this annotation. public void setTypeName(String type) Sets the type of this annotation. public void addElement(AnnotationElement element) Adds an element to this annotation public List&lt;AnnotationElement&gt; getElements() Returns the list of elements of this annotation."},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#custom","title":"custom","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#documented","title":"documented","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#typename","title":"typeName","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#elements","title":"elements","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#setcustom","title":"setCustom","text":"<p>public void setCustom(boolean b)</p> <p>Specifies if this annotation will be treated as custom or built-in.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#iscustom","title":"isCustom","text":"<p>public boolean isCustom()</p> <p>Indicates if this is a custom annotation</p> <p>Returns:</p> <p>True if the annotation is a custom one, otherwise false</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#setdocumented","title":"setDocumented","text":"<p>public void setDocumented(boolean b)</p> <p>Sets the documented flag, indicating that this annotation should be displayed in the documentation of types or fields that it is applied to.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#isdocumented","title":"isDocumented","text":"<p>public boolean isDocumented()</p> <p>Gets the flag the indicates this annotation should appear in the documentation of the type or field it is applied to.</p> <p>Returns:</p> <p>True if this annotation should appear in such documentation.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#gettypename","title":"getTypeName","text":"<p>public String getTypeName()</p> <p>Returns the type of this annotation.</p> <p>Returns:</p> <p>The name of the annotation's type.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#settypename","title":"setTypeName","text":"<p>public void setTypeName(String type)</p> <p>Sets the type of this annotation.</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#addelement","title":"addElement","text":"<p>public void addElement(AnnotationElement element)</p> <p>Adds an element to this annotation</p>"},{"location":"markista/javadoc/markista/model/AppliedAnnotationNode/#getelements","title":"getElements","text":"<p>public List&lt;AnnotationElement&gt; getElements()</p> <p>Returns the list of elements of this annotation.</p> <p>Returns:</p> <p>list of elements belonging to this annotation.</p>"},{"location":"markista/javadoc/markista/model/ClassTypeNode/","title":"ClassTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/ClassTypeNode/#class-classtypenode","title":"Class ClassTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ClassTypeNode </p> <p>public class ClassTypeNode</p> <p>Represents a Java class. This class is intended to model a class within a program's structure. It inherits properties from TypeNode and specifies its own kind.</p>"},{"location":"markista/javadoc/markista/model/ClassTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ClassTypeNode(String qualifiedName, String simpleName, String packageName) Constructs a new ClassTypeNode."},{"location":"markista/javadoc/markista/model/Deprecation/","title":"Deprecation","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#enum-class-deprecation","title":"Enum Class Deprecation","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Deprecation&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Deprecation </p> <p>public final enum class Deprecation</p> <p>Enum representing the deprecation status of an element</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE FOR_REMOVAL DEPRECATED"},{"location":"markista/javadoc/markista/model/Deprecation/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Deprecation()"},{"location":"markista/javadoc/markista/model/Deprecation/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.Deprecation[] values() public static Deprecation valueOf(String name)"},{"location":"markista/javadoc/markista/model/Deprecation/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/Deprecation/#none","title":"NONE","text":"<p>public static final NONE NONE</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#for_removal","title":"FOR_REMOVAL","text":"<p>public static final FOR_REMOVAL FOR_REMOVAL</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#deprecated","title":"DEPRECATED","text":"<p>public static final DEPRECATED DEPRECATED</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Deprecation/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.Deprecation[] values()</p>"},{"location":"markista/javadoc/markista/model/Deprecation/#valueof","title":"valueOf","text":"<p>public static Deprecation valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/","title":"DirectiveNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#enum-class-directivenodekind","title":"Enum Class DirectiveNode.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.DirectiveNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode.Kind  Enclosing Class: io.github.sandydunlop.markista.model.DirectiveNode</p> <p>public static final enum class DirectiveNode.Kind</p> <p>Enum representing the various kinds of directives possible in a module declaration.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE REQUIRES EXPORTS OPENS USES PROVIDES"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode.Kind()"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.DirectiveNode.Kind[] values() public static DirectiveNode.Kind valueOf(String name)"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#none","title":"NONE","text":"<p>public static final NONE NONE</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#requires","title":"REQUIRES","text":"<p>public static final REQUIRES REQUIRES</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#exports","title":"EXPORTS","text":"<p>public static final EXPORTS EXPORTS</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#opens","title":"OPENS","text":"<p>public static final OPENS OPENS</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#uses","title":"USES","text":"<p>public static final USES USES</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#provides","title":"PROVIDES","text":"<p>public static final PROVIDES PROVIDES</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.DirectiveNode.Kind[] values()</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode.Kind/#valueof","title":"valueOf","text":"<p>public static DirectiveNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/","title":"DirectiveNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#class-directivenode","title":"Class DirectiveNode","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode  All Implemented Interfaces: java.io.Serializable</p> <p>public class DirectiveNode</p> <p>Represents a directive within a module declaration, such as requires, exports, or provides. Tracks the kind of directive, its name, whether it is transitive, associated packages, implementations, and related interface information.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private final DirectiveNode.Kind kind The kind of this directive (e.g. REQUIRES, EXPORTS). private String name The name associated with this directive. private Reference reference private boolean transitive Indicates whether this directive is transitive. private final List&lt;Reference&gt; packages List of package names associated with this directive. private final List&lt;Reference&gt; implementations List of implementation names associated with this directive. private Reference interfaceReference The interface name associated with this directive, if any."},{"location":"markista/javadoc/markista/model/DirectiveNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode(DirectiveNode.Kind kind, Reference reference, boolean transitive) Constructs a DirectiveNode with the specified kind, name and transitive flag. DirectiveNode(DirectiveNode.Kind kind, Reference reference) Constructs a DirectiveNode with the specified kind and name."},{"location":"markista/javadoc/markista/model/DirectiveNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public DirectiveNode.Kind getKind() Returns the kind of this directive. public String getName() Returns the name associated with this directive. public Reference getReference() public boolean isTransitive() Indicates if this directive is transitive. public void addPackage(Reference reference) Adds a package reference to this directive's package list. public List&lt;Reference&gt; getPackages() Returns the list of package references associated with this directive. public void addImplementation(Reference reference) Adds the reference to an implementation associated with this directive. public List&lt;Reference&gt; getImplementations() Returns the list of implementations associated with this directive. public void setInterface(Reference interfaceReference) Sets the interface name related to this directive. public String toString() public Reference getInterface() Returns the interface name associated with this directive."},{"location":"markista/javadoc/markista/model/DirectiveNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/DirectiveNode/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#kind","title":"kind","text":"<p>The kind of this directive (e.g. REQUIRES, EXPORTS).</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#name","title":"name","text":"<p>The name associated with this directive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#reference","title":"reference","text":""},{"location":"markista/javadoc/markista/model/DirectiveNode/#transitive","title":"transitive","text":"<p>Indicates whether this directive is transitive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#packages","title":"packages","text":"<p>List of package names associated with this directive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#implementations","title":"implementations","text":"<p>List of implementation names associated with this directive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#interfacereference","title":"interfaceReference","text":"<p>The interface name associated with this directive, if any.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/DirectiveNode/#getkind","title":"getKind","text":"<p>public DirectiveNode.Kind getKind()</p> <p>Returns the kind of this directive.</p> <p>Returns:</p> <p>the directive kind.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#getname","title":"getName","text":"<p>public String getName()</p> <p>Returns the name associated with this directive.</p> <p>Returns:</p> <p>the directive name.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#getreference","title":"getReference","text":"<p>public Reference getReference()</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#istransitive","title":"isTransitive","text":"<p>public boolean isTransitive()</p> <p>Indicates if this directive is transitive.</p> <p>Returns:</p> <p>true if transitive; false otherwise.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#addpackage","title":"addPackage","text":"<p>public void addPackage(Reference reference)</p> <p>Adds a package reference to this directive's package list.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#getpackages","title":"getPackages","text":"<p>public List&lt;Reference&gt; getPackages()</p> <p>Returns the list of package references associated with this directive.</p> <p>Returns:</p> <p>list of package names.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#addimplementation","title":"addImplementation","text":"<p>public void addImplementation(Reference reference)</p> <p>Adds the reference to an implementation associated with this directive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#getimplementations","title":"getImplementations","text":"<p>public List&lt;Reference&gt; getImplementations()</p> <p>Returns the list of implementations associated with this directive.</p> <p>Returns:</p> <p>list of implementation references.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#setinterface","title":"setInterface","text":"<p>public void setInterface(Reference interfaceReference)</p> <p>Sets the interface name related to this directive.</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#tostring","title":"toString","text":"<p>public String toString()</p>"},{"location":"markista/javadoc/markista/model/DirectiveNode/#getinterface","title":"getInterface","text":"<p>public Reference getInterface()</p> <p>Returns the interface name associated with this directive.</p> <p>Returns:</p> <p>the interface name, or an empty string if none set.</p>"},{"location":"markista/javadoc/markista/model/EnumTypeNode/","title":"EnumTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/EnumTypeNode/#class-enumtypenode","title":"Class EnumTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.EnumTypeNode </p> <p>public class EnumTypeNode</p> <p>Represents an enum type node with its constants.</p>"},{"location":"markista/javadoc/markista/model/EnumTypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final List&lt;FieldNode&gt; constants"},{"location":"markista/javadoc/markista/model/EnumTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description EnumTypeNode(String qualifiedName, String simpleName, String packageName) Constructs an EnumNode with the specified qualified name, simple name, and package."},{"location":"markista/javadoc/markista/model/EnumTypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void addConstant(FieldNode constant) Adds a constant field to this enum. public List&lt;FieldNode&gt; getConstants() Returns the list of enum constants."},{"location":"markista/javadoc/markista/model/EnumTypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/EnumTypeNode/#constants","title":"constants","text":""},{"location":"markista/javadoc/markista/model/EnumTypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/EnumTypeNode/#addconstant","title":"addConstant","text":"<p>public void addConstant(FieldNode constant)</p> <p>Adds a constant field to this enum.</p>"},{"location":"markista/javadoc/markista/model/EnumTypeNode/#getconstants","title":"getConstants","text":"<p>public List&lt;FieldNode&gt; getConstants()</p> <p>Returns the list of enum constants.</p> <p>Returns:</p> <p>List of FieldNode constants.</p>"},{"location":"markista/javadoc/markista/model/FieldNode/","title":"FieldNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#class-fieldnode","title":"Class FieldNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.FieldNode </p> <p>public class FieldNode</p> <p>A class to hold information about fields within a class, interface, or enum.</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Serializable constantValue The constant value assigned to this field, if any. private Reference constantValueReference"},{"location":"markista/javadoc/markista/model/FieldNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FieldNode(String type, String name) Constructs a FieldNode with the given type and name."},{"location":"markista/javadoc/markista/model/FieldNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public Serializable getConstantValue() Returns the constant value of this field. public void setConstantValue(Serializable constantValue) Sets the constant value of this field. public void setConstantValueReference(Reference ref) public Reference getConstantValueReference() public String fullSignature() Returns the full signature of the field including modifiers and name."},{"location":"markista/javadoc/markista/model/FieldNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/FieldNode/#constantvalue","title":"constantValue","text":"<p>The constant value assigned to this field, if any.</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#constantvaluereference","title":"constantValueReference","text":""},{"location":"markista/javadoc/markista/model/FieldNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/FieldNode/#getconstantvalue","title":"getConstantValue","text":"<p>public Serializable getConstantValue()</p> <p>Returns the constant value of this field.</p> <p>Returns:</p> <p>The constant value of the field or null if none.</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#setconstantvalue","title":"setConstantValue","text":"<p>public void setConstantValue(Serializable constantValue)</p> <p>Sets the constant value of this field.</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#setconstantvaluereference","title":"setConstantValueReference","text":"<p>public void setConstantValueReference(Reference ref)</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#getconstantvaluereference","title":"getConstantValueReference","text":"<p>public Reference getConstantValueReference()</p>"},{"location":"markista/javadoc/markista/model/FieldNode/#fullsignature","title":"fullSignature","text":"<p>public String fullSignature()</p> <p>Returns the full signature of the field including modifiers and name.</p> <p>Returns:</p> <p>The string representing the full signature.</p>"},{"location":"markista/javadoc/markista/model/InterfaceTypeNode/","title":"InterfaceTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/InterfaceTypeNode/#class-interfacetypenode","title":"Class InterfaceTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.InterfaceTypeNode </p> <p>public class InterfaceTypeNode</p> <p>A node representing a Java interface type</p>"},{"location":"markista/javadoc/markista/model/InterfaceTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description InterfaceTypeNode(String qualifiedName, String simpleName, String packageName) Create an InterfaceTypeNode with the specified details"},{"location":"markista/javadoc/markista/model/MethodNode/","title":"MethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#class-methodnode","title":"Class MethodNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.MethodNode </p> <p>public class MethodNode</p> <p>Contains information about a method being documented</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Text returnDescription Description of the method's return value. private Reference specifiedBy Name of the interface or specification this method is specified by. private final String returnTypeName The return type of this method. private OverriddenMethodNode overrides Information about the method that this method overrides, if any. private final List&lt;ParamNode&gt; params List of parameters for this method. private final List&lt;Reference&gt; thrownTypes List of exception types that this method declares it can throw. private String ownerName The type (class/interface) that owns this method. private Text returnTypeText"},{"location":"markista/javadoc/markista/model/MethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MethodNode(String returnType, String name) Constructs a MethodNode with the specified return type and method name."},{"location":"markista/javadoc/markista/model/MethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void setOverriddenMethod(OverriddenMethodNode overrides) Sets the overridden method information that this method overrides. public OverriddenMethodNode getOverriddenMethod() Returns the overridden method information, if any. public String getReturnTypeName() Returns the return type of this method. public void addParam(ParamNode param) Adds a parameter to this method. public List&lt;ParamNode&gt; getParams() Returns the list of parameters of this method. public void addThrownType(Reference name) Adds an exception type that this method declares it throws. public List&lt;Reference&gt; getThrownTypes() Returns the list of exception types declared by this method. public void setOwnerName(String owner) Sets the owning type (class/interface) of this method. public String getOwnerName() Returns the owning type of this method. public void setSpecifiedBy(Reference interfaceName) Sets the interface or specification name this method is specified by. public Reference getSpecifiedBy() Returns the name of the interface or specification this method is specified by. public void setReturnDescription(Text text) Sets the description of the method's return value. public Text getReturnDescription() Returns the description of the method's return value. public Text getReturnTypeText() Returns the type Text of this parameter. public void setReturnTypeText(Text text) Sets the type Text of this parameter. public String signature() Computes and returns the method signature string, including return type, name, and parameters."},{"location":"markista/javadoc/markista/model/MethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/MethodNode/#returndescription","title":"returnDescription","text":"<p>Description of the method's return value.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#specifiedby","title":"specifiedBy","text":"<p>Name of the interface or specification this method is specified by.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#returntypename","title":"returnTypeName","text":"<p>The return type of this method.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#overrides","title":"overrides","text":"<p>Information about the method that this method overrides, if any.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#params","title":"params","text":"<p>List of parameters for this method.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#throwntypes","title":"thrownTypes","text":"<p>List of exception types that this method declares it can throw.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#ownername","title":"ownerName","text":"<p>The type (class/interface) that owns this method.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#returntypetext","title":"returnTypeText","text":""},{"location":"markista/javadoc/markista/model/MethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/MethodNode/#setoverriddenmethod","title":"setOverriddenMethod","text":"<p>public void setOverriddenMethod(OverriddenMethodNode overrides)</p> <p>Sets the overridden method information that this method overrides.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>public OverriddenMethodNode getOverriddenMethod()</p> <p>Returns the overridden method information, if any.</p> <p>Returns:</p> <p>the OverriddenMethodNode representing the overridden method, or null if none.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getreturntypename","title":"getReturnTypeName","text":"<p>public String getReturnTypeName()</p> <p>Returns the return type of this method.</p> <p>Returns:</p> <p>the TypeNode representing the return type.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#addparam","title":"addParam","text":"<p>public void addParam(ParamNode param)</p> <p>Adds a parameter to this method.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getparams","title":"getParams","text":"<p>public List&lt;ParamNode&gt; getParams()</p> <p>Returns the list of parameters of this method.</p> <p>Returns:</p> <p>List of ParamNode objects representing the method parameters.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#addthrowntype","title":"addThrownType","text":"<p>public void addThrownType(Reference name)</p> <p>Adds an exception type that this method declares it throws.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getthrowntypes","title":"getThrownTypes","text":"<p>public List&lt;Reference&gt; getThrownTypes()</p> <p>Returns the list of exception types declared by this method.</p> <p>Returns:</p> <p>List of exception type names as Strings.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#setownername","title":"setOwnerName","text":"<p>public void setOwnerName(String owner)</p> <p>Sets the owning type (class/interface) of this method.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getownername","title":"getOwnerName","text":"<p>public String getOwnerName()</p> <p>Returns the owning type of this method.</p> <p>Returns:</p> <p>the name of the TypeNode representing the owner.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#setspecifiedby","title":"setSpecifiedBy","text":"<p>public void setSpecifiedBy(Reference interfaceName)</p> <p>Sets the interface or specification name this method is specified by.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getspecifiedby","title":"getSpecifiedBy","text":"<p>public Reference getSpecifiedBy()</p> <p>Returns the name of the interface or specification this method is specified by.</p> <p>Returns:</p> <p>the specifying interface or specification name.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#setreturndescription","title":"setReturnDescription","text":"<p>public void setReturnDescription(Text text)</p> <p>Sets the description of the method's return value.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getreturndescription","title":"getReturnDescription","text":"<p>public Text getReturnDescription()</p> <p>Returns the description of the method's return value.</p> <p>Returns:</p> <p>a Text object containing the return description.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#getreturntypetext","title":"getReturnTypeText","text":"<p>public Text getReturnTypeText()</p> <p>Returns the type Text of this parameter.</p> <p>Returns:</p> <p>The Text representing the parameter's type.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#setreturntypetext","title":"setReturnTypeText","text":"<p>public void setReturnTypeText(Text text)</p> <p>Sets the type Text of this parameter.</p>"},{"location":"markista/javadoc/markista/model/MethodNode/#signature","title":"signature","text":"<p>public String signature()</p> <p>Computes and returns the method signature string, including return type, name, and parameters. Example format: \"java.lang.String methodName(int, java.util.List)\"</p> <p>Returns:</p> <p>the method signature as a String.</p>"},{"location":"markista/javadoc/markista/model/Modifier/","title":"Modifier","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Modifier/#enum-class-modifier","title":"Enum Class Modifier","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Modifier&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Modifier </p> <p>public final enum class Modifier</p> <p>Enum representing Java language modifiers with their string  representations.</p>"},{"location":"markista/javadoc/markista/model/Modifier/#enum-constants","title":"Enum Constants","text":"Enum Constant Description PUBLIC PROTECTED PRIVATE STATIC FINAL ABSTRACT SYNCHRONIZED TRANSIENT VOLATILE NATIVE STRICTFP DEFAULT"},{"location":"markista/javadoc/markista/model/Modifier/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name The string representation of the modifier."},{"location":"markista/javadoc/markista/model/Modifier/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Modifier(String s) Constructs a Modifier enum constant with the specified string value."},{"location":"markista/javadoc/markista/model/Modifier/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.Modifier[] values() public static Modifier valueOf(String name) public String toString() Returns the string representation of this modifier."},{"location":"markista/javadoc/markista/model/Modifier/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/Modifier/#public","title":"PUBLIC","text":"<p>public static final PUBLIC PUBLIC</p>"},{"location":"markista/javadoc/markista/model/Modifier/#protected","title":"PROTECTED","text":"<p>public static final PROTECTED PROTECTED</p>"},{"location":"markista/javadoc/markista/model/Modifier/#private","title":"PRIVATE","text":"<p>public static final PRIVATE PRIVATE</p>"},{"location":"markista/javadoc/markista/model/Modifier/#static","title":"STATIC","text":"<p>public static final STATIC STATIC</p>"},{"location":"markista/javadoc/markista/model/Modifier/#final","title":"FINAL","text":"<p>public static final FINAL FINAL</p>"},{"location":"markista/javadoc/markista/model/Modifier/#abstract","title":"ABSTRACT","text":"<p>public static final ABSTRACT ABSTRACT</p>"},{"location":"markista/javadoc/markista/model/Modifier/#synchronized","title":"SYNCHRONIZED","text":"<p>public static final SYNCHRONIZED SYNCHRONIZED</p>"},{"location":"markista/javadoc/markista/model/Modifier/#transient","title":"TRANSIENT","text":"<p>public static final TRANSIENT TRANSIENT</p>"},{"location":"markista/javadoc/markista/model/Modifier/#volatile","title":"VOLATILE","text":"<p>public static final VOLATILE VOLATILE</p>"},{"location":"markista/javadoc/markista/model/Modifier/#native","title":"NATIVE","text":"<p>public static final NATIVE NATIVE</p>"},{"location":"markista/javadoc/markista/model/Modifier/#strictfp","title":"STRICTFP","text":"<p>public static final STRICTFP STRICTFP</p>"},{"location":"markista/javadoc/markista/model/Modifier/#default","title":"DEFAULT","text":"<p>public static final DEFAULT DEFAULT</p>"},{"location":"markista/javadoc/markista/model/Modifier/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Modifier/#name","title":"name","text":"<p>The string representation of the modifier.</p>"},{"location":"markista/javadoc/markista/model/Modifier/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Modifier/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.Modifier[] values()</p>"},{"location":"markista/javadoc/markista/model/Modifier/#valueof","title":"valueOf","text":"<p>public static Modifier valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/Modifier/#tostring","title":"toString","text":"<p>public String toString()</p> <p>Returns the string representation of this modifier.</p> <p>Returns:</p> <p>The string name of the modifier.</p> <p>Overrides:</p> <p>Enum&lt;Modifier&gt;.toString</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/","title":"ModuleNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#class-modulenode","title":"Class ModuleNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ModuleNode </p> <p>public class ModuleNode</p> <p>Represents a module node that contains directives, packages, and constant values.  Implements the PackageOwner interface to manage contained packages.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name private boolean hasModuleInfo private String sourcePath private final List&lt;DirectiveNode&gt; directives private final List&lt;PackageNode&gt; packages private final List&lt;FieldNode&gt; constantValues"},{"location":"markista/javadoc/markista/model/ModuleNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleNode(String name) Constructs a ModuleNode with the given module name."},{"location":"markista/javadoc/markista/model/ModuleNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getName() Returns the name (qualified name) of this module. public void setSourcePath(String path) public String getSourcePath() public void setHasModuleInfo(boolean b) public boolean hasModuleInfo() public List&lt;PackageNode&gt; getPackages() Returns the list of packages contained in this module. public void addPackage(PackageNode packageNode) Adds a package to this module. public void addDirective(DirectiveNode directive) Adds a directive to this module. public List&lt;DirectiveNode&gt; getDirectives() Returns the list of directives declared in this module. public void addConstantValue(FieldNode constant) Adds a constant field value to this module. public List&lt;FieldNode&gt; getConstantValues() Returns the list of constant values defined in this module. public List&lt;DirectiveNode&gt; getExports() Returns the list of 'exports' directives in this module. public List&lt;DirectiveNode&gt; getRequires() Returns the list of 'requires' directives in this module. public List&lt;DirectiveNode&gt; getOpens() Returns the list of 'opens' directives in this module. public List&lt;DirectiveNode&gt; getUses() Returns the list of 'uses' directives in this module. public List&lt;DirectiveNode&gt; getProvides() Returns the list of 'provides' directives in this module."},{"location":"markista/javadoc/markista/model/ModuleNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#name","title":"name","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#hasmoduleinfo","title":"hasModuleInfo","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#sourcepath","title":"sourcePath","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#directives","title":"directives","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#constantvalues","title":"constantValues","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/ModuleNode/#getname","title":"getName","text":"<p>public String getName()</p> <p>Returns the name (qualified name) of this module.</p> <p>Returns:</p> <p>The module name.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#setsourcepath","title":"setSourcePath","text":"<p>public void setSourcePath(String path)</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getsourcepath","title":"getSourcePath","text":"<p>public String getSourcePath()</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#sethasmoduleinfo","title":"setHasModuleInfo","text":"<p>public void setHasModuleInfo(boolean b)</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#hasmoduleinfo_1","title":"hasModuleInfo","text":"<p>public boolean hasModuleInfo()</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getpackages","title":"getPackages","text":"<p>public List&lt;PackageNode&gt; getPackages()</p> <p>Returns the list of packages contained in this module.</p> <p>Returns:</p> <p>List of PackageMember objects.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#addpackage","title":"addPackage","text":"<p>public void addPackage(PackageNode packageNode)</p> <p>Adds a package to this module.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#adddirective","title":"addDirective","text":"<p>public void addDirective(DirectiveNode directive)</p> <p>Adds a directive to this module.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getdirectives","title":"getDirectives","text":"<p>public List&lt;DirectiveNode&gt; getDirectives()</p> <p>Returns the list of directives declared in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#addconstantvalue","title":"addConstantValue","text":"<p>public void addConstantValue(FieldNode constant)</p> <p>Adds a constant field value to this module.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getconstantvalues","title":"getConstantValues","text":"<p>public List&lt;FieldNode&gt; getConstantValues()</p> <p>Returns the list of constant values defined in this module.</p> <p>Returns:</p> <p>List of FieldNode objects.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getexports","title":"getExports","text":"<p>public List&lt;DirectiveNode&gt; getExports()</p> <p>Returns the list of 'exports' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by EXPORTS kind.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getrequires","title":"getRequires","text":"<p>public List&lt;DirectiveNode&gt; getRequires()</p> <p>Returns the list of 'requires' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by REQUIRES kind.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getopens","title":"getOpens","text":"<p>public List&lt;DirectiveNode&gt; getOpens()</p> <p>Returns the list of 'opens' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by OPENS kind.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getuses","title":"getUses","text":"<p>public List&lt;DirectiveNode&gt; getUses()</p> <p>Returns the list of 'uses' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by USES kind.</p>"},{"location":"markista/javadoc/markista/model/ModuleNode/#getprovides","title":"getProvides","text":"<p>public List&lt;DirectiveNode&gt; getProvides()</p> <p>Returns the list of 'provides' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by PROVIDES kind.</p>"},{"location":"markista/javadoc/markista/model/Node/","title":"Node","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Node/#class-node","title":"Class Node","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node  All Implemented Interfaces: java.io.Serializable</p> <p>public class Node</p> <p>The base class for all types of nodes in the API model.</p>"},{"location":"markista/javadoc/markista/model/Node/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID protected UUID uuid A unique identifier private Deprecation deprecation The deprecation status of the node private Text deprecationText Text describing the deprecation state of the node private Text since Text showing when this node was added to the API protected Text firstSentence The first sentence of the Javadoc for this node private final Text body The body text of the Javadoc for this node private final Text fullBody The full text of the Javadoc for this node private List&lt;Reference&gt; references A list of references specified in this node's Javadoc"},{"location":"markista/javadoc/markista/model/Node/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node() The default constructor"},{"location":"markista/javadoc/markista/model/Node/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public UUID getUUID() public void setDeprecation(Deprecation deprecation) Sets the deprecation status for this node. public Deprecation getDeprecation() Retrieves the deprecation status of this node. public void setDeprecationText(Text text) Sets the deprecation text. public Text getDeprecationText() Returns the deprecation text. public void setSince(Text text) Sets the 'since' documentation text. public Text getSince() Returns the 'since' documentation text. public void setFirstSentence(Text text) Sets the first sentence of the documentation. public Text getFirstSentence() Returns the first sentence of the documentation. public void setBody(Text text) Sets the main body documentation text. public Text getBody() Returns the main body documentation text. public void setFullBody(Text text) Sets the full body documentation text including tags. public Text getFullBody() Returns the full body documentation text including tags. public void setReferences(List&lt;Reference&gt; refs) Sets the list of references for this node. public List&lt;Reference&gt; getReferences() Returns the list of references associated with this node."},{"location":"markista/javadoc/markista/model/Node/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Node/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/Node/#uuid","title":"uuid","text":"<p>A unique identifier</p>"},{"location":"markista/javadoc/markista/model/Node/#deprecation","title":"deprecation","text":"<p>The deprecation status of the node</p>"},{"location":"markista/javadoc/markista/model/Node/#deprecationtext","title":"deprecationText","text":"<p>Text describing the deprecation state of the node</p>"},{"location":"markista/javadoc/markista/model/Node/#since","title":"since","text":"<p>Text showing when this node was added to the API</p>"},{"location":"markista/javadoc/markista/model/Node/#firstsentence","title":"firstSentence","text":"<p>The first sentence of the Javadoc for this node</p>"},{"location":"markista/javadoc/markista/model/Node/#body","title":"body","text":"<p>The body text of the Javadoc for this node</p>"},{"location":"markista/javadoc/markista/model/Node/#fullbody","title":"fullBody","text":"<p>The full text of the Javadoc for this node</p>"},{"location":"markista/javadoc/markista/model/Node/#references","title":"references","text":"<p>A list of references specified in this node's Javadoc</p>"},{"location":"markista/javadoc/markista/model/Node/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Node/#getuuid","title":"getUUID","text":"<p>public UUID getUUID()</p>"},{"location":"markista/javadoc/markista/model/Node/#setdeprecation","title":"setDeprecation","text":"<p>public void setDeprecation(Deprecation deprecation)</p> <p>Sets the deprecation status for this node.</p>"},{"location":"markista/javadoc/markista/model/Node/#getdeprecation","title":"getDeprecation","text":"<p>public Deprecation getDeprecation()</p> <p>Retrieves the deprecation status of this node.</p> <p>Returns:</p> <p>The deprecation enum value.</p>"},{"location":"markista/javadoc/markista/model/Node/#setdeprecationtext","title":"setDeprecationText","text":"<p>public void setDeprecationText(Text text)</p> <p>Sets the deprecation text.</p>"},{"location":"markista/javadoc/markista/model/Node/#getdeprecationtext","title":"getDeprecationText","text":"<p>public Text getDeprecationText()</p> <p>Returns the deprecation text.</p> <p>Returns:</p> <p>The deprecation descriptive text.</p>"},{"location":"markista/javadoc/markista/model/Node/#setsince","title":"setSince","text":"<p>public void setSince(Text text)</p> <p>Sets the 'since' documentation text.</p>"},{"location":"markista/javadoc/markista/model/Node/#getsince","title":"getSince","text":"<p>public Text getSince()</p> <p>Returns the 'since' documentation text.</p> <p>Returns:</p> <p>The since text.</p>"},{"location":"markista/javadoc/markista/model/Node/#setfirstsentence","title":"setFirstSentence","text":"<p>public void setFirstSentence(Text text)</p> <p>Sets the first sentence of the documentation.</p>"},{"location":"markista/javadoc/markista/model/Node/#getfirstsentence","title":"getFirstSentence","text":"<p>public Text getFirstSentence()</p> <p>Returns the first sentence of the documentation.</p> <p>Returns:</p> <p>The first sentence text.</p>"},{"location":"markista/javadoc/markista/model/Node/#setbody","title":"setBody","text":"<p>public void setBody(Text text)</p> <p>Sets the main body documentation text.</p>"},{"location":"markista/javadoc/markista/model/Node/#getbody","title":"getBody","text":"<p>public Text getBody()</p> <p>Returns the main body documentation text.</p> <p>Returns:</p> <p>The body text.</p>"},{"location":"markista/javadoc/markista/model/Node/#setfullbody","title":"setFullBody","text":"<p>public void setFullBody(Text text)</p> <p>Sets the full body documentation text including tags.</p>"},{"location":"markista/javadoc/markista/model/Node/#getfullbody","title":"getFullBody","text":"<p>public Text getFullBody()</p> <p>Returns the full body documentation text including tags.</p> <p>Returns:</p> <p>The full body text.</p>"},{"location":"markista/javadoc/markista/model/Node/#setreferences","title":"setReferences","text":"<p>public void setReferences(List&lt;Reference&gt; refs)</p> <p>Sets the list of references for this node.</p>"},{"location":"markista/javadoc/markista/model/Node/#getreferences","title":"getReferences","text":"<p>public List&lt;Reference&gt; getReferences()</p> <p>Returns the list of references associated with this node.</p> <p>Returns:</p> <p>List of Reference objects.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/","title":"OverriddenMethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#class-overriddenmethodnode","title":"Class OverriddenMethodNode","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.OverriddenMethodNode  All Implemented Interfaces: java.io.Serializable</p> <p>public class OverriddenMethodNode</p> <p>Represents a method from another type that is overridden by a method in the type being documented.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private final String qualifiedClassName Fully qualified name of the class that declares the overridden method. private Text text private final String methodName Name of the overridden method. private Reference reference"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description OverriddenMethodNode(String qualifiedClassName, String methodName) Constructs an OverriddenMethodNode with specified qualified class name and method name."},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getClassName() Returns the fully qualified class name of the overridden method. public void setReference(Reference ref) public Reference getReference() public String getMethodName() Returns the name of the overridden method. public void setText(Text text) public Text getText()"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#qualifiedclassname","title":"qualifiedClassName","text":"<p>Fully qualified name of the class that declares the overridden method.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#text","title":"text","text":""},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#methodname","title":"methodName","text":"<p>Name of the overridden method.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#reference","title":"reference","text":""},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#getclassname","title":"getClassName","text":"<p>public String getClassName()</p> <p>Returns the fully qualified class name of the overridden method.</p> <p>Returns:</p> <p>The qualified class name.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#setreference","title":"setReference","text":"<p>public void setReference(Reference ref)</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#getreference","title":"getReference","text":"<p>public Reference getReference()</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#getmethodname","title":"getMethodName","text":"<p>public String getMethodName()</p> <p>Returns the name of the overridden method.</p> <p>Returns:</p> <p>The method name.</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#settext","title":"setText","text":"<p>public void setText(Text text)</p>"},{"location":"markista/javadoc/markista/model/OverriddenMethodNode/#gettext","title":"getText","text":"<p>public Text getText()</p>"},{"location":"markista/javadoc/markista/model/PackageNode/","title":"PackageNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#class-packagenode","title":"Class PackageNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageNode </p> <p>public class PackageNode</p> <p>Represents a Java package</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String moduleName private String sourcePath private boolean hasPackageInfo private final List&lt;PackageNode&gt; packages"},{"location":"markista/javadoc/markista/model/PackageNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageNode(String name) Constructs a PackageNode with the specified qualified package name."},{"location":"markista/javadoc/markista/model/PackageNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void setModuleName(String module) Sets the module for this package. public String getModuleName() Returns the module that owns this package. public void setSourcePath(String path) public String getSourcePath() public List&lt;PackageNode&gt; getPackages() Returns the list of package members owned by this package. public void addPackage(PackageNode packageNode) Adds a subpackage to this package. public Text getDescription() Returns the description text for this package, typically the first sentence. public void setHasPackageInfo(boolean b) public boolean hasPackageInfo()"},{"location":"markista/javadoc/markista/model/PackageNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#modulename","title":"moduleName","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#sourcepath","title":"sourcePath","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#haspackageinfo","title":"hasPackageInfo","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/PackageNode/#setmodulename","title":"setModuleName","text":"<p>public void setModuleName(String module)</p> <p>Sets the module for this package.</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#getmodulename","title":"getModuleName","text":"<p>public String getModuleName()</p> <p>Returns the module that owns this package.</p> <p>Returns:</p> <p>The ModuleNode instance.</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#setsourcepath","title":"setSourcePath","text":"<p>public void setSourcePath(String path)</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#getsourcepath","title":"getSourcePath","text":"<p>public String getSourcePath()</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#getpackages","title":"getPackages","text":"<p>public List&lt;PackageNode&gt; getPackages()</p> <p>Returns the list of package members owned by this package.</p> <p>Returns:</p> <p>List of PackageNode objects.</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#addpackage","title":"addPackage","text":"<p>public void addPackage(PackageNode packageNode)</p> <p>Adds a subpackage to this package.</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#getdescription","title":"getDescription","text":"<p>public Text getDescription()</p> <p>Returns the description text for this package, typically the first sentence.</p> <p>Returns:</p> <p>The Text object representing the description.</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#sethaspackageinfo","title":"setHasPackageInfo","text":"<p>public void setHasPackageInfo(boolean b)</p>"},{"location":"markista/javadoc/markista/model/PackageNode/#haspackageinfo_1","title":"hasPackageInfo","text":"<p>public boolean hasPackageInfo()</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/","title":"PackageOrTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#class-packageortypenode","title":"Class PackageOrTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageOrTypeNode </p> <p>public abstract class PackageOrTypeNode</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected final List&lt;TypeView&gt; types"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageOrTypeNode()"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public void addType(TypeView typeNode) public List&lt;TypeView&gt; getTypes() Gets the list of types owned by this instance. public List&lt;TypeView&gt; getClasses() Gets the list of classes owned by this instance. public List&lt;TypeView&gt; getInterfaces() Gets the list of interfaces owned by this instance. public List&lt;TypeView&gt; getEnums() Gets the list of enums owned by this instance. public List&lt;TypeView&gt; getRecords() Gets the list of records owned by this instance. public List&lt;TypeView&gt; getAnnotations() Gets the list of annotations owned by this instance. public void sort() Sorts the nodes owned by this instance into alphabetical order."},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#types","title":"types","text":""},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#addtype","title":"addType","text":"<p>public void addType(TypeView typeNode)</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#gettypes","title":"getTypes","text":"<p>public List&lt;TypeView&gt; getTypes()</p> <p>Gets the list of types owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#getclasses","title":"getClasses","text":"<p>public List&lt;TypeView&gt; getClasses()</p> <p>Gets the list of classes owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#getinterfaces","title":"getInterfaces","text":"<p>public List&lt;TypeView&gt; getInterfaces()</p> <p>Gets the list of interfaces owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#getenums","title":"getEnums","text":"<p>public List&lt;TypeView&gt; getEnums()</p> <p>Gets the list of enums owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#getrecords","title":"getRecords","text":"<p>public List&lt;TypeView&gt; getRecords()</p> <p>Gets the list of records owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#getannotations","title":"getAnnotations","text":"<p>public List&lt;TypeView&gt; getAnnotations()</p> <p>Gets the list of annotations owned by this instance.</p>"},{"location":"markista/javadoc/markista/model/PackageOrTypeNode/#sort","title":"sort","text":"<p>public void sort()</p> <p>Sorts the nodes owned by this instance into alphabetical order.</p>"},{"location":"markista/javadoc/markista/model/Pair/","title":"Pair","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Pair/#class-pair","title":"Class Pair","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Pair  All Implemented Interfaces: java.io.Serializable</p> <p>public class Pair</p>"},{"location":"markista/javadoc/markista/model/Pair/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private L l private R r"},{"location":"markista/javadoc/markista/model/Pair/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Pair(L l, R r)"},{"location":"markista/javadoc/markista/model/Pair/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public L getL() public R getR() public void setL(L l) public void setR(R r) public String toString() public boolean equals(Object other) public int hashCode() public static Pair of(A a, B b)"},{"location":"markista/javadoc/markista/model/Pair/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Pair/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/Pair/#l","title":"l","text":""},{"location":"markista/javadoc/markista/model/Pair/#r","title":"r","text":""},{"location":"markista/javadoc/markista/model/Pair/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Pair/#getl","title":"getL","text":"<p>public L getL()</p>"},{"location":"markista/javadoc/markista/model/Pair/#getr","title":"getR","text":"<p>public R getR()</p>"},{"location":"markista/javadoc/markista/model/Pair/#setl","title":"setL","text":"<p>public void setL(L l)</p>"},{"location":"markista/javadoc/markista/model/Pair/#setr","title":"setR","text":"<p>public void setR(R r)</p>"},{"location":"markista/javadoc/markista/model/Pair/#tostring","title":"toString","text":"<p>public String toString()</p>"},{"location":"markista/javadoc/markista/model/Pair/#equals","title":"equals","text":"<p>public boolean equals(Object other)</p>"},{"location":"markista/javadoc/markista/model/Pair/#hashcode","title":"hashCode","text":"<p>public int hashCode()</p>"},{"location":"markista/javadoc/markista/model/Pair/#of","title":"of","text":"<p>public static Pair of(A a, B b)"},{"location":"markista/javadoc/markista/model/ParamNode/","title":"ParamNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#class-paramnode","title":"Class ParamNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ParamNode </p> <p>public class ParamNode</p> <p>A class to hold information about method parameters.</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String typeName The type of this parameter private Text typeText"},{"location":"markista/javadoc/markista/model/ParamNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ParamNode(String type, String name) Constructs a ParamNode with the given type and name."},{"location":"markista/javadoc/markista/model/ParamNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public String getTypeName() Returns the type of this parameter. public void setTypeName(String type) Sets the type of this parameter. public Text getTypeText() Returns the type Text of this parameter. public void setTypeText(Text text) Sets the type Text of this parameter."},{"location":"markista/javadoc/markista/model/ParamNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/ParamNode/#typename","title":"typeName","text":"<p>The type of this parameter</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#typetext","title":"typeText","text":""},{"location":"markista/javadoc/markista/model/ParamNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/ParamNode/#gettypename","title":"getTypeName","text":"<p>public String getTypeName()</p> <p>Returns the type of this parameter.</p> <p>Returns:</p> <p>The name of the parameter's type.</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#settypename","title":"setTypeName","text":"<p>public void setTypeName(String type)</p> <p>Sets the type of this parameter.</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#gettypetext","title":"getTypeText","text":"<p>public Text getTypeText()</p> <p>Returns the type Text of this parameter.</p> <p>Returns:</p> <p>The Text representing the parameter's type.</p>"},{"location":"markista/javadoc/markista/model/ParamNode/#settypetext","title":"setTypeText","text":"<p>public void setTypeText(Text text)</p> <p>Sets the type Text of this parameter.</p>"},{"location":"markista/javadoc/markista/model/RecordTypeNode/","title":"RecordTypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/RecordTypeNode/#class-recordtypenode","title":"Class RecordTypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.RecordTypeNode </p> <p>public class RecordTypeNode</p> <p>Represents a Java record class. This class is intended to model a class within a program's structure. It inherits properties from TypeNode and specifies its own kind.</p>"},{"location":"markista/javadoc/markista/model/RecordTypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description RecordTypeNode(String qualifiedName, String simpleName, String packageName) Constructs a new RecordTypeNode."},{"location":"markista/javadoc/markista/model/Reference.Kind/","title":"Reference.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#enum-class-referencekind","title":"Enum Class Reference.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Kind  Enclosing Class: io.github.sandydunlop.markista.model.Reference</p> <p>public static final enum class Reference.Kind</p> <p>Enum representing different kinds/types of references.</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description UNKNOWN UNSUPPORTED URL PAGE MODULE PACKAGE TYPE METHOD PRIMITIVE VOID"},{"location":"markista/javadoc/markista/model/Reference.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Kind()"},{"location":"markista/javadoc/markista/model/Reference.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.Reference.Kind[] values() public static Reference.Kind valueOf(String name)"},{"location":"markista/javadoc/markista/model/Reference.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/Reference.Kind/#unknown","title":"UNKNOWN","text":"<p>public static final UNKNOWN UNKNOWN</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#unsupported","title":"UNSUPPORTED","text":"<p>public static final UNSUPPORTED UNSUPPORTED</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#url","title":"URL","text":"<p>public static final URL URL</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#page","title":"PAGE","text":"<p>public static final PAGE PAGE</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#module","title":"MODULE","text":"<p>public static final MODULE MODULE</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#package","title":"PACKAGE","text":"<p>public static final PACKAGE PACKAGE</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#type","title":"TYPE","text":"<p>public static final TYPE TYPE</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#method","title":"METHOD","text":"<p>public static final METHOD METHOD</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#primitive","title":"PRIMITIVE","text":"<p>public static final PRIMITIVE PRIMITIVE</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#void","title":"VOID","text":"<p>public static final VOID VOID</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Reference.Kind/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.Reference.Kind[] values()</p>"},{"location":"markista/javadoc/markista/model/Reference.Kind/#valueof","title":"valueOf","text":"<p>public static Reference.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/","title":"Reference.Scope","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#enum-class-referencescope","title":"Enum Class Reference.Scope","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Scope&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Scope  Enclosing Class: io.github.sandydunlop.markista.model.Reference</p> <p>public static final enum class Reference.Scope</p> <p>Enum representing the scope of references.</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#enum-constants","title":"Enum Constants","text":"Enum Constant Description UNKNOWN LOCAL SIBLING NATIVE FOREIGN"},{"location":"markista/javadoc/markista/model/Reference.Scope/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Scope()"},{"location":"markista/javadoc/markista/model/Reference.Scope/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.Reference.Scope[] values() public static Reference.Scope valueOf(String name)"},{"location":"markista/javadoc/markista/model/Reference.Scope/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/Reference.Scope/#unknown","title":"UNKNOWN","text":"<p>public static final UNKNOWN UNKNOWN</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#local","title":"LOCAL","text":"<p>public static final LOCAL LOCAL</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#sibling","title":"SIBLING","text":"<p>public static final SIBLING SIBLING</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#native","title":"NATIVE","text":"<p>public static final NATIVE NATIVE</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#foreign","title":"FOREIGN","text":"<p>public static final FOREIGN FOREIGN</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Reference.Scope/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.Reference.Scope[] values()</p>"},{"location":"markista/javadoc/markista/model/Reference.Scope/#valueof","title":"valueOf","text":"<p>public static Reference.Scope valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/Reference/","title":"Reference","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Reference/#class-reference","title":"Class Reference","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference  All Implemented Interfaces: java.io.Serializable</p> <p>public class Reference</p> <p><code>Reference</code> encapsulates links to web pages, markdown pages, modules, packages, types, and methods.</p>"},{"location":"markista/javadoc/markista/model/Reference/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private Reference.Kind kind private Reference.Scope scope private String label private String className private String uri private String anchor private boolean resolved private boolean hasAnchor private String origin The package the link is coming from. private String target"},{"location":"markista/javadoc/markista/model/Reference/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference() Default constructor creates an empty reference with kind and scope set to NONE. Reference(Reference.Kind kind, String label, String target) Constructs a Reference with given kind, name, and URI."},{"location":"markista/javadoc/markista/model/Reference/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static Reference to(String target) Sets the target of the reference. public Reference from(String origin) Sets the origin package of the reference. public Reference withLabel(String label) Sets the display name of the reference. public Reference withClassName(String className) public Reference withUri(String uri) public Reference withKind(Reference.Kind kind) Sets the kind/type of the reference. public void setKind(Reference.Kind kind) Sets the kind/type of the reference. public Reference.Kind getKind() Returns the kind/type of the reference. public void setScope(Reference.Scope scope) Sets the scope of the reference. public Reference.Scope getScope() Returns the scope of the reference. public void setLabel(String label) Sets the display name of the reference. public String getLabel() Returns the display name of the reference. public void setClassName(String name) Sets the class name associated with the reference. public String getClassName() Returns the class name associated with the reference. public void setUri(String uri) Sets the URI of the reference. public String getUri() Returns the URI of the reference. public void setAnchor(String anchor) Sets the anchor part of the URI. public String getAnchor() Returns the anchor part of the URI. public void setOrigin(String origin) Sets the origin of this reference. public String getOrigin() Gets the origin of this reference. public void setTarget(String target) Sets the target of this reference. public String getTarget() Gets the target of this reference. public void setResolved(boolean b) Sets the resolved state of this reference. public boolean isResolved() Gets the resolved status of this reference. public void setHasAnchor(boolean b) Specifies if this link is to an anchor public boolean hasAnchor() Gets the anchor status of this reference. public String toString()"},{"location":"markista/javadoc/markista/model/Reference/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Reference/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/Reference/#kind","title":"kind","text":""},{"location":"markista/javadoc/markista/model/Reference/#scope","title":"scope","text":""},{"location":"markista/javadoc/markista/model/Reference/#label","title":"label","text":""},{"location":"markista/javadoc/markista/model/Reference/#classname","title":"className","text":""},{"location":"markista/javadoc/markista/model/Reference/#uri","title":"uri","text":""},{"location":"markista/javadoc/markista/model/Reference/#anchor","title":"anchor","text":""},{"location":"markista/javadoc/markista/model/Reference/#resolved","title":"resolved","text":""},{"location":"markista/javadoc/markista/model/Reference/#hasanchor","title":"hasAnchor","text":""},{"location":"markista/javadoc/markista/model/Reference/#origin","title":"origin","text":"<p>The package the link is coming from. Empty string means there is no package. Null means it hasn't been set yet.</p>"},{"location":"markista/javadoc/markista/model/Reference/#target","title":"target","text":""},{"location":"markista/javadoc/markista/model/Reference/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Reference/#to","title":"to","text":"<p>public static Reference to(String target)</p> <p>Sets the target of the reference.</p> <p>Returns:</p> <p>the reference with target set</p>"},{"location":"markista/javadoc/markista/model/Reference/#from","title":"from","text":"<p>public Reference from(String origin)</p> <p>Sets the origin package of the reference.</p> <p>Returns:</p> <p>the reference with origin set</p>"},{"location":"markista/javadoc/markista/model/Reference/#withlabel","title":"withLabel","text":"<p>public Reference withLabel(String label)</p> <p>Sets the display name of the reference.</p> <p>Returns:</p> <p>the reference with label set</p>"},{"location":"markista/javadoc/markista/model/Reference/#withclassname","title":"withClassName","text":"<p>public Reference withClassName(String className)</p>"},{"location":"markista/javadoc/markista/model/Reference/#withuri","title":"withUri","text":"<p>public Reference withUri(String uri)</p>"},{"location":"markista/javadoc/markista/model/Reference/#withkind","title":"withKind","text":"<p>public Reference withKind(Reference.Kind kind)</p> <p>Sets the kind/type of the reference.</p> <p>Returns:</p> <p>the label with kind set</p>"},{"location":"markista/javadoc/markista/model/Reference/#setkind","title":"setKind","text":"<p>public void setKind(Reference.Kind kind)</p> <p>Sets the kind/type of the reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getkind","title":"getKind","text":"<p>public Reference.Kind getKind()</p> <p>Returns the kind/type of the reference.</p> <p>Returns:</p> <p>The reference kind.</p>"},{"location":"markista/javadoc/markista/model/Reference/#setscope","title":"setScope","text":"<p>public void setScope(Reference.Scope scope)</p> <p>Sets the scope of the reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getscope","title":"getScope","text":"<p>public Reference.Scope getScope()</p> <p>Returns the scope of the reference.</p> <p>Returns:</p> <p>The reference scope.</p>"},{"location":"markista/javadoc/markista/model/Reference/#setlabel","title":"setLabel","text":"<p>public void setLabel(String label)</p> <p>Sets the display name of the reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getlabel","title":"getLabel","text":"<p>public String getLabel()</p> <p>Returns the display name of the reference.</p> <p>Returns:</p> <p>The display name.</p>"},{"location":"markista/javadoc/markista/model/Reference/#setclassname","title":"setClassName","text":"<p>public void setClassName(String name)</p> <p>Sets the class name associated with the reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getclassname","title":"getClassName","text":"<p>public String getClassName()</p> <p>Returns the class name associated with the reference.</p> <p>Returns:</p> <p>The class name.</p>"},{"location":"markista/javadoc/markista/model/Reference/#seturi","title":"setUri","text":"<p>public void setUri(String uri)</p> <p>Sets the URI of the reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#geturi","title":"getUri","text":"<p>public String getUri()</p> <p>Returns the URI of the reference.</p> <p>Returns:</p> <p>The URI string.</p>"},{"location":"markista/javadoc/markista/model/Reference/#setanchor","title":"setAnchor","text":"<p>public void setAnchor(String anchor)</p> <p>Sets the anchor part of the URI.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getanchor","title":"getAnchor","text":"<p>public String getAnchor()</p> <p>Returns the anchor part of the URI.</p> <p>Returns:</p> <p>The anchor string.</p>"},{"location":"markista/javadoc/markista/model/Reference/#setorigin","title":"setOrigin","text":"<p>public void setOrigin(String origin)</p> <p>Sets the origin of this reference. This is the location that is being linked from.</p>"},{"location":"markista/javadoc/markista/model/Reference/#getorigin","title":"getOrigin","text":"<p>public String getOrigin()</p> <p>Gets the origin of this reference. This is the location that is being linked from.</p> <p>Returns:</p> <p>the origin</p>"},{"location":"markista/javadoc/markista/model/Reference/#settarget","title":"setTarget","text":"<p>public void setTarget(String target)</p> <p>Sets the target of this reference. This is the location that is being linked to.</p>"},{"location":"markista/javadoc/markista/model/Reference/#gettarget","title":"getTarget","text":"<p>public String getTarget()</p> <p>Gets the target of this reference. This is the location that is being linked from.</p> <p>Returns:</p> <p>the target</p>"},{"location":"markista/javadoc/markista/model/Reference/#setresolved","title":"setResolved","text":"<p>public void setResolved(boolean b)</p> <p>Sets the resolved state of this reference.</p>"},{"location":"markista/javadoc/markista/model/Reference/#isresolved","title":"isResolved","text":"<p>public boolean isResolved()</p> <p>Gets the resolved status of this reference.</p> <p>Returns:</p> <p>True if this reference has been resolved. False otherwise.</p>"},{"location":"markista/javadoc/markista/model/Reference/#sethasanchor","title":"setHasAnchor","text":"<p>public void setHasAnchor(boolean b)</p> <p>Specifies if this link is to an anchor</p>"},{"location":"markista/javadoc/markista/model/Reference/#hasanchor_1","title":"hasAnchor","text":"<p>public boolean hasAnchor()</p> <p>Gets the anchor status of this reference.</p> <p>Returns:</p> <p>True if this reference is to an anchor. False otherwise.</p>"},{"location":"markista/javadoc/markista/model/Reference/#tostring","title":"toString","text":"<p>public String toString()</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/","title":"Text.Segment","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#class-textsegment","title":"Class Text.Segment","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.Segment  All Implemented Interfaces: java.io.Serializable</p> <p>Enclosing Class: io.github.sandydunlop.markista.model.Text</p> <p>public static class Text.Segment</p> <p>Represents a segment of the Text with its kind, content, and optional link.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private Text.SegmentKind kind The kind/type of this segment. private String text The textual content of this segment. private Reference link The associated link if the segment represents a link."},{"location":"markista/javadoc/markista/model/Text.Segment/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.Segment() Private constructor to restrict instantiation."},{"location":"markista/javadoc/markista/model/Text.Segment/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static Text.Segment empty() Creates an empty segment instance. public Text.Segment setKind(Text.SegmentKind k) Sets the kind of this segment. public Text.SegmentKind getKind() Returns the kind of this segment. public String toString() Returns the string representation of this segment. public Text.Segment setText(String text) Sets the text content of this segment. public String getText() Returns the text content of this segment. public Text.Segment setLink(Reference link) Sets the link value of this segment. public Reference getLink() Returns the link associated with this segment."},{"location":"markista/javadoc/markista/model/Text.Segment/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Text.Segment/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#kind","title":"kind","text":"<p>The kind/type of this segment.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#text","title":"text","text":"<p>The textual content of this segment.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#link","title":"link","text":"<p>The associated link if the segment represents a link.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Text.Segment/#empty","title":"empty","text":"<p>public static Text.Segment empty()</p> <p>Creates an empty segment instance.</p> <p>Returns:</p> <p>A new empty Segment object.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#setkind","title":"setKind","text":"<p>public Text.Segment setKind(Text.SegmentKind k)</p> <p>Sets the kind of this segment.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#getkind","title":"getKind","text":"<p>public Text.SegmentKind getKind()</p> <p>Returns the kind of this segment.</p> <p>Returns:</p> <p>The current SegmentKind.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#tostring","title":"toString","text":"<p>public String toString()</p> <p>Returns the string representation of this segment. If text is null or empty, returns the link value.</p> <p>Returns:</p> <p>The text or link of this segment.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#settext","title":"setText","text":"<p>public Text.Segment setText(String text)</p> <p>Sets the text content of this segment.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#gettext","title":"getText","text":"<p>public String getText()</p> <p>Returns the text content of this segment.</p> <p>Returns:</p> <p>The text string.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#setlink","title":"setLink","text":"<p>public Text.Segment setLink(Reference link)</p> <p>Sets the link value of this segment.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/Text.Segment/#getlink","title":"getLink","text":"<p>public Reference getLink()</p> <p>Returns the link associated with this segment.</p> <p>Returns:</p> <p>The link reference.</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/","title":"Text.SegmentKind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#enum-class-textsegmentkind","title":"Enum Class Text.SegmentKind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Text.SegmentKind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.SegmentKind  Enclosing Class: io.github.sandydunlop.markista.model.Text</p> <p>public static final enum class Text.SegmentKind</p> <p>Enum class that defines different kinds of segments for Text.</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE TEXT LINK CODE"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.SegmentKind()"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.Text.SegmentKind[] values() public static Text.SegmentKind valueOf(String name)"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#none","title":"NONE","text":"<p>public static final NONE NONE</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#text","title":"TEXT","text":"<p>public static final TEXT TEXT</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#link","title":"LINK","text":"<p>public static final LINK LINK</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#code","title":"CODE","text":"<p>public static final CODE CODE</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.Text.SegmentKind[] values()</p>"},{"location":"markista/javadoc/markista/model/Text.SegmentKind/#valueof","title":"valueOf","text":"<p>public static Text.SegmentKind valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/Text/","title":"Text","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/Text/#class-text","title":"Class Text","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text  All Implemented Interfaces: java.io.Serializable</p> <p>public class Text</p> <p>Represents a block of text. Text stores the text as a list of segments which can be of kind text, markdown, link, or code for easy retrieval and manipulation.</p>"},{"location":"markista/javadoc/markista/model/Text/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public static Text.Segment Represents a segment of the Text with its kind, content, and optional link."},{"location":"markista/javadoc/markista/model/Text/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final long serialVersionUID private List&lt;Text.Segment&gt; segments List of text segments composing this Text instance."},{"location":"markista/javadoc/markista/model/Text/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text() Private constructor to prevent external instantiation."},{"location":"markista/javadoc/markista/model/Text/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static Text empty() Creates an empty Text instance. public static Text of(String string) Creates a Text object containing the supplied string value public static Text of(Text.Segment segment) Creates a Text object containing the supplied segment value public String toString() Returns the combined string representation of all segments. public boolean isEmpty() Checks whether this Text instance is empty. public List&lt;Text.Segment&gt; getSegments() Returns the list of segments composing this Text. public Text.Segment getSegment(int n) public void set(Text text) Sets the segments of this Text to match another Text. public Text append(Text.Segment segment) Appends a single segment to this Text. public Text append(String text) Appends a single text segment to this Text. public Text append(Text text) Appends all segments from another Text instance."},{"location":"markista/javadoc/markista/model/Text/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/Text/#serialversionuid","title":"serialVersionUID","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/model/Text/#segments","title":"segments","text":"<p>List of text segments composing this Text instance.</p>"},{"location":"markista/javadoc/markista/model/Text/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/Text/#empty","title":"empty","text":"<p>public static Text empty()</p> <p>Creates an empty Text instance.</p> <p>Returns:</p> <p>A new empty Text object.</p>"},{"location":"markista/javadoc/markista/model/Text/#of","title":"of","text":"<p>public static Text of(String string)</p> <p>Creates a Text object containing the supplied string value</p> <p>Returns:</p> <p>A Text object representing the string</p>"},{"location":"markista/javadoc/markista/model/Text/#of_1","title":"of","text":"<p>public static Text of(Text.Segment segment)</p> <p>Creates a Text object containing the supplied segment value</p> <p>Returns:</p> <p>A Text object representing the segment</p>"},{"location":"markista/javadoc/markista/model/Text/#tostring","title":"toString","text":"<p>public String toString()</p> <p>Returns the combined string representation of all segments.</p> <p>Returns:</p> <p>Concatenated string of all segment texts.</p>"},{"location":"markista/javadoc/markista/model/Text/#isempty","title":"isEmpty","text":"<p>public boolean isEmpty()</p> <p>Checks whether this Text instance is empty.</p> <p>Returns:</p> <p>true if there are no segments or the segment list is null.</p>"},{"location":"markista/javadoc/markista/model/Text/#getsegments","title":"getSegments","text":"<p>public List&lt;Text.Segment&gt; getSegments()</p> <p>Returns the list of segments composing this Text.</p> <p>Returns:</p> <p>List of Text.Segment objects.</p>"},{"location":"markista/javadoc/markista/model/Text/#getsegment","title":"getSegment","text":"<p>public Text.Segment getSegment(int n)</p>"},{"location":"markista/javadoc/markista/model/Text/#set","title":"set","text":"<p>public void set(Text text)</p> <p>Sets the segments of this Text to match another Text.</p>"},{"location":"markista/javadoc/markista/model/Text/#append","title":"append","text":"<p>public Text append(Text.Segment segment)</p> <p>Appends a single segment to this Text.</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/Text/#append_1","title":"append","text":"<p>public Text append(String text)</p> <p>Appends a single text segment to this Text.</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/Text/#append_2","title":"append","text":"<p>public Text append(Text text)</p> <p>Appends all segments from another Text instance.</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/","title":"TypeNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#enum-class-typenodekind","title":"Enum Class TypeNode.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.TypeNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode.Kind  Enclosing Class: io.github.sandydunlop.markista.model.TypeNode</p> <p>public static final enum class TypeNode.Kind</p> <p>Enumeration representing kinds of types: None, Class, Interface, Enum, Annotation.</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE CLASS INTERFACE RECORD ENUM ANNOTATION"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name The display name for the kind."},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode.Kind(String s) Constructor assigning the display name."},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.model.TypeNode.Kind[] values() public static TypeNode.Kind valueOf(String name) public String toString() Returns the display name of the kind."},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#none","title":"NONE","text":"<p>public static final NONE NONE</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#class","title":"CLASS","text":"<p>public static final CLASS CLASS</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#interface","title":"INTERFACE","text":"<p>public static final INTERFACE INTERFACE</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#record","title":"RECORD","text":"<p>public static final RECORD RECORD</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#enum","title":"ENUM","text":"<p>public static final ENUM ENUM</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#annotation","title":"ANNOTATION","text":"<p>public static final ANNOTATION ANNOTATION</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#name","title":"name","text":"<p>The display name for the kind.</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.model.TypeNode.Kind[] values()</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#valueof","title":"valueOf","text":"<p>public static TypeNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/markista/model/TypeNode.Kind/#tostring","title":"toString","text":"<p>public String toString()</p> <p>Returns the display name of the kind.</p> <p>Overrides:</p> <p>Enum&lt;TypeNode.Kind&gt;.toString</p>"},{"location":"markista/javadoc/markista/model/TypeNode/","title":"TypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#class-typenode","title":"Class TypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractPackageMember io.github.sandydunlop.markista.model.PackageOrTypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode  All Implemented Interfaces: io.github.sandydunlop.markista.model.TypeView</p> <p>public class TypeNode</p> <p>Represents a type in the API model, including its kind (class, interface, enum, annotation), supertypes, implemented interfaces, constructors, methods, fields, ownership, and relevant metadata.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected String sourcePath private String owner The owner of this type, usually another type or module. private Reference enclosingClassRef private final List&lt;AppliedAnnotationNode&gt; appliedAnnotations List of annotations applied to this type. private List&lt;Reference&gt; implementedInterfaces List of qualified names of interfaces implemented by this type. private List&lt;Pair&lt;Reference, Text&gt;&gt; supertypes List of qualified names of this type's supertypes. private String arrayBrackets String representation of array brackets if this type is an array (e.g., <code>[]</code>). private final List&lt;MethodNode&gt; constructors List of constructor methods belonging to this type. private final List&lt;MethodNode&gt; methods List of methods belonging to this type. private final List&lt;FieldNode&gt; fields List of fields belonging to this type. protected TypeNode.Kind kind The kind of this type (e.g., class, interface, enum, annotation). private boolean hasDocumentedAnnotation Has the <code>@Documented</code> annotation applied"},{"location":"markista/javadoc/markista/model/TypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode(String qualifiedName, String simpleName, String packageName) Constructs a TypeNode with the specified qualified name, simple name, and package."},{"location":"markista/javadoc/markista/model/TypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public boolean isClass() public boolean isInterface() public boolean isEnum() public boolean isRecord() public boolean isAnnotation() public String getKindName() public void setSourcePath(String path) public String getSourcePath() public void setArrayBrackets(String brackets) Sets the array brackets representation for this type. public String getArrayBrackets() Returns the array brackets representation for this type. public void addAppliedAnnotation(AppliedAnnotationNode annotation) Adds an applied annotation to this type public List&lt;AppliedAnnotationNode&gt; getAppliedAnnotations() Returns the list of annotations applied to this type. public void setImplementedInterfaces(List&lt;Reference&gt; implementedInterfaces) Sets the list of implemented interfaces by qualified names. public List&lt;Pair&lt;Reference, Text&gt;&gt; getSupertypes() Returns the list of supertypes by qualified names. public List&lt;Reference&gt; getImplementedInterfaces() Returns the list of implemented interfaces by qualified names. public void setOwner(String owner) Sets the owner of this type. public String getOwner() Returns the owner of this type. public String getPackageName() Returns the package name for this type. public void setKind(TypeNode.Kind kind) Sets the kind (class, interface, enum, annotation) of this type. public TypeNode.Kind getKind() Returns the kind of this type. public void addMethod(MethodNode method) Adds a method to this type. public List&lt;MethodNode&gt; getMethods() Returns the list of methods of this type. public void addConstructor(MethodNode constructor) Adds a constructor method to this type. public List&lt;MethodNode&gt; getConstructors() Returns the list of constructors of this type. public void addField(FieldNode field) Adds a field to this type. public List&lt;FieldNode&gt; getFields() Returns the list of fields of this type. public void setHasDocumentedAnnotation(boolean b) Sets a flag indicating if this type as having a <code>@Documented</code> meta-annotation public boolean hasDocumentedAnnotation() Does this type have a <code>@Documented</code> meta-annotation? public void setEnclosingClassRef(Reference ref) public Reference getEnclosingClassRef() public FieldNode getField(String fieldName) Retrieves a field by its simple name. public MethodNode getMethod(MethodNode method) Retrieves a method matching the signature of a given MethodNode. public MethodNode getConstructor(MethodNode method) Retrieves a constructor matching the signature of a given MethodNode. public String getModifiersString() Returns a string representation of modifiers."},{"location":"markista/javadoc/markista/model/TypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/model/TypeNode/#sourcepath","title":"sourcePath","text":""},{"location":"markista/javadoc/markista/model/TypeNode/#owner","title":"owner","text":"<p>The owner of this type, usually another type or module.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#enclosingclassref","title":"enclosingClassRef","text":""},{"location":"markista/javadoc/markista/model/TypeNode/#appliedannotations","title":"appliedAnnotations","text":"<p>List of annotations applied to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#implementedinterfaces","title":"implementedInterfaces","text":"<p>List of qualified names of interfaces implemented by this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#supertypes","title":"supertypes","text":"<p>List of qualified names of this type's supertypes.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#arraybrackets","title":"arrayBrackets","text":"<p>String representation of array brackets if this type is an array (e.g., <code>[]</code>).</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#constructors","title":"constructors","text":"<p>List of constructor methods belonging to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#methods","title":"methods","text":"<p>List of methods belonging to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#fields","title":"fields","text":"<p>List of fields belonging to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#kind","title":"kind","text":"<p>The kind of this type (e.g., class, interface, enum, annotation).</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#hasdocumentedannotation","title":"hasDocumentedAnnotation","text":"<p>Has the <code>@Documented</code> annotation applied</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/TypeNode/#isclass","title":"isClass","text":"<p>public boolean isClass()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#isinterface","title":"isInterface","text":"<p>public boolean isInterface()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#isenum","title":"isEnum","text":"<p>public boolean isEnum()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#isrecord","title":"isRecord","text":"<p>public boolean isRecord()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#isannotation","title":"isAnnotation","text":"<p>public boolean isAnnotation()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getkindname","title":"getKindName","text":"<p>public String getKindName()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setsourcepath","title":"setSourcePath","text":"<p>public void setSourcePath(String path)</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getsourcepath","title":"getSourcePath","text":"<p>public String getSourcePath()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setarraybrackets","title":"setArrayBrackets","text":"<p>public void setArrayBrackets(String brackets)</p> <p>Sets the array brackets representation for this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getarraybrackets","title":"getArrayBrackets","text":"<p>public String getArrayBrackets()</p> <p>Returns the array brackets representation for this type.</p> <p>Returns:</p> <p>string representing array dimension brackets.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#addappliedannotation","title":"addAppliedAnnotation","text":"<p>public void addAppliedAnnotation(AppliedAnnotationNode annotation)</p> <p>Adds an applied annotation to this type</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getappliedannotations","title":"getAppliedAnnotations","text":"<p>public List&lt;AppliedAnnotationNode&gt; getAppliedAnnotations()</p> <p>Returns the list of annotations applied to this type.</p> <p>Returns:</p> <p>list of applied annotations</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setimplementedinterfaces","title":"setImplementedInterfaces","text":"<p>public void setImplementedInterfaces(List&lt;Reference&gt; implementedInterfaces)</p> <p>Sets the list of implemented interfaces by qualified names.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getsupertypes","title":"getSupertypes","text":"<p>public List&lt;Pair&lt;Reference, Text&gt;&gt; getSupertypes()</p> <p>Returns the list of supertypes by qualified names.</p> <p>Returns:</p> <p>list of qualified supertype names.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getimplementedinterfaces","title":"getImplementedInterfaces","text":"<p>public List&lt;Reference&gt; getImplementedInterfaces()</p> <p>Returns the list of implemented interfaces by qualified names.</p> <p>Returns:</p> <p>list of qualified interface names.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setowner","title":"setOwner","text":"<p>public void setOwner(String owner)</p> <p>Sets the owner of this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getowner","title":"getOwner","text":"<p>public String getOwner()</p> <p>Returns the owner of this type.</p> <p>Returns:</p> <p>the TypeOwner that owns this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getpackagename","title":"getPackageName","text":"<p>public String getPackageName()</p> <p>Returns the package name for this type.</p> <p>Returns:</p> <p>qualified package name, or null if no package node.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setkind","title":"setKind","text":"<p>public void setKind(TypeNode.Kind kind)</p> <p>Sets the kind (class, interface, enum, annotation) of this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getkind","title":"getKind","text":"<p>public TypeNode.Kind getKind()</p> <p>Returns the kind of this type.</p> <p>Returns:</p> <p>the Kind enum value.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#addmethod","title":"addMethod","text":"<p>public void addMethod(MethodNode method)</p> <p>Adds a method to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getmethods","title":"getMethods","text":"<p>public List&lt;MethodNode&gt; getMethods()</p> <p>Returns the list of methods of this type.</p> <p>Returns:</p> <p>list of MethodNode instances.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#addconstructor","title":"addConstructor","text":"<p>public void addConstructor(MethodNode constructor)</p> <p>Adds a constructor method to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getconstructors","title":"getConstructors","text":"<p>public List&lt;MethodNode&gt; getConstructors()</p> <p>Returns the list of constructors of this type.</p> <p>Returns:</p> <p>list of MethodNode constructors.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#addfield","title":"addField","text":"<p>public void addField(FieldNode field)</p> <p>Adds a field to this type.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getfields","title":"getFields","text":"<p>public List&lt;FieldNode&gt; getFields()</p> <p>Returns the list of fields of this type.</p> <p>Returns:</p> <p>list of FieldNode instances.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#sethasdocumentedannotation","title":"setHasDocumentedAnnotation","text":"<p>public void setHasDocumentedAnnotation(boolean b)</p> <p>Sets a flag indicating if this type as having a <code>@Documented</code> meta-annotation</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#hasdocumentedannotation_1","title":"hasDocumentedAnnotation","text":"<p>public boolean hasDocumentedAnnotation()</p> <p>Does this type have a <code>@Documented</code> meta-annotation?</p> <p>Returns:</p> <p>True if it has a <code>@Documented</code> meta-annotation</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#setenclosingclassref","title":"setEnclosingClassRef","text":"<p>public void setEnclosingClassRef(Reference ref)</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getenclosingclassref","title":"getEnclosingClassRef","text":"<p>public Reference getEnclosingClassRef()</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getfield","title":"getField","text":"<p>public FieldNode getField(String fieldName)</p> <p>Retrieves a field by its simple name.</p> <p>Returns:</p> <p>the FieldNode if found, otherwise null.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getmethod","title":"getMethod","text":"<p>public MethodNode getMethod(MethodNode method)</p> <p>Retrieves a method matching the signature of a given MethodNode.</p> <p>Returns:</p> <p>the matching MethodNode if found, otherwise null.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getconstructor","title":"getConstructor","text":"<p>public MethodNode getConstructor(MethodNode method)</p> <p>Retrieves a constructor matching the signature of a given MethodNode.</p> <p>Returns:</p> <p>the matching constructor MethodNode if found, otherwise null.</p>"},{"location":"markista/javadoc/markista/model/TypeNode/#getmodifiersstring","title":"getModifiersString","text":"<p>public String getModifiersString()</p> <p>Returns a string representation of modifiers. The modifiers are sorted according to a predefined order.</p> <p>Returns:</p> <p>A string containing sorted modifiers separated by spaces.</p> <p>Overrides:</p> <p>io.github.sandydunlop.markista.model.AbstractPackageMember.getModifiersString.getModifiersString</p>"},{"location":"markista/javadoc/markista/model/TypeView/","title":"TypeView","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/markista/model/TypeView/#interface-typeview","title":"Interface TypeView","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeView </p> <p>public interface TypeView</p> <p>Minimal view of a type used by PackageOrTypeNode. Does not reference TypeNode to avoid cycles.</p>"},{"location":"markista/javadoc/markista/model/TypeView/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public abstract String getQualifiedName() public abstract String getSimpleName() public abstract String getModifiersString() public abstract String getKindName() public abstract Text getFirstSentence() public abstract void sort() public abstract boolean isClass() public abstract boolean isInterface() public abstract boolean isEnum() public abstract boolean isRecord() public abstract boolean isAnnotation()"},{"location":"markista/javadoc/markista/model/TypeView/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/model/TypeView/#getqualifiedname","title":"getQualifiedName","text":"<p>public abstract String getQualifiedName()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#getsimplename","title":"getSimpleName","text":"<p>public abstract String getSimpleName()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#getmodifiersstring","title":"getModifiersString","text":"<p>public abstract String getModifiersString()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#getkindname","title":"getKindName","text":"<p>public abstract String getKindName()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#getfirstsentence","title":"getFirstSentence","text":"<p>public abstract Text getFirstSentence()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#sort","title":"sort","text":"<p>public abstract void sort()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#isclass","title":"isClass","text":"<p>public abstract boolean isClass()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#isinterface","title":"isInterface","text":"<p>public abstract boolean isInterface()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#isenum","title":"isEnum","text":"<p>public abstract boolean isEnum()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#isrecord","title":"isRecord","text":"<p>public abstract boolean isRecord()</p>"},{"location":"markista/javadoc/markista/model/TypeView/#isannotation","title":"isAnnotation","text":"<p>public abstract boolean isAnnotation()</p>"},{"location":"markista/javadoc/markista/spi/","title":"Package io.github.sandydunlop.markista.spi","text":"<p>Service interface for extensions</p> Interfaces Class Description DocService This interface defines a service for processing a project's structure and documentation with the  Markista markdown doclet."},{"location":"markista/javadoc/markista/spi/DocService/","title":"DocService","text":"<p>Package io.github.sandydunlop.markista.spi</p>"},{"location":"markista/javadoc/markista/spi/DocService/#interface-docservice","title":"Interface DocService","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.spi.DocService </p> <p>public interface DocService</p> <p>This interface defines a service for processing a project's structure and documentation with the  Markista markdown doclet.  The DocService interface is part of the Service Provider Interface (SPI) design pattern, which allows for the dynamic discovery and loading of service implementations at runtime.</p> <p>Implementations of this interface can be created to provide various algorithms or strategies for processing project structures and documentation. By adhering to this SPI, developers can extend the functionality of Markista without modifying its core codebase, promoting a modular and flexible architecture.</p> <p>Additionally, this interface is designed to work seamlessly with the Java Platform Module System (JPMS), which  enhances the modularity of Java applications. JPMS allows for better encapsulation and management of dependencies, enabling developers to create well-defined modules that can interact with the Markista framework. This modular approach facilitates the integration of third-party services and custom implementations, ensuring that they can be easily added or replaced as needed.</p> <p>When the structure (including documentation) is processed by Markista, it is subsequently passed into the DocService's <code>run</code> method, where custom processing logic can be executed. This design makes it easier to  maintain and extend the documentation processing capabilities of Markista.</p>"},{"location":"markista/javadoc/markista/spi/DocService/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public abstract boolean replacesDefault() Returns true if this Docservice replaces the default DocService. public abstract boolean start(Api api, Context ctx) Runs before the main Markdown DocService. public abstract boolean finish() Runs after the main Markdown DocService."},{"location":"markista/javadoc/markista/spi/DocService/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/spi/DocService/#replacesdefault","title":"replacesDefault","text":"<p>public abstract boolean replacesDefault()</p> <p>Returns true if this Docservice replaces the default DocService.</p> <p>Returns:</p> <p>true if this DocService replaces the default Markdown one, false otherwise.</p>"},{"location":"markista/javadoc/markista/spi/DocService/#start","title":"start","text":"<p>public abstract boolean start(Api api, Context ctx)</p> <p>Runs before the main Markdown DocService. Initializes a DocService with the API model and a Context for file creation and reporting.</p> <p>Returns:</p> <p>true on success, otheriwse false</p>"},{"location":"markista/javadoc/markista/spi/DocService/#finish","title":"finish","text":"<p>public abstract boolean finish()</p> <p>Runs after the main Markdown DocService.</p> <p>Returns:</p> <p>true on success, otheriwse false</p>"},{"location":"markista/javadoc/markista/util/","title":"Package io.github.sandydunlop.markista.util","text":"<p>This package contains utility methods used by other packages.</p> Classes Class Description TypeUtils Utility class providing static methods to create and manipulate TypeNodes, MethodNodes, FieldNodes, and other API model objects from language model elements and Javadoc doc trees obtained from the Java source code. MarkdownParser Parses a Markdown string into a sequence of tokens representing text and special markup such as brackets and parentheses. Utils A set of utility methods for changing between qualified and unqualified names. ModuleDirectives A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive  objects scanned by the ApiScanner. Markdown A utility class for producing Markdown formatted text and resolving Markdown links to point to the correct file, directory, or web page. LinkFormatter ApiScanner A scanner that walks the language model elements provided by the Javadoc doclet  environment and builds an Api model representing the discovered modules, packages, types, and members. LinkResolver <code>LinkResolver</code> calculates the paths for Markdown documents to link between different packages and to URLs of external packages and their contents."},{"location":"markista/javadoc/markista/util/ApiScanner/","title":"ApiScanner","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#class-apiscanner","title":"Class ApiScanner","text":"<p>java.lang.Object javax.lang.model.util.AbstractElementVisitor6&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner6&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner7&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner8&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner9&lt;java.lang.Void, java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.ApiScanner </p> <p>public class ApiScanner</p> <p>A scanner that walks the language model elements provided by the Javadoc doclet  environment and builds an Api model representing the discovered modules, packages, types, and members. The scanner delegates most element-to-model conversion logic to TypeUtils, and it records a set of included element names so filtering can be applied when only a subset of elements should be documented.</p> <p>This class extends ElementScanner9 so it can visit elements in source order and recursively walk nested elements. The scanner keeps track of the current ModuleNode being populated and updates the Api instance as elements are encountered.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final Context ctx The shared Context singleton providing logging and configuration access. Api api The Api model being populated by this scanner. private final DocletEnvironment environment The doclet environment used to obtain Javadoc doc trees and element utilities. private final ModuleNode unnamedModule The unnamed module node reprsenting package elements not in an explicit module. private ModuleNode currentModule The module node currently being populated during a scan. HashSet&lt;String&gt; includedNames A set of fully-qualified names (packages and types) included in the scan invocation."},{"location":"markista/javadoc/markista/util/ApiScanner/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ApiScanner(DocletEnvironment environment) Initializes the ApiScanner with access to the doclet environment."},{"location":"markista/javadoc/markista/util/ApiScanner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public Api scan(Set&lt;? extends Element&gt; elements) Scan the given set of top-level elements and return the built Api model. private void processIncludedElements(Set&lt;? extends Element&gt; elements) Populate the includedNames set from the provided element set. boolean isIncludedElement(String qualifiedName) Check whether an element with the given qualifiedName was explicitly included in the Javadoc invocation (via the elements set passed to the doclet). boolean isIncludedElement(Element e) Determine whether an Element should be treated as included by looking up the enclosing type name and checking the includedNames set. private void calculateUnnamedModuleSourcePath() Derive an appropriate source root for the unnamed module by inspecting the source path of the first package contained in the unnamed module. public Void scan(Element e, Integer depth) public Void visitModule(ModuleElement e, Integer depth) Visit a module element and create or reuse a ModuleNode for it. public Void visitPackage(PackageElement ee, Integer depth) Visit a package element and, if it was included, create a PackageNode and attach it to the current module and to the Api model. public Void visitType(TypeElement e, Integer depth) Visit a type element (class/interface/enum/annotation) and create a TypeNode representation if the type is included and TypeUtils considers it part of the API. public Void visitExecutable(ExecutableElement ee, Integer depth) Visit an executable element (method or constructor), convert it to a MethodNode if included, and populate Javadoc-derived fields such as first sentence, body, return description, references and since information using TypeUtils helpers. public Void visitVariable(VariableElement ve, Integer depth) Visit a variable element and, if it is a field included in the API, convert it to a FieldNode, record any constant value, and populate documentation and modifiers. public Void visitTypeParameter(TypeParameterElement e, Integer depth) Visit a type parameter. public Void visitRecordComponent(RecordComponentElement e, Integer depth) Visit a record component. public File getModuleInfoFile(ModuleElement moduleElement) Retrieve the module-info.java file for the given ModuleElement if available."},{"location":"markista/javadoc/markista/util/ApiScanner/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/ApiScanner/#ctx","title":"ctx","text":"<p>The shared Context singleton providing logging and configuration access.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#api","title":"api","text":"<p>The Api model being populated by this scanner.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#environment","title":"environment","text":"<p>The doclet environment used to obtain Javadoc doc trees and element utilities.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#unnamedmodule","title":"unnamedModule","text":"<p>The unnamed module node reprsenting package elements not in an explicit module.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#currentmodule","title":"currentModule","text":"<p>The module node currently being populated during a scan. private ModuleNode currentModule;</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#includednames","title":"includedNames","text":"<p>A set of fully-qualified names (packages and types) included in the scan invocation.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/ApiScanner/#scan","title":"scan","text":"<p>public Api scan(Set&lt;? extends Element&gt; elements)</p> <p>Scan the given set of top-level elements and return the built Api model. This method performs setup actions (register included elements, initialize TypeUtils with the Api and environment), executes the scan, performs some post-processing (constant value reference collection, annotation marking), computes the unnamed module source path and sorts the final Api model.</p> <p>Returns:</p> <p>the fully-populated Api model</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#processincludedelements","title":"processIncludedElements","text":"<p>private void processIncludedElements(Set&lt;? extends Element&gt; elements)</p> <p>Populate the includedNames set from the provided element set. Only package and type elements contribute names. The set is used by isIncludedElement to quickly decide if an element should be processed.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#isincludedelement","title":"isIncludedElement","text":"<p>boolean isIncludedElement(String qualifiedName)</p> <p>Check whether an element with the given qualifiedName was explicitly included in the Javadoc invocation (via the elements set passed to the doclet).</p> <p>Returns:</p> <p>true if the qualifiedName is present in the includedNames set</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#isincludedelement_1","title":"isIncludedElement","text":"<p>boolean isIncludedElement(Element e)</p> <p>Determine whether an Element should be treated as included by looking up the enclosing type name and checking the includedNames set. This overload is used for members whose direct qualified name is not directly present in includedNames but whose enclosing type may have been included.</p> <p>Returns:</p> <p>true if the element's enclosing type was included in the elements set</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#calculateunnamedmodulesourcepath","title":"calculateUnnamedModuleSourcePath","text":"<p>private void calculateUnnamedModuleSourcePath()</p> <p>Derive an appropriate source root for the unnamed module by inspecting the source path of the first package contained in the unnamed module. If the unnamed module contains no packages this is a no-op.</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#scan_1","title":"scan","text":"<p>public Void scan(Element e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.scan</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visitmodule","title":"visitModule","text":"<p>public Void visitModule(ModuleElement e, Integer depth)</p> <p>Visit a module element and create or reuse a ModuleNode for it. The module's module-info.java presence and source path are discovered, directives are added, and the module is registered with the Api model.</p> <p>Overrides:</p> <p>ElementScanner9&lt;Void, Integer&gt;.visitModule</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visitpackage","title":"visitPackage","text":"<p>public Void visitPackage(PackageElement ee, Integer depth)</p> <p>Visit a package element and, if it was included, create a PackageNode and attach it to the current module and to the Api model. Package source path and documentation are configured via TypeUtils helpers.</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.visitPackage</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visittype","title":"visitType","text":"<p>public Void visitType(TypeElement e, Integer depth)</p> <p>Visit a type element (class/interface/enum/annotation) and create a TypeNode representation if the type is included and TypeUtils considers it part of the API. This also records the source file path when available.</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.visitType</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visitexecutable","title":"visitExecutable","text":"<p>public Void visitExecutable(ExecutableElement ee, Integer depth)</p> <p>Visit an executable element (method or constructor), convert it to a MethodNode if included, and populate Javadoc-derived fields such as first sentence, body, return description, references and since information using TypeUtils helpers.</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.visitExecutable</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visitvariable","title":"visitVariable","text":"<p>public Void visitVariable(VariableElement ve, Integer depth)</p> <p>Visit a variable element and, if it is a field included in the API, convert it to a FieldNode, record any constant value, and populate documentation and modifiers.</p> <p>Overrides:</p> <p>ElementScanner7&lt;Void, Integer&gt;.visitVariable</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visittypeparameter","title":"visitTypeParameter","text":"<p>public Void visitTypeParameter(TypeParameterElement e, Integer depth)</p> <p>Visit a type parameter. This method delegates to scanning of enclosed elements so that bounds and other nested elements are visited.</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.visitTypeParameter</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#visitrecordcomponent","title":"visitRecordComponent","text":"<p>public Void visitRecordComponent(RecordComponentElement e, Integer depth)</p> <p>Visit a record component.</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt;.visitRecordComponent</p>"},{"location":"markista/javadoc/markista/util/ApiScanner/#getmoduleinfofile","title":"getModuleInfoFile","text":"<p>public File getModuleInfoFile(ModuleElement moduleElement)</p> <p>Retrieve the module-info.java file for the given ModuleElement if available. This helper inspects the JavaFileObject associated with the module and returns a File when the file name ends with \"module-info.java\".</p> <p>Returns:</p> <p>a File pointing to the module-info.java source or null if none found</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/","title":"LinkFormatter","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#class-linkformatter","title":"Class LinkFormatter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkFormatter </p> <p>public class LinkFormatter</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Context ctx private static Api api"},{"location":"markista/javadoc/markista/util/LinkFormatter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkFormatter()"},{"location":"markista/javadoc/markista/util/LinkFormatter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void generateLinkTexts(Api a, Context context) Generates Text objects for links to types and links in Javadoc text. static void processTypeNode(TypeNode typeNode) static void processMethod(MethodNode method) static void processModules(Api api) static void processJavadocComments(Api api) static void generateLinkTextsForParams(List&lt;ParamNode&gt; params) private static void generateLinkTextsForReferences(Node node) public static Text link(Reference reference, boolean useQualifiedName) Create a markdown link, automatically deciding what kind of link to make. private static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean useQualifiedName) private static boolean canBeSimplified(Reference link) public static String escape(String str) Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>. public static Text linkGenerics(String str, boolean useQualifiedName) Changes qualified generic type names to unqualified generic  type names and adds links to their API documentation. public static Text splitAndLink(String typesString, boolean useQualifiedName) Creates markdown formatted text with links to types from a string."},{"location":"markista/javadoc/markista/util/LinkFormatter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/LinkFormatter/#ctx","title":"ctx","text":""},{"location":"markista/javadoc/markista/util/LinkFormatter/#api","title":"api","text":""},{"location":"markista/javadoc/markista/util/LinkFormatter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/LinkFormatter/#generatelinktexts","title":"generateLinkTexts","text":"<p>public static void generateLinkTexts(Api a, Context context)</p> <p>Generates Text objects for links to types and links in Javadoc text. This is where we decide if the label for those links shows qualified names or simplified names.</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#processtypenode","title":"processTypeNode","text":"<p>static void processTypeNode(TypeNode typeNode)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#processmethod","title":"processMethod","text":"<p>static void processMethod(MethodNode method)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#processmodules","title":"processModules","text":"<p>static void processModules(Api api)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#processjavadoccomments","title":"processJavadocComments","text":"<p>static void processJavadocComments(Api api)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#generatelinktextsforparams","title":"generateLinkTextsForParams","text":"<p>static void generateLinkTextsForParams(List&lt;ParamNode&gt; params)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#generatelinktextsforreferences","title":"generateLinkTextsForReferences","text":"<p>private static void generateLinkTextsForReferences(Node node)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#link","title":"link","text":"<p>public static Text link(Reference reference, boolean useQualifiedName)</p> <p>Create a markdown link, automatically deciding what kind of link to make.</p> <p>Returns:</p> <p>markdown formatted link</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#setdisplayname","title":"setDisplayName","text":"<p>private static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean useQualifiedName)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#canbesimplified","title":"canBeSimplified","text":"<p>private static boolean canBeSimplified(Reference link)</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#escape","title":"escape","text":"<p>public static String escape(String str)</p> <p>Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>.</p> <p>Returns:</p> <p>The escaped string</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#linkgenerics","title":"linkGenerics","text":"<p>public static Text linkGenerics(String str, boolean useQualifiedName)</p> <p>Changes qualified generic type names to unqualified generic  type names and adds links to their API documentation.</p> <p>Returns:</p> <p>A Text object with the qualified names changed to unqualified            names and links to types added</p>"},{"location":"markista/javadoc/markista/util/LinkFormatter/#splitandlink","title":"splitAndLink","text":"<p>public static Text splitAndLink(String typesString, boolean useQualifiedName)</p> <p>Creates markdown formatted text with links to types from a string. containing one or more types separated by commas.</p> <p>Returns:</p> <p>a list of links to types formatted as Markdown</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/","title":"LinkResolver","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#class-linkresolver","title":"Class LinkResolver","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkResolver </p> <p>public class LinkResolver</p> <p><code>LinkResolver</code> calculates the paths for Markdown documents to link between different packages and to URLs of external packages and their contents.</p> <p>This class manages resolving references and generating links for types, packages, modules, and native Java elements.</p> <p>It supports resolving primitives, void, native Java modules and packages, and also local API model packages and types.</p> <p>LinkResolver must be initialized for the current API before use via <code>init(Api)</code>. It provides multiple resolve methods for building appropriate links.</p> <p>The class supports relative path calculation for Markdown output. It also manages native Java documentation URLs for modules and packages.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String DOT_CLASS static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private static final String DOT_HTML private static final String JAVA_24_URL private static final List&lt;String&gt; primitives private static final ModuleLayer moduleLayer private static HashMap&lt;String, String&gt; nativeModuleNames private static HashMap&lt;String, String&gt; nativePackageNames private static HashMap&lt;String, String&gt; suffix static List&lt;String&gt; siblingModules static Map&lt;String, String&gt; classToModule static String siblingModuleName static Set&lt;String&gt; siblingClassNames private static Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation. private static String flattenedDirectories"},{"location":"markista/javadoc/markista/util/LinkResolver/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkResolver() The default constructor is private to prevent instantiation."},{"location":"markista/javadoc/markista/util/LinkResolver/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void init(Api a, Context c) Initializes the LinkResolver for the API being documented. public static void setFlattenedDirectories(String sd) Sets the string used to adjust flattened directories in relative path calculations. public static void addNativeModuleUrl(String moduleName, String baseUrl, String s) Adds a native module URL base for linking native Java modules and their packages. private static String getPackageName(String id) Extracts the package name part from an identifier string, assuming lowercase start for package. private static String getClassName(String id) Extracts the class name part from an identifier string, assuming uppercase start for class. public static Reference resolve(Reference link) Resolves a link reference. static Reference resolveUnsupported(Reference link) Checks if the target is unsupported by the <code>LinkResolver</code>. static boolean resolvePrimitiveOrVoid(Reference link) Checks if the target is a primitive type or void. public static [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] qualifyType(String name) Returns canonical package and class names for a given type name, ensuring both parts are qualified. static boolean resolveNativePackageOrType(Reference link) Resolves a native Java package or type to an external documentation URL. private static boolean resolveNativePackageTypeInternal(Reference link, String toPackageName, String toClassName) static boolean resolveLocalPackageOrType(Reference link) Resolves a local package or type within the documented API to a relative link. static boolean resolveLocalPackageTypeInternal(Reference link, String toPackageName, String toClassName) static void addClassToReference(String className, Reference link) Appends the class name to the URI on the Reference and sets kind TYPE if not URL. static boolean resolveLocalModule(Reference link) Resolves a module reference by name to a Reference either local or native. static boolean resolveSiblingModule(Reference link) Attempts to resolve the link as a sibling module relative to the current context. static boolean resolveSiblingType(Reference link) Attempts to resolve the link as a sibling type relative to the current context. static ModuleNode getModule(String moduleName) Returns the ModuleNode for the named module in the current API. static boolean isPackageQualified(String name) Checks if a package name is qualified (contains a dot). public static String qualifyPackage(String simpleName) Qualifies a simple package name to its fully qualified name within the API, if exists. public static String relativize(String to) Produces a relative path from the current package context to a target package. static String relativizeWithModules(String from, String to) Produces a relative path considering modules between two packages. static String relativizeWithSiblingModule(String from, String to, String toModule) Computes a relative path from the current package context, considering sibling modules. public static String relativize(String from, String to) Produces a relative path string from one package to another by splitting and comparing components. static String flattenDirectory(String path) Removes prefix directories from a path if flattenedDirectories is set and matches. static int findCommonIndex([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] fromParts, [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] toParts) Finds the common prefix index between two string arrays. static void appendParentDirs(StringBuilder rel, int count) Appends parent directory segments <code>..</code> to the relative path string builder. static void appendTargetDirs(StringBuilder rel, [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] toParts, int start) Appends target directory segments to the relative path string builder starting at index start. static void configureSiblingModules() Configures the known sibling modules for link resolution, typically loading their info. static void processDirectory(File directory) static void processDirectoryUrl(File directory, [URL](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/net/URL.html)[] urls) static void processClassFile(File directory, File file, URLClassLoader classLoader) static void processJarFile(JarFile jarFile) Processes a JAR file to extract module and package information relevant for sibling module linking. static void addNativeModule(String moduleName) Adds a native Java module URL for linking purposes using a standard Oracle Javadoc base URL. public static void addNativeModules() Adds known native modules for Java SE 24 to the resolver."},{"location":"markista/javadoc/markista/util/LinkResolver/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#dot_class","title":"DOT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#dot_html","title":"DOT_HTML","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#java_24_url","title":"JAVA_24_URL","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#primitives","title":"primitives","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#modulelayer","title":"moduleLayer","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#nativemodulenames","title":"nativeModuleNames","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#nativepackagenames","title":"nativePackageNames","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#suffix","title":"suffix","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#siblingmodules","title":"siblingModules","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#classtomodule","title":"classToModule","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#siblingmodulename","title":"siblingModuleName","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#siblingclassnames","title":"siblingClassNames","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#flatteneddirectories","title":"flattenedDirectories","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/LinkResolver/#init","title":"init","text":"<p>public static void init(Api a, Context c)</p> <p>Initializes the LinkResolver for the API being documented.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#setflatteneddirectories","title":"setFlattenedDirectories","text":"<p>public static void setFlattenedDirectories(String sd)</p> <p>Sets the string used to adjust flattened directories in relative path calculations.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#addnativemoduleurl","title":"addNativeModuleUrl","text":"<p>public static void addNativeModuleUrl(String moduleName, String baseUrl, String s)</p> <p>Adds a native module URL base for linking native Java modules and their packages.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String id)</p> <p>Extracts the package name part from an identifier string, assuming lowercase start for package.</p> <p>Returns:</p> <p>The package name portion or empty string if not a package.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#getclassname","title":"getClassName","text":"<p>private static String getClassName(String id)</p> <p>Extracts the class name part from an identifier string, assuming uppercase start for class.</p> <p>Returns:</p> <p>The class name portion or empty string if none found.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolve","title":"resolve","text":"<p>public static Reference resolve(Reference link)</p> <p>Resolves a link reference. The supplied <code>link</code> parameter must specify the target of the link: a class, a module, etc. If the link can be resolved,  the details of the type of link are set in the <code>link</code> object before it is returned.</p> <p>Returns:</p> <p>The <code>link</code> with its <code>uri</code> field set, or its <code>kind</code> field set to <code>UNKNOWN</code> if the link was not able to be resolved.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolveunsupported","title":"resolveUnsupported","text":"<p>static Reference resolveUnsupported(Reference link)</p> <p>Checks if the target is unsupported by the <code>LinkResolver</code>.</p> <p>Returns:</p> <p>A <code>Reference</code> with <code>Reference.Kind.UNKNOWN</code> if unsupported, else <code>Reference.Kind.NONE</code>.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolveprimitiveorvoid","title":"resolvePrimitiveOrVoid","text":"<p>static boolean resolvePrimitiveOrVoid(Reference link)</p> <p>Checks if the target is a primitive type or void.</p> <p>Returns:</p> <p>True if the reference resolved to primitive or void, else false.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#qualifytype","title":"qualifyType","text":"<p>public static [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] qualifyType(String name)</p> <p>Returns canonical package and class names for a given type name, ensuring both parts are qualified.</p> <p>Returns:</p> <p>A String array: {packageName, className}.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvenativepackageortype","title":"resolveNativePackageOrType","text":"<p>static boolean resolveNativePackageOrType(Reference link)</p> <p>Resolves a native Java package or type to an external documentation URL.</p> <p>Returns:</p> <p>True if the reference resolved to a native package or type.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvenativepackagetypeinternal","title":"resolveNativePackageTypeInternal","text":"<p>private static boolean resolveNativePackageTypeInternal(Reference link, String toPackageName, String toClassName)</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvelocalpackageortype","title":"resolveLocalPackageOrType","text":"<p>static boolean resolveLocalPackageOrType(Reference link)</p> <p>Resolves a local package or type within the documented API to a relative link.</p> <p>Returns:</p> <p>True if the reference resolved to a local package or type.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvelocalpackagetypeinternal","title":"resolveLocalPackageTypeInternal","text":"<p>static boolean resolveLocalPackageTypeInternal(Reference link, String toPackageName, String toClassName)</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#addclasstoreference","title":"addClassToReference","text":"<p>static void addClassToReference(String className, Reference link)</p> <p>Appends the class name to the URI on the Reference and sets kind TYPE if not URL.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvelocalmodule","title":"resolveLocalModule","text":"<p>static boolean resolveLocalModule(Reference link)</p> <p>Resolves a module reference by name to a Reference either local or native.</p> <p>Returns:</p> <p>True if the reference resolved to a local module.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvesiblingmodule","title":"resolveSiblingModule","text":"<p>static boolean resolveSiblingModule(Reference link)</p> <p>Attempts to resolve the link as a sibling module relative to the current context.</p> <p>Returns:</p> <p>True if the reference resolved to a sibling module.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#resolvesiblingtype","title":"resolveSiblingType","text":"<p>static boolean resolveSiblingType(Reference link)</p> <p>Attempts to resolve the link as a sibling type relative to the current context.</p> <p>Returns:</p> <p>True if the reference resolved to a sibling type.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#getmodule","title":"getModule","text":"<p>static ModuleNode getModule(String moduleName)</p> <p>Returns the ModuleNode for the named module in the current API.</p> <p>Returns:</p> <p>The ModuleNode if found, else null.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#ispackagequalified","title":"isPackageQualified","text":"<p>static boolean isPackageQualified(String name)</p> <p>Checks if a package name is qualified (contains a dot).</p> <p>Returns:</p> <p>True if the name is qualified, false otherwise.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#qualifypackage","title":"qualifyPackage","text":"<p>public static String qualifyPackage(String simpleName)</p> <p>Qualifies a simple package name to its fully qualified name within the API, if exists.</p> <p>Returns:</p> <p>The fully qualified package name or empty string if not found.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#relativize","title":"relativize","text":"<p>public static String relativize(String to)</p> <p>Produces a relative path from the current package context to a target package.</p> <p>Returns:</p> <p>A relative filesystem path string.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#relativizewithmodules","title":"relativizeWithModules","text":"<p>static String relativizeWithModules(String from, String to)</p> <p>Produces a relative path considering modules between two packages. If packages belong to different modules, the relative path includes module directories.</p> <p>Returns:</p> <p>The relative path string.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#relativizewithsiblingmodule","title":"relativizeWithSiblingModule","text":"<p>static String relativizeWithSiblingModule(String from, String to, String toModule)</p> <p>Computes a relative path from the current package context, considering sibling modules.</p> <p>Returns:</p> <p>The relative path string including sibling module base if applicable.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#relativize_1","title":"relativize","text":"<p>public static String relativize(String from, String to)</p> <p>Produces a relative path string from one package to another by splitting and comparing components. Supports flattened directories if set.</p> <p>Returns:</p> <p>The relative path string.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#flattendirectory","title":"flattenDirectory","text":"<p>static String flattenDirectory(String path)</p> <p>Removes prefix directories from a path if flattenedDirectories is set and matches.</p> <p>Returns:</p> <p>The adjusted path or original if no flattening applies.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#findcommonindex","title":"findCommonIndex","text":"<p>static int findCommonIndex([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] fromParts, [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] toParts)</p> <p>Finds the common prefix index between two string arrays.</p> <p>Returns:</p> <p>The number of common leading segments.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#appendparentdirs","title":"appendParentDirs","text":"<p>static void appendParentDirs(StringBuilder rel, int count)</p> <p>Appends parent directory segments <code>..</code> to the relative path string builder.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#appendtargetdirs","title":"appendTargetDirs","text":"<p>static void appendTargetDirs(StringBuilder rel, [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html)[] toParts, int start)</p> <p>Appends target directory segments to the relative path string builder starting at index start.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#configuresiblingmodules","title":"configureSiblingModules","text":"<p>static void configureSiblingModules()</p> <p>Configures the known sibling modules for link resolution, typically loading their info. This method updates internal structures to recognize sibling modules for proper linking.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#processdirectory","title":"processDirectory","text":"<p>static void processDirectory(File directory)</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#processdirectoryurl","title":"processDirectoryUrl","text":"<p>static void processDirectoryUrl(File directory, [URL](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/net/URL.html)[] urls)</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#processclassfile","title":"processClassFile","text":"<p>static void processClassFile(File directory, File file, URLClassLoader classLoader)</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#processjarfile","title":"processJarFile","text":"<p>static void processJarFile(JarFile jarFile)</p> <p>Processes a JAR file to extract module and package information relevant for sibling module linking.</p> <p>Throws:</p> <p>java.io.IOException</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#addnativemodule","title":"addNativeModule","text":"<p>static void addNativeModule(String moduleName)</p> <p>Adds a native Java module URL for linking purposes using a standard Oracle Javadoc base URL.</p>"},{"location":"markista/javadoc/markista/util/LinkResolver/#addnativemodules","title":"addNativeModules","text":"<p>public static void addNativeModules()</p> <p>Adds known native modules for Java SE 24 to the resolver. This populates internal mappings for native module and package documentation URLs.</p>"},{"location":"markista/javadoc/markista/util/Markdown/","title":"Markdown","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/Markdown/#class-markdown","title":"Class Markdown","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Markdown </p> <p>public class Markdown</p> <p>A utility class for producing Markdown formatted text and resolving Markdown links to point to the correct file, directory, or web page.</p>"},{"location":"markista/javadoc/markista/util/Markdown/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String FORMAT_SIMPLE_LINK private static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities."},{"location":"markista/javadoc/markista/util/Markdown/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Markdown()"},{"location":"markista/javadoc/markista/util/Markdown/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void setContext(Context c) public static String fullSignature(MethodNode method) Formats the signature of a method as markdown. public static String formatParams(List&lt;ParamNode&gt; params) Formats a list of <code>ParamNode</code> objects as markdown, identifying and linking type names. public static String formatText(Text text) Formats text contained in a <code>Text</code> object as markdown. public static String formatLink(Text.Segment segment) Formats links contained in a text segment as markdown. public static String link(Reference reference, boolean useQualifiedName) Create a markdown formatted link static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean useQualifiedName) private static boolean canBeSimplified(Reference link) public static String mdRefLink(Reference link) Creates a markdown formatted link from a Reference object. public static String mdRefLinkMethod(Reference link) Creates a markdown formatted link from a Reference object. public static String mdAnchor(String phrase) Converts a string to the format required for use as a Markdown anchor. public static String mdAnchorLink(String phrase) Create a markdown formatted link to an anchor within the same markdown page. public static String mdDocumentLink(String docName) Creates a Markdown link to another Markdown document public static String escape(String str) Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>."},{"location":"markista/javadoc/markista/util/Markdown/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/Markdown/#format_simple_link","title":"FORMAT_SIMPLE_LINK","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markista/util/Markdown/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markista/util/Markdown/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/Markdown/#setcontext","title":"setContext","text":"<p>public static void setContext(Context c)</p>"},{"location":"markista/javadoc/markista/util/Markdown/#fullsignature","title":"fullSignature","text":"<p>public static String fullSignature(MethodNode method)</p> <p>Formats the signature of a method as markdown.</p> <p>Returns:</p> <p>Markdown formatted text representing the method's signature</p>"},{"location":"markista/javadoc/markista/util/Markdown/#formatparams","title":"formatParams","text":"<p>public static String formatParams(List&lt;ParamNode&gt; params)</p> <p>Formats a list of <code>ParamNode</code> objects as markdown, identifying and linking type names.</p> <p>Returns:</p> <p>Markdown formatted text containing a link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#formattext","title":"formatText","text":"<p>public static String formatText(Text text)</p> <p>Formats text contained in a <code>Text</code> object as markdown.</p> <p>Returns:</p> <p>Markdown formatted text</p>"},{"location":"markista/javadoc/markista/util/Markdown/#formatlink","title":"formatLink","text":"<p>public static String formatLink(Text.Segment segment)</p> <p>Formats links contained in a text segment as markdown.</p> <p>Returns:</p> <p>Markdown formatted text with a resolved link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#link","title":"link","text":"<p>public static String link(Reference reference, boolean useQualifiedName)</p> <p>Create a markdown formatted link</p> <p>Returns:</p> <p>markdown formatted link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#setdisplayname","title":"setDisplayName","text":"<p>static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean useQualifiedName)</p>"},{"location":"markista/javadoc/markista/util/Markdown/#canbesimplified","title":"canBeSimplified","text":"<p>private static boolean canBeSimplified(Reference link)</p>"},{"location":"markista/javadoc/markista/util/Markdown/#mdreflink","title":"mdRefLink","text":"<p>public static String mdRefLink(Reference link)</p> <p>Creates a markdown formatted link from a Reference object.</p> <p>Returns:</p> <p>a markdown formatted link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#mdreflinkmethod","title":"mdRefLinkMethod","text":"<p>public static String mdRefLinkMethod(Reference link)</p> <p>Creates a markdown formatted link from a Reference object. with the option of simplifying qualified type names.</p> <p>Returns:</p> <p>a markdown formatted link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#mdanchor","title":"mdAnchor","text":"<p>public static String mdAnchor(String phrase)</p> <p>Converts a string to the format required for use as a Markdown anchor. Converted strings will be lowercase and contain no spaces.</p> <p>Returns:</p> <p>The string converted to match the format required by Markdown anchor links</p>"},{"location":"markista/javadoc/markista/util/Markdown/#mdanchorlink","title":"mdAnchorLink","text":"<p>public static String mdAnchorLink(String phrase)</p> <p>Create a markdown formatted link to an anchor within the same markdown page.</p> <p>Returns:</p> <p>Markdown formatted text containing a correctly formatted anchor link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#mddocumentlink","title":"mdDocumentLink","text":"<p>public static String mdDocumentLink(String docName)</p> <p>Creates a Markdown link to another Markdown document</p> <p>Returns:</p> <p>The Markdown formatted link</p>"},{"location":"markista/javadoc/markista/util/Markdown/#escape","title":"escape","text":"<p>public static String escape(String str)</p> <p>Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>.</p> <p>Returns:</p> <p>The escaped string</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/","title":"MarkdownParser.Token","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#class-markdownparsertoken","title":"Class MarkdownParser.Token","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser.Token  Enclosing Class: io.github.sandydunlop.markista.util.MarkdownParser</p> <p>public class MarkdownParser.Token</p> <p>Represents a token of the parsed Markdown input. A token has a kind and associated text content, and links to the next token in sequence.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description MarkdownParser.Token next MarkdownParser.TokenKind kind String text"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser.Token(MarkdownParser.TokenKind k) Creates a token with the specified kind."},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public MarkdownParser.TokenKind getKind() Returns the token kind. public void setText(String t) Sets the text content of the token. public String getText() Returns the text content of the token. public void setNext(MarkdownParser.Token token) Sets the next token in the sequence. public MarkdownParser.Token getNext() Returns the next token, or an END token if none exists."},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#next","title":"next","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#kind","title":"kind","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#text","title":"text","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#getkind","title":"getKind","text":"<p>public MarkdownParser.TokenKind getKind()</p> <p>Returns the token kind.</p> <p>Returns:</p> <p>The token kind.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#settext","title":"setText","text":"<p>public void setText(String t)</p> <p>Sets the text content of the token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#gettext","title":"getText","text":"<p>public String getText()</p> <p>Returns the text content of the token.</p> <p>Returns:</p> <p>The text string.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#setnext","title":"setNext","text":"<p>public void setNext(MarkdownParser.Token token)</p> <p>Sets the next token in the sequence.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.Token/#getnext","title":"getNext","text":"<p>public MarkdownParser.Token getNext()</p> <p>Returns the next token, or an END token if none exists.</p> <p>Returns:</p> <p>The next token or an END token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/","title":"MarkdownParser.TokenKind","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#enum-class-markdownparsertokenkind","title":"Enum Class MarkdownParser.TokenKind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.util.MarkdownParser.TokenKind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser.TokenKind  Enclosing Class: io.github.sandydunlop.markista.util.MarkdownParser</p> <p>public static final enum class MarkdownParser.TokenKind</p> <p>Enum representing the kind of a Markdown token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE TEXT BRACKETS_TAG PARENS_TAG END"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser.TokenKind()"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static io.github.sandydunlop.markista.util.MarkdownParser.TokenKind[] values() public static MarkdownParser.TokenKind valueOf(String name)"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#none","title":"NONE","text":"<p>public static final NONE NONE</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#text","title":"TEXT","text":"<p>public static final TEXT TEXT</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#brackets_tag","title":"BRACKETS_TAG","text":"<p>public static final BRACKETS_TAG BRACKETS_TAG</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#parens_tag","title":"PARENS_TAG","text":"<p>public static final PARENS_TAG PARENS_TAG</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#end","title":"END","text":"<p>public static final END END</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#values","title":"values","text":"<p>public static io.github.sandydunlop.markista.util.MarkdownParser.TokenKind[] values()</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser.TokenKind/#valueof","title":"valueOf","text":"<p>public static MarkdownParser.TokenKind valueOf(String name)</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/","title":"MarkdownParser","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#class-markdownparser","title":"Class MarkdownParser","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser </p> <p>public class MarkdownParser</p> <p>Parses a Markdown string into a sequence of tokens representing text and special markup such as brackets and parentheses.</p> <p>This parser is designed to tokenize the Markdown content by identifying textual parts and tokens enclosed in brackets <code>[]</code> and parentheses <code>()</code>. It also handles inline code spans denoted by backticks (`) to avoid parsing markup inside code.</p> <p>The parsed tokens can be iterated in sequence starting from the firstToken() method. Each token carries its type (kind) which specifies how it should be interpreted or rendered.</p> <p>Token kinds include TEXT for normal text, BRACKETS_TAG for content inside square brackets, PARENS_TAG for content inside parentheses following brackets (typical Markdown link syntax), and END indicating the end of the sequence.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description public MarkdownParser.Token Represents a token of the parsed Markdown input."},{"location":"markista/javadoc/markista/util/MarkdownParser/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private int head private int tail int openBracket int openParenthesis int closeBracket int closeParenthesis private String markdown private final List&lt;MarkdownParser.Token&gt; tokens private MarkdownParser.Token prev"},{"location":"markista/javadoc/markista/util/MarkdownParser/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser(String md) Creates a new MarkdownParser and immediately parses the provided Markdown string."},{"location":"markista/javadoc/markista/util/MarkdownParser/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description private void processCharInGeneral() Handles a character encountered when not in code or special markup. private void handleOpenBracket() Handles the open bracket 'Handles the open bracket '[' encountered in the markdown. private boolean handleOpenParenthesis(char prevChar) Handles an open parenthesis '(' encountered immediately after closing bracket ''. private void handleCloseBracket() Handles the close bracket '' encountered in the markdown. private boolean handleCloseParenthesis(boolean parensFollowBrackets) Handles the close parenthesis ')' encountered. private void saveText() Saves any text from the tail position up to the current head as a TEXT token. private void saveBracketsTag() Saves the content between the most recent pair of brackets as a BRACKETS_TAG token. private void saveParensTag() Saves the content between the most recent pair of parentheses as a PARENS_TAG token. private void saveToken(MarkdownParser.Token token) Adds the specified token to the list and links it to the previously saved token. public MarkdownParser.Token firstToken() Returns the first token in the parsed sequence."},{"location":"markista/javadoc/markista/util/MarkdownParser/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#head","title":"head","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#tail","title":"tail","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#openbracket","title":"openBracket","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#openparenthesis","title":"openParenthesis","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#closebracket","title":"closeBracket","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#closeparenthesis","title":"closeParenthesis","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#markdown","title":"markdown","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#tokens","title":"tokens","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#prev","title":"prev","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/MarkdownParser/#processcharingeneral","title":"processCharInGeneral","text":"<p>private void processCharInGeneral()</p> <p>Handles a character encountered when not in code or special markup. Currently a placeholder for any general character processing.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#handleopenbracket","title":"handleOpenBracket","text":"<p>private void handleOpenBracket()</p> <p>Handles the open bracket 'Handles the open bracket '[' encountered in the markdown. Saves any preceding text token before marking the position of the open bracket.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#handleopenparenthesis","title":"handleOpenParenthesis","text":"<p>private boolean handleOpenParenthesis(char prevChar)</p> <p>Handles an open parenthesis '(' encountered immediately after closing bracket ''.</p> <p>Returns:</p> <p>true if parentheses follow brackets, false otherwise.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#handleclosebracket","title":"handleCloseBracket","text":"<p>private void handleCloseBracket()</p> <p>Handles the close bracket '' encountered in the markdown. Records the position and saves a bracket-tag token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#handlecloseparenthesis","title":"handleCloseParenthesis","text":"<p>private boolean handleCloseParenthesis(boolean parensFollowBrackets)</p> <p>Handles the close parenthesis ')' encountered. If parentheses follow brackets, saves a parentheses-tag token.</p> <p>Returns:</p> <p>Always returns false to reset parsing state for parentheses.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#savetext","title":"saveText","text":"<p>private void saveText()</p> <p>Saves any text from the tail position up to the current head as a TEXT token. Does nothing if no text is available in that range.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#savebracketstag","title":"saveBracketsTag","text":"<p>private void saveBracketsTag()</p> <p>Saves the content between the most recent pair of brackets as a BRACKETS_TAG token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#saveparenstag","title":"saveParensTag","text":"<p>private void saveParensTag()</p> <p>Saves the content between the most recent pair of parentheses as a PARENS_TAG token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#savetoken","title":"saveToken","text":"<p>private void saveToken(MarkdownParser.Token token)</p> <p>Adds the specified token to the list and links it to the previously saved token.</p>"},{"location":"markista/javadoc/markista/util/MarkdownParser/#firsttoken","title":"firstToken","text":"<p>public MarkdownParser.Token firstToken()</p> <p>Returns the first token in the parsed sequence. If no tokens exist, returns an END kind token.</p> <p>Returns:</p> <p>The first token or an END token if none exist.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/","title":"ModuleDirectives","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#class-moduledirectives","title":"Class ModuleDirectives","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.ModuleDirectives </p> <p>public class ModuleDirectives</p> <p>A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive  objects scanned by the ApiScanner.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static DocletEnvironment environment"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleDirectives()"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void setEnvironment(DocletEnvironment env) Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements. public static DirectiveNode createFrom(ModuleElement.Directive directive) Creates a DirectiveNode to encapsulate the information provided by a module directive element. public static DirectiveNode createRequiresDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a requires directive. public static DirectiveNode createExportsDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an exports directive. public static DirectiveNode createOpensDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an opens directive. public static DirectiveNode createUsesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a uses directive. public static DirectiveNode createProvidesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a provides directive."},{"location":"markista/javadoc/markista/util/ModuleDirectives/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/ModuleDirectives/#environment","title":"environment","text":""},{"location":"markista/javadoc/markista/util/ModuleDirectives/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/ModuleDirectives/#setenvironment","title":"setEnvironment","text":"<p>public static void setEnvironment(DocletEnvironment env)</p> <p>Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createfrom","title":"createFrom","text":"<p>public static DirectiveNode createFrom(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode to encapsulate the information provided by a module directive element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createrequiresdirective","title":"createRequiresDirective","text":"<p>public static DirectiveNode createRequiresDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a requires directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createexportsdirective","title":"createExportsDirective","text":"<p>public static DirectiveNode createExportsDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an exports directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createopensdirective","title":"createOpensDirective","text":"<p>public static DirectiveNode createOpensDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an opens directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createusesdirective","title":"createUsesDirective","text":"<p>public static DirectiveNode createUsesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a uses directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/ModuleDirectives/#createprovidesdirective","title":"createProvidesDirective","text":"<p>public static DirectiveNode createProvidesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a provides directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/markista/util/TestREcord/","title":"TestREcord","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#record-class-testrecord","title":"Record Class TestREcord","text":"<p>java.lang.Object java.lang.Record \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.TestREcord </p> <p>public final record class TestREcord</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final long id private final String name"},{"location":"markista/javadoc/markista/util/TestREcord/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TestREcord(long id, String name)"},{"location":"markista/javadoc/markista/util/TestREcord/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public final String toString() Returns a string representation of this record class. public final int hashCode() Returns a hash code value for this object. public final boolean equals(Object o) Indicates whether some other object is \"equal to\" this one. public long id() Returns the value of the <code>id</code> record component. public String name() Returns the value of the <code>name</code> record component."},{"location":"markista/javadoc/markista/util/TestREcord/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/TestREcord/#id","title":"id","text":""},{"location":"markista/javadoc/markista/util/TestREcord/#name","title":"name","text":""},{"location":"markista/javadoc/markista/util/TestREcord/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/TestREcord/#tostring","title":"toString","text":"<p>public final String toString()</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#hashcode","title":"hashCode","text":"<p>public final int hashCode()</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#equals","title":"equals","text":"<p>public final boolean equals(Object o)</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#id_1","title":"id","text":"<p>public long id()</p>"},{"location":"markista/javadoc/markista/util/TestREcord/#name_1","title":"name","text":"<p>public String name()</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/","title":"TypeUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#class-typeutils","title":"Class TypeUtils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.TypeUtils </p> <p>public class TypeUtils</p> <p>Utility class providing static methods to create and manipulate TypeNodes, MethodNodes, FieldNodes, and other API model objects from language model elements and Javadoc doc trees obtained from the Java source code.</p> <p>This class bridges the Java language model and the internal API representation used for generating documentation. It includes methods to extract element details, ownership, modifiers, supertypes, interfaces, annotations, and documentation text.</p> <p>The TypeUtils class must be initialized with an Api and DocletEnvironment before usage via the init(Api, DocletEnvironment) method.</p> <p>It provides numerous helper methods to process types, methods, fields, annotations, and project structure metadata.</p> <p>Methods also support handling Javadoc comment trees to extract detailed documentation fragments such as @deprecated, @param, @return, @since, and @see tags.</p> <p>The class works internally with the Api model for cross-referencing and linking discovered elements.</p> <p>This class is for internal use within the documentation generator and is not thread-safe.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private static DocletEnvironment environment private static Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation."},{"location":"markista/javadoc/markista/util/TypeUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeUtils()"},{"location":"markista/javadoc/markista/util/TypeUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static void init(Api a, DocletEnvironment e) Initializes this utility class to use the given API model and Doclet environment. public static TypeNode nodeFromElement(TypeElement element) Creates or retrieves a TypeNode from the supplied TypeElement. public static void setEnumConstants(EnumTypeNode enumNode, TypeElement e) Reads enum constants from the TypeElement and adds them as FieldNodes to the EnumNode. public static MethodNode nodeFromElement(ExecutableElement element) Creates a MethodNode representation from the ExecutableElement element (method or constructor). public static FieldNode nodeFromElement(VariableElement element) Creates a FieldNode representation from the VariableElement element representing a field. public static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind) Factory method to create TypeNode (ClassTypeNode, InterfaceTypeNode, RecordTypeNode, EnumTypeNode, or AnnotationTypeNode) based on ElementKind. public static Text createText(List&lt;? extends DocTree&gt; dtList) Creates a complete Text object by traversing a list of DocTree nodes from the Javadoc comment. public static Text docTreeToText(DocTree docTree) Creates a Text object from a DocTree node, setting the appropriate kind and content. public static Text markdownToText(String markdown) Converts Markdown text into a Text object public static String getDocTreeText(DocTree docTree, int start) Extracts text from a DocTree to build a string from a part of its tokenized representation. public static String getDocTreePart(DocTree docTree, int n) Extracts a specific part (token) from a DocTree's toString representation. public static boolean setMethodOwnerDetails(MethodNode methodNode, PackageNode packageNode, ExecutableElement element) public static void setSourcePath(TypeNode typeNode, TypeElement element) public static void setDocumentation(Node node, Element e) Sets documentation text for a Node based on the doc comment tree attached to a language model element. public static void setTypeOwnership(TypeNode typeNode, TypeElement element) Sets ownership of a TypeNode based on its enclosing type or package. public static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement) Sets annotations on the MethodNode, in particular looks for @Override annotation to set overridden methods. public static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement) Checks implemented interfaces of a method's owning type, and sets \"specifiedBy\" on the method if it implements an interface method. public static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement) Recursively searches for an overridden method matching the supplied method within the supertypes of its owner. public static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement) Searches the given TypeElement for a method matching the supplied ExecutableElement\\u2019s name. public static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method) Attempts to find an overridden method defined in native Java classes (e.g., from runtime classes). public static void addConstantFieldValuesReference(ModuleNode moduleNode) Adds references to constant field values from classes in the API to the provided module node. public static boolean isInterface(TypeMirror typeMirror) Returns true if the TypeMirror represents an interface. public static void findImplementedInterfaces(TypeElement typeElement, List&lt;Reference&gt; result) Finds all interfaces implemented directly by the given TypeElement and adds their names to the result list. public static void collectAllSupertypes(TypeMirror t, List&lt;Pair&lt;Reference, Text&gt;&gt; result) Collects all supertypes (classes) of the specified type recursively and adds them to the result list. public static DeprecatedTree getDeprecation(DocCommentTree docComment) Finds the DeprecatedTree from a Javadoc DocCommentTree if present. public static ReturnTree getReturnTree(DocCommentTree dcTree) Finds the @return tag from a Javadoc DocCommentTree if present. public static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter) Finds the @param tag in a DocCommentTree matching the specified parameter variable. public static List&lt;Reference&gt; getReferences(DocCommentTree dcTree) Extracts a list of Reference objects representing occurrences of @see tags in the Javadoc comment. public static Text getSince(DocCommentTree dcTree) Extracts the @since tag content from a DocCommentTree, if present. public static String getUrl(String html) Extracts a URL string from html-like text, e.g., from an href attribute inside double-quotes. public static void setModifiers(AbstractPackageMember node, Set&lt;Modifier&gt; modifiers) Adds modifiers to a model Node based on the set of language model modifiers. public static void setAppliedAnnotations(TypeNode node, TypeElement elem) Adds applied annotations to a TypeNode. public static void setAppliedAnnotation(TypeNode node, AnnotationMirror annotationMirror) Adds an applied annotation to a TypeNode. public static void markCustomAnnotations() Iterates over all annotations in the API, identifying ones that are custom and those that have the <code>@Documented</code> meta-annotation and marking them as such. public static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes) Adds list of thrown types (exceptions) to a MethodNode based on Java model type mirrors. public static void setDeprecationStatus(Node node, Element e, DocCommentTree dct) Sets the deprecation status of a Node based on element annotations and Javadoc @deprecated tag. public static boolean isIncludedInApi(Element e) Returns true if the element should be included in the public API documentation based on its modifiers and configuration. public static void setMethodParams(MethodNode methodNode, ExecutableElement ee) Sets the parameters on a MethodNode by inspecting the ExecutableElement and its doc comment tags. public static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations) Adds implementation type names to a DirectiveNode. public static TypeNode getFieldType(String className, String fieldName) Gets the field type as a TypeNode for the specified class name and field name. public static TypeNode getParamType(ExecutableElement method, String fieldName) Gets the parameter type as a TypeNode for the specified parameter name in the method. private static String getPackageName(String qualifiedTypeName) Extracts the package name from a qualified type name. public static PackageElement getEnclosingPackageElement(Element element) Recursively finds the enclosing PackageElement of a given element. public static TypeElement getEnclosingTypeElement(Element element) Recursively finds the enclosing TypeElement (class, interface, enum, record, annotation) for the given element. public static void setPackageSourcePath(PackageNode pkg, PackageElement ee) public static File getPackageInfoFile(PackageElement packageElement) Retrieves the <code>package-info.java</code> file associated with the specified  PackageElement. public static void addJavadocToRecords(Api api)"},{"location":"markista/javadoc/markista/util/TypeUtils/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markista/util/TypeUtils/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#environment","title":"environment","text":""},{"location":"markista/javadoc/markista/util/TypeUtils/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/TypeUtils/#init","title":"init","text":"<p>public static void init(Api a, DocletEnvironment e)</p> <p>Initializes this utility class to use the given API model and Doclet environment. Sets up internal references and context necessary for subsequent operations.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#nodefromelement","title":"nodeFromElement","text":"<p>public static TypeNode nodeFromElement(TypeElement element)</p> <p>Creates or retrieves a TypeNode from the supplied TypeElement. This method extracts type details such as qualified name, package, kind, ownership, modifiers, supertypes, and interfaces, adds the new TypeNode to the API model, and returns it.</p> <p>Returns:</p> <p>The corresponding TypeNode in the API model, or null if unsupported or error occurs.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setenumconstants","title":"setEnumConstants","text":"<p>public static void setEnumConstants(EnumTypeNode enumNode, TypeElement e)</p> <p>Reads enum constants from the TypeElement and adds them as FieldNodes to the EnumNode.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#nodefromelement_1","title":"nodeFromElement","text":"<p>public static MethodNode nodeFromElement(ExecutableElement element)</p> <p>Creates a MethodNode representation from the ExecutableElement element (method or constructor). Sets return type, parameters, modifiers, thrown exceptions, ownership, and annotations. Adds the method to the owning TypeNode's method or constructor list.</p> <p>Returns:</p> <p>The constructed MethodNode, or null if errors occur.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#nodefromelement_2","title":"nodeFromElement","text":"<p>public static FieldNode nodeFromElement(VariableElement element)</p> <p>Creates a FieldNode representation from the VariableElement element representing a field. Links the field to the owning TypeNode.</p> <p>Returns:</p> <p>The FieldNode, or null if errors occur.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#createtypenode","title":"createTypeNode","text":"<p>public static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind)</p> <p>Factory method to create TypeNode (ClassTypeNode, InterfaceTypeNode, RecordTypeNode, EnumTypeNode, or AnnotationTypeNode) based on ElementKind.</p> <p>Returns:</p> <p>A TypeNode instance corresponding to the kind, or null if unsupported.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#createtext","title":"createText","text":"<p>public static Text createText(List&lt;? extends DocTree&gt; dtList)</p> <p>Creates a complete Text object by traversing a list of DocTree nodes from the Javadoc comment.</p> <p>Returns:</p> <p>A Text object composed of segments derived from each DocTree node.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#doctreetotext","title":"docTreeToText","text":"<p>public static Text docTreeToText(DocTree docTree)</p> <p>Creates a Text object from a DocTree node, setting the appropriate kind and content.</p> <p>Returns:</p> <p>A Text object representing the content and kind of the provided DocTree.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#markdowntotext","title":"markdownToText","text":"<p>public static Text markdownToText(String markdown)</p> <p>Converts Markdown text into a Text object</p> <p>Returns:</p> <p>Text version of the Markdown</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getdoctreetext","title":"getDocTreeText","text":"<p>public static String getDocTreeText(DocTree docTree, int start)</p> <p>Extracts text from a DocTree to build a string from a part of its tokenized representation.</p> <p>Returns:</p> <p>A string representing the extracted part or empty string if extraction fails.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getdoctreepart","title":"getDocTreePart","text":"<p>public static String getDocTreePart(DocTree docTree, int n)</p> <p>Extracts a specific part (token) from a DocTree's toString representation.</p> <p>Returns:</p> <p>The extracted string part or empty string if out of range.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setmethodownerdetails","title":"setMethodOwnerDetails","text":"<p>public static boolean setMethodOwnerDetails(MethodNode methodNode, PackageNode packageNode, ExecutableElement element)</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setsourcepath","title":"setSourcePath","text":"<p>public static void setSourcePath(TypeNode typeNode, TypeElement element)</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setdocumentation","title":"setDocumentation","text":"<p>public static void setDocumentation(Node node, Element e)</p> <p>Sets documentation text for a Node based on the doc comment tree attached to a language model element. This populates first sentence, body, and full body texts.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#settypeownership","title":"setTypeOwnership","text":"<p>public static void setTypeOwnership(TypeNode typeNode, TypeElement element)</p> <p>Sets ownership of a TypeNode based on its enclosing type or package. Updates the ownership link and qualified names accordingly.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setmethodannotations","title":"setMethodAnnotations","text":"<p>public static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement)</p> <p>Sets annotations on the MethodNode, in particular looks for @Override annotation to set overridden methods.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setspecifiedby","title":"setSpecifiedBy","text":"<p>public static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement)</p> <p>Checks implemented interfaces of a method's owning type, and sets \"specifiedBy\" on the method if it implements an interface method.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>public static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement)</p> <p>Recursively searches for an overridden method matching the supplied method within the supertypes of its owner.</p> <p>Returns:</p> <p>An OverriddenMethodNode if a matching override is found, else null.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getoverriddenmethod_1","title":"getOverriddenMethod","text":"<p>public static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement)</p> <p>Searches the given TypeElement for a method matching the supplied ExecutableElement\\u2019s name.</p> <p>Returns:</p> <p>An OverriddenMethodNode if a match found, else null.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getoverriddennativemethod","title":"getOverriddenNativeMethod","text":"<p>public static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method)</p> <p>Attempts to find an overridden method defined in native Java classes (e.g., from runtime classes).</p> <p>Returns:</p> <p>An OverriddenMethodNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#addconstantfieldvaluesreference","title":"addConstantFieldValuesReference","text":"<p>public static void addConstantFieldValuesReference(ModuleNode moduleNode)</p> <p>Adds references to constant field values from classes in the API to the provided module node.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#isinterface","title":"isInterface","text":"<p>public static boolean isInterface(TypeMirror typeMirror)</p> <p>Returns true if the TypeMirror represents an interface.</p> <p>Returns:</p> <p>true if the type is an interface, false otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#findimplementedinterfaces","title":"findImplementedInterfaces","text":"<p>public static void findImplementedInterfaces(TypeElement typeElement, List&lt;Reference&gt; result)</p> <p>Finds all interfaces implemented directly by the given TypeElement and adds their names to the result list.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#collectallsupertypes","title":"collectAllSupertypes","text":"<p>public static void collectAllSupertypes(TypeMirror t, List&lt;Pair&lt;Reference, Text&gt;&gt; result)</p> <p>Collects all supertypes (classes) of the specified type recursively and adds them to the result list. java.lang.Object is excluded.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getdeprecation","title":"getDeprecation","text":"<p>public static DeprecatedTree getDeprecation(DocCommentTree docComment)</p> <p>Finds the DeprecatedTree from a Javadoc DocCommentTree if present.</p> <p>Returns:</p> <p>The DeprecatedTree if found, null otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getreturntree","title":"getReturnTree","text":"<p>public static ReturnTree getReturnTree(DocCommentTree dcTree)</p> <p>Finds the @return tag from a Javadoc DocCommentTree if present.</p> <p>Returns:</p> <p>The ReturnTree if found, null otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getparamtree","title":"getParamTree","text":"<p>public static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter)</p> <p>Finds the @param tag in a DocCommentTree matching the specified parameter variable.</p> <p>Returns:</p> <p>The matching ParamTree if found, null otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getreferences","title":"getReferences","text":"<p>public static List&lt;Reference&gt; getReferences(DocCommentTree dcTree)</p> <p>Extracts a list of Reference objects representing occurrences of @see tags in the Javadoc comment.</p> <p>Returns:</p> <p>A list of Reference objects extracted from @see tags.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getsince","title":"getSince","text":"<p>public static Text getSince(DocCommentTree dcTree)</p> <p>Extracts the @since tag content from a DocCommentTree, if present.</p> <p>Returns:</p> <p>A Text object representing @since content or an empty Text if none present.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#geturl","title":"getUrl","text":"<p>public static String getUrl(String html)</p> <p>Extracts a URL string from html-like text, e.g., from an href attribute inside double-quotes.</p> <p>Returns:</p> <p>The extracted URL inside quotes or null if none found.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setmodifiers","title":"setModifiers","text":"<p>public static void setModifiers(AbstractPackageMember node, Set&lt;Modifier&gt; modifiers)</p> <p>Adds modifiers to a model Node based on the set of language model modifiers.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setappliedannotations","title":"setAppliedAnnotations","text":"<p>public static void setAppliedAnnotations(TypeNode node, TypeElement elem)</p> <p>Adds applied annotations to a TypeNode.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setappliedannotation","title":"setAppliedAnnotation","text":"<p>public static void setAppliedAnnotation(TypeNode node, AnnotationMirror annotationMirror)</p> <p>Adds an applied annotation to a TypeNode.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#markcustomannotations","title":"markCustomAnnotations","text":"<p>public static void markCustomAnnotations()</p> <p>Iterates over all annotations in the API, identifying ones that are custom and those that have the <code>@Documented</code> meta-annotation and marking them as such.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setthrowntypes","title":"setThrownTypes","text":"<p>public static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes)</p> <p>Adds list of thrown types (exceptions) to a MethodNode based on Java model type mirrors.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setdeprecationstatus","title":"setDeprecationStatus","text":"<p>public static void setDeprecationStatus(Node node, Element e, DocCommentTree dct)</p> <p>Sets the deprecation status of a Node based on element annotations and Javadoc @deprecated tag.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#isincludedinapi","title":"isIncludedInApi","text":"<p>public static boolean isIncludedInApi(Element e)</p> <p>Returns true if the element should be included in the public API documentation based on its modifiers and configuration.</p> <p>Returns:</p> <p>true if element is public or protected or private member documentation is configured; false otherwise.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setmethodparams","title":"setMethodParams","text":"<p>public static void setMethodParams(MethodNode methodNode, ExecutableElement ee)</p> <p>Sets the parameters on a MethodNode by inspecting the ExecutableElement and its doc comment tags.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setimplementations","title":"setImplementations","text":"<p>public static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations)</p> <p>Adds implementation type names to a DirectiveNode.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getfieldtype","title":"getFieldType","text":"<p>public static TypeNode getFieldType(String className, String fieldName)</p> <p>Gets the field type as a TypeNode for the specified class name and field name.</p> <p>Returns:</p> <p>A TypeNode representing the field's type, or null if not found.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getparamtype","title":"getParamType","text":"<p>public static TypeNode getParamType(ExecutableElement method, String fieldName)</p> <p>Gets the parameter type as a TypeNode for the specified parameter name in the method.</p> <p>Returns:</p> <p>A TypeNode for the parameter's type, or null if not found.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String qualifiedTypeName)</p> <p>Extracts the package name from a qualified type name.</p> <p>Returns:</p> <p>The package name portion or null if input null.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getenclosingpackageelement","title":"getEnclosingPackageElement","text":"<p>public static PackageElement getEnclosingPackageElement(Element element)</p> <p>Recursively finds the enclosing PackageElement of a given element.</p> <p>Returns:</p> <p>The nearest enclosing PackageElement or null if none found.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getenclosingtypeelement","title":"getEnclosingTypeElement","text":"<p>public static TypeElement getEnclosingTypeElement(Element element)</p> <p>Recursively finds the enclosing TypeElement (class, interface, enum, record, annotation) for the given element.</p> <p>Returns:</p> <p>The enclosing TypeElement or null if none found.</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#setpackagesourcepath","title":"setPackageSourcePath","text":"<p>public static void setPackageSourcePath(PackageNode pkg, PackageElement ee)</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#getpackageinfofile","title":"getPackageInfoFile","text":"<p>public static File getPackageInfoFile(PackageElement packageElement)</p> <p>Retrieves the <code>package-info.java</code> file associated with the specified  PackageElement. This method checks if the package element has an  associated file and returns it as a File object.</p> <p>Returns:</p> <p>a File object representing the <code>package-info.java</code>         file if it exists; <code>null</code> if the file does not exist or is          not associated with the given package element</p>"},{"location":"markista/javadoc/markista/util/TypeUtils/#addjavadoctorecords","title":"addJavadocToRecords","text":"<p>public static void addJavadocToRecords(Api api)</p>"},{"location":"markista/javadoc/markista/util/Utils/","title":"Utils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/markista/util/Utils/#class-utils","title":"Class Utils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Utils </p> <p>public class Utils</p> <p>A set of utility methods for changing between qualified and unqualified names.</p>"},{"location":"markista/javadoc/markista/util/Utils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Utils()"},{"location":"markista/javadoc/markista/util/Utils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description public static String removeGenerics(String str) Removes the generic type and its surrounding &lt;&gt; from a string, if present public static String removeParentheses(String expression) Removes parentheses and what they contain from an expression public static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. private static String simplifyNamesLoop(String input) private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c) private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i) public static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. public static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name. public static boolean isNullOrEmpty(String str) Checks if a string is null or empty public static String inOneLine(String str) Removes new line characters from a string, replacing them with spaces"},{"location":"markista/javadoc/markista/util/Utils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markista/util/Utils/#removegenerics","title":"removeGenerics","text":"<p>public static String removeGenerics(String str)</p> <p>Removes the generic type and its surrounding &lt;&gt; from a string, if present</p> <p>Returns:</p> <p>The string with the generic type and surrounding &lt;&gt; removed</p>"},{"location":"markista/javadoc/markista/util/Utils/#removeparentheses","title":"removeParentheses","text":"<p>public static String removeParentheses(String expression)</p> <p>Removes parentheses and what they contain from an expression</p> <p>Returns:</p> <p>The expression with the parentheses removed</p>"},{"location":"markista/javadoc/markista/util/Utils/#simplifynames","title":"simplifyNames","text":"<p>public static String simplifyNames(String str)</p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/markista/util/Utils/#simplifynamesloop","title":"simplifyNamesLoop","text":"<p>private static String simplifyNamesLoop(String input)</p>"},{"location":"markista/javadoc/markista/util/Utils/#shouldreplacequalifiedwithsimple","title":"shouldReplaceQualifiedWithSimple","text":"<p>private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c)</p>"},{"location":"markista/javadoc/markista/util/Utils/#replacequalifiedwithsimple","title":"replaceQualifiedWithSimple","text":"<p>private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i)</p>"},{"location":"markista/javadoc/markista/util/Utils/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p>public static boolean isValidSimpleNameChar(char c)</p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/markista/util/Utils/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p>public static boolean isValidQualifiedNameChar(char c)</p> <p>Checks if the given character is valid in a qualified name.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/markista/util/Utils/#isnullorempty","title":"isNullOrEmpty","text":"<p>public static boolean isNullOrEmpty(String str)</p> <p>Checks if a string is null or empty</p> <p>Returns:</p> <p>True if the string is either null or empty</p>"},{"location":"markista/javadoc/markista/util/Utils/#inoneline","title":"inOneLine","text":"<p>public static String inOneLine(String str)</p> <p>Removes new line characters from a string, replacing them with spaces</p> <p>Returns:</p> <p>The string, with newlines converted to spaces</p>"},{"location":"newsfeed/","title":"Newsfeed - An RSS News Reader for Minecraft","text":""},{"location":"newsfeed/#features","title":"Features","text":"<p>This mod adds a news feed to the game that displays the latest news from a configurable source. The mod is designed to be lightweight and easy to use, with a simple interface that allows you to quickly view the latest news headlines. The default news source is set to the BBC World News RSS feed, but you can change it to any RSS feed you like. </p> <p>When a new article is published to the feed, a notification will appear in the game. You can view the article by pressing the Newsfeed key (default <code>N</code>). The article will be displayed in a GUI that shows the title, description, and a link to the full article. You can also view previous headlines in the GUI.</p> <p> news article being displayed</p> <p> news headline being displayed</p>"},{"location":"newsfeed/#download","title":"Download","text":"<p>Downloads are available for Minecraft versions 1.21.4 to 1.21.7.</p> <p>JAR files are available to download on Modrinth.</p> <p>Source code is available on Github.</p>"},{"location":"newsfeed/#configuration","title":"Configuration","text":"<p>Newsfeed is compatible with mod_menu and can be configured in-game. </p> <p> configuration screen</p> <p>Alternatively, the configuration file is located in the <code>config</code> folder of your Minecraft instance. The file is named <code>newsfeed.json</code>. You can edit this file to change the settings of the mod.</p>"},{"location":"newsfeed/#license","title":"License","text":"<p>This mod is licensed under the MIT License. You are free to use, modify, and distribute this mod as long as you include the original license in your distribution.</p>"}]}
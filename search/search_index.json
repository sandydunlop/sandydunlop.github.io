{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I'm Sandy</p> <p>I'm a Software Engineer based in sunny Scotland.</p> <p>Over the past 21 years, I've worked in various areas of software development, including UNIX systems development, data warehousing, data security and IoT.</p> <p>I've worked on and led projects across multipe sectors including immigration and law enforcement in countries like the United Kingdom, United States, and United Arab Emirates.</p>"},{"location":"markista/","title":"Markista","text":"<p>Serving Markdown Flavored Documentation</p>"},{"location":"markista/#introduction","title":"Introduction","text":"<p>Markista is a doclet that turns your Java documentation comments into Markdown, suitable for use with Github, MkDocs, etc. </p> <p>Marklist is under active development and has reached a point where it is becoming useful. There will be features that aren't completely implemented yet.</p> <p>As a demonstration, the Markdown Javadoc for Markista itself is available here. It was produced with the <code>--private</code> parameter which tells Markista to document private members of classes. By default only public and protected members are documented.</p>"},{"location":"markista/#gradle","title":"Gradle","text":"<p>Markista can be used from a Gradle build by following these simple steps:</p>"},{"location":"markista/#step-1-define-a-configuration-for-the-doclet","title":"Step 1: Define a Configuration for the Doclet","text":"<p>Create a configuration in your build.gradle file to manage the Markista dependency.</p> <pre><code>configurations {\n    markista\n}\n</code></pre>"},{"location":"markista/#step-2-add-the-markista-dependency","title":"Step 2: Add the Markista Dependency","text":"<p>Add Markista as a dependency under the configuration you just created.</p> <pre><code>dependencies {\n    markista(\"io.github.sandydunlop:markista:0.1.1\")\n}\n</code></pre>"},{"location":"markista/#step-3-configure-the-javadoc-task","title":"Step 3: Configure the Javadoc Task","text":"<p>In the Javadoc task, specify the doclet path and the doclet class. This tells Gradle where to find the doclet and which one to use.</p> <pre><code>javadoc {\n    options {\n        docletpath = configurations.markista.files.asType(List)\n        doclet = 'io.github.sandydunlop.markista.doclet.MarkdownDoclet'\n        source = null\n        addBooleanOption('-squash-empty', true)\n        addBooleanOption('-external-links', true)\n    }\n}\n</code></pre>"},{"location":"markista/#command-line","title":"Command Line","text":"<p>Markista can be used from the command line with the <code>javadoc</code> command as follows:</p> <pre><code>javadoc -docletpath libs/markista-0.1.1.jar -doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet src/main/java/my.package/Hello.java\n</code></pre>"},{"location":"markista/#parameters","title":"Parameters","text":"<code>-d &lt;directory&gt;</code> The directory to write the Markdown files to. <code>--show-private</code> Generate docs for private members. By default only public  and abstract members are documented. <code>--external-links</code> Create links to classes defined outside of the API being     documented (eg. java.utils.String) <code>--squash-empty</code> Don't create directories that contain no classes"},{"location":"markista/#download","title":"Download","text":"<p>JAR files for version 0.1.0 are available to download here.</p>"},{"location":"markista/#source-code","title":"Source Code","text":"<p>Markista's souce code is available on Github under the GPLv3 license.</p>"},{"location":"markista/javadoc/constant-values/","title":"Constant Field Values","text":"Modifier and Type Constant Field Value static final  boolean OK true static final  boolean FAILED false private static final  String BR private static final  String NBSP"},{"location":"markista/javadoc/doclet/","title":"Package io.github.sandydunlop.markista.doclet","text":"<p>This package contains the main doclet classes.</p> <p>The Markista doclet has3 main functions:</p> <ul> <li>Collecting API and documentation infomation from the Java compiler</li> <li>Arranging the infomation into an API tree using model.* classes</li> <li>Outputting the documentation from the API tree as Markdown</li> </ul> Classes Class Description MarkdownTable A utility class for creating tables in Markdown documents. MarkdownDoclet A doclet that renders javadoc comments as Markdown MarkdownWriter A class that outputs API documentation as Markdown. ApiCollector A class that scans code and generates an API tree representing code and Javadoc comments."},{"location":"markista/javadoc/doclet/ApiCollector/","title":"ApiCollector","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#class-apicollector","title":"Class ApiCollector","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.AbstractElementVisitor6&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner6&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner7&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner8&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0javax.lang.model.util.ElementScanner9&lt;java.lang.Void,java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.ApiCollector </p>"},{"location":"markista/javadoc/doclet/ApiCollector/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Types typeUtils private static DocTrees treeUtils private PackageNode packageDoc private Set&lt;Element&gt; encounteredSupertypes private static Elements elementUtils private boolean documentPrivateMembers private Api api"},{"location":"markista/javadoc/doclet/ApiCollector/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ApiCollector(DocletEnvironment environment)"},{"location":"markista/javadoc/doclet/ApiCollector/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Void visitVariable(VariableElement ve, Integer depth) Void visitTypeParameter(TypeParameterElement e, Integer depth) Void visitType(TypeElement e, Integer depth) Void visitRecordComponent(RecordComponentElement e, Integer depth) Void visitPackage(PackageElement ee, Integer depth) Void visitExecutable(ExecutableElement ee, Integer depth) private void setMethodParams(MethodNode methodDoc, ExecutableElement ee) void setDocumentPrivateMembers(boolean documentPrivateMembers) private void setDeprecationStatus(Node node, Element e, DocCommentTree dct) Void scan(Element e, Integer depth) boolean isInterface(TypeMirror typeMirror) private boolean isIncludedInApi(Element e) private TypeNode insantiateSubtype(ElementKind kind, String qualifiedName, String simpleName, String packageName) static VariableTree getVariableTree(List&lt;? extends VariableTree&gt; paramList, String paramName) To be removed private static String getUrl(String html) private Text getSince(DocCommentTree dcTree) private static String getSimpleName(String qualifiedTypeName) private ReturnTree getReturnTree(DocCommentTree dcTree) private List&lt;Reference&gt; getReferences(DocCommentTree dcTree) private static TypeNode getParamType(Elements elementUtils, String className, ExecutableElement method, String fieldName) private ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter) private static String getPackageName(String qualifiedTypeName) private static TypeNode getFieldType(Elements elementUtils, String className, String fieldName) static TypeElement getEnclosingTypeElement(Element element) Returns the TypeElement of the class the specified element belongs to. static PackageElement getEnclosingPackageElement(Element element) private DeprecatedTree getDeprecation(DocCommentTree docComment) private void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result) private void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result) Api collect(Set&lt;? extends Element&gt; elements) private void addConstantFieldValuesReference()"},{"location":"markista/javadoc/doclet/ApiCollector/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#typeutils","title":"typeUtils","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#treeutils","title":"treeUtils","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#packagedoc","title":"packageDoc","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#encounteredsupertypes","title":"encounteredSupertypes","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#elementutils","title":"elementUtils","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#documentprivatemembers","title":"documentPrivateMembers","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#api","title":"api","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/ApiCollector/#visitvariable","title":"visitVariable","text":"<p>Void visitVariable(VariableElement ve, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visittypeparameter","title":"visitTypeParameter","text":"<p>Void visitTypeParameter(TypeParameterElement e, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visittype","title":"visitType","text":"<p>Void visitType(TypeElement e, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visitrecordcomponent","title":"visitRecordComponent","text":"<p>Void visitRecordComponent(RecordComponentElement e, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visitpackage","title":"visitPackage","text":"<p>Void visitPackage(PackageElement ee, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#visitexecutable","title":"visitExecutable","text":"<p>Void visitExecutable(ExecutableElement ee, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#setmethodparams","title":"setMethodParams","text":"<p>private void setMethodParams(MethodNode methodDoc, ExecutableElement ee)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#setdocumentprivatemembers","title":"setDocumentPrivateMembers","text":"<p>void setDocumentPrivateMembers(boolean documentPrivateMembers)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#setdeprecationstatus","title":"setDeprecationStatus","text":"<p>private void setDeprecationStatus(Node node, Element e, DocCommentTree dct)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#scan","title":"scan","text":"<p>Void scan(Element e, Integer depth)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#isinterface","title":"isInterface","text":"<p>boolean isInterface(TypeMirror typeMirror)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#isincludedinapi","title":"isIncludedInApi","text":"<p>private boolean isIncludedInApi(Element e)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#insantiatesubtype","title":"insantiateSubtype","text":"<p>private TypeNode insantiateSubtype(ElementKind kind, String qualifiedName, String simpleName, String packageName)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getvariabletree","title":"getVariableTree","text":"<p>static VariableTree getVariableTree(List&lt;? extends VariableTree&gt; paramList, String paramName)</p> <p>To be removed</p> <p>Deprecated</p> <p>use new() instead.</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#geturl","title":"getUrl","text":"<p>private static String getUrl(String html)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getsince","title":"getSince","text":"<p>private Text getSince(DocCommentTree dcTree)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getsimplename","title":"getSimpleName","text":"<p>private static String getSimpleName(String qualifiedTypeName)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getreturntree","title":"getReturnTree","text":"<p>private ReturnTree getReturnTree(DocCommentTree dcTree)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getreferences","title":"getReferences","text":"<p>private List&lt;Reference&gt; getReferences(DocCommentTree dcTree)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getparamtype","title":"getParamType","text":"<p>private static TypeNode getParamType(Elements elementUtils, String className, ExecutableElement method, String fieldName)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getparamtree","title":"getParamTree","text":"<p>private ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String qualifiedTypeName)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getfieldtype","title":"getFieldType","text":"<p>private static TypeNode getFieldType(Elements elementUtils, String className, String fieldName)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getenclosingtypeelement","title":"getEnclosingTypeElement","text":"<p>static TypeElement getEnclosingTypeElement(Element element)</p> <p>Returns the TypeElement of the class the specified element belongs to.</p> <p>Parameters:</p> <p><code>element</code> - A program element such as a field or method</p> <p>Returns:</p> <p>the TypeElement of the class the specified element belongs to.</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getenclosingpackageelement","title":"getEnclosingPackageElement","text":"<p>static PackageElement getEnclosingPackageElement(Element element)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#getdeprecation","title":"getDeprecation","text":"<p>private DeprecatedTree getDeprecation(DocCommentTree docComment)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#findimplementedinterfaces","title":"findImplementedInterfaces","text":"<p>private void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#collectallsupertypes","title":"collectAllSupertypes","text":"<p>private void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#collect","title":"collect","text":"<p>Api collect(Set&lt;? extends Element&gt; elements)</p>"},{"location":"markista/javadoc/doclet/ApiCollector/#addconstantfieldvaluesreference","title":"addConstantFieldValuesReference","text":"<p>private void addConstantFieldValuesReference()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/","title":"MarkdownDoclet.Option","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#class-markdowndocletoption","title":"Class MarkdownDoclet.Option","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet.Option  All Implemented Interfaces: Doclet.Option</p> <p>Enclosing Class: MarkdownDoclet</p> <p>Subtypes for specific options should implement the process method to handle instances of the option found on the command line.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String parameters private final String name private final boolean hasArg private final String description"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet.Option(String name, boolean hasArg, String description, String parameters)"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getParameters() List&lt;String&gt; getNames() Doclet.Option.Kind getKind() String getDescription() int getArgumentCount()"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#parameters","title":"parameters","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#name","title":"name","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#hasarg","title":"hasArg","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#description","title":"description","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getparameters","title":"getParameters","text":"<p>String getParameters()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getnames","title":"getNames","text":"<p>List&lt;String&gt; getNames()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getkind","title":"getKind","text":"<p>Doclet.Option.Kind getKind()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getdescription","title":"getDescription","text":"<p>String getDescription()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getargumentcount","title":"getArgumentCount","text":"<p>int getArgumentCount()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/","title":"MarkdownDoclet","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#class-markdowndoclet","title":"Class MarkdownDoclet","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet  All Implemented Interfaces: Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description abstract MarkdownDoclet.Option A base class for declaring options."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private boolean squashEmptyDirectories private String outputDirectory private final Set&lt;MarkdownDoclet.Option&gt; options private boolean documentPrivateMembers private boolean createExternalLinks static final boolean OK Returned from run upon success static final boolean FAILED Returned from run upon failure"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet() The default constructor, does nothing."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description boolean run(DocletEnvironment environment) static void main(String[] args) The starting point of Markista if it is being used withiout the Javadoc command. void init(Locale locale, Reporter reporter) Initializes the doclet. SourceVersion getSupportedSourceVersion() Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions() String getName()"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#squashemptydirectories","title":"squashEmptyDirectories","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#outputdirectory","title":"outputDirectory","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#options","title":"options","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#documentprivatemembers","title":"documentPrivateMembers","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#createexternallinks","title":"createExternalLinks","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#ok","title":"OK","text":"<p>Returned from run upon success</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#failed","title":"FAILED","text":"<p>Returned from run upon failure</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#run","title":"run","text":"<p>boolean run(DocletEnvironment environment)</p> <p>Parameters:</p> <p><code>environment</code> - Represents the operating environment of a single invocation of the doclet.</p> <p>Returns:</p> <p>true if completed without errors, false if errors occurred.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#main","title":"main","text":"<p>static void main(String[] args)</p> <p>The starting point of Markista if it is being used withiout the Javadoc command. This is useful for debugging.</p> <p>Parameters:</p> <p><code>args</code> - this parameter is ignored.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#init","title":"init","text":"<p>void init(Locale locale, Reporter reporter)</p> <p>Initializes the doclet.</p> <p>Parameters:</p> <p><code>locale</code> - The locale used for messages</p> <p><code>reporter</code> - The reporter used for messages</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedsourceversion","title":"getSupportedSourceVersion","text":"<p>SourceVersion getSupportedSourceVersion()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedoptions","title":"getSupportedOptions","text":"<p>Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions()</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getname","title":"getName","text":"<p>String getName()</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/","title":"MarkdownTable.Column","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#class-markdowntablecolumn","title":"Class MarkdownTable.Column","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable.Column  Enclosing Class: MarkdownTable</p>"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description int width String name"},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable.Column(String name) Constructs a new <code>Column</code> object with the specified name."},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#width","title":"width","text":""},{"location":"markista/javadoc/doclet/MarkdownTable.Column/#name","title":"name","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/","title":"MarkdownTable","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#class-markdowntable","title":"Class MarkdownTable","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownTable </p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description MarkdownTable.Column A class to represent the name and width of a column within a table"},{"location":"markista/javadoc/doclet/MarkdownTable/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;String[]&gt; rows List&lt;MarkdownTable.Column&gt; columns"},{"location":"markista/javadoc/doclet/MarkdownTable/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable()"},{"location":"markista/javadoc/doclet/MarkdownTable/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void render(Writer writer) Renders the table as Markdown text without any indentation void render(Writer writer, int indent) Renders the table as Markdown text with a given indentation level MarkdownTable addRow(String[] valueStrings) Adds a row of data to the table MarkdownTable addColumn(String heading) Adds a column with the specified heading to the table"},{"location":"markista/javadoc/doclet/MarkdownTable/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#rows","title":"rows","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#columns","title":"columns","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownTable/#render","title":"render","text":"<p>void render(Writer writer)</p> <p>Renders the table as Markdown text without any indentation</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#render_1","title":"render","text":"<p>void render(Writer writer, int indent)</p> <p>Renders the table as Markdown text with a given indentation level</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#addrow","title":"addRow","text":"<p>MarkdownTable addRow(String[] valueStrings)</p> <p>Adds a row of data to the table</p> <p>Parameters:</p> <p><code>valueStrings</code> - one or more strings which represnet the data for this row</p> <p>Returns:</p> <p>The table</p>"},{"location":"markista/javadoc/doclet/MarkdownTable/#addcolumn","title":"addColumn","text":"<p>MarkdownTable addColumn(String heading)</p> <p>Adds a column with the specified heading to the table</p> <p>Parameters:</p> <p><code>heading</code> - String to be used as the column heading</p> <p>Returns:</p> <p>The table</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/","title":"MarkdownWriter","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#class-markdownwriter","title":"Class MarkdownWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownWriter </p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Writer writer private String squashedDirectories private boolean squashEmptyDirectories private String outputDirectory private static final String NBSP private static final String BR"},{"location":"markista/javadoc/doclet/MarkdownWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownWriter(String outputDirectory) Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/doclet/MarkdownWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(Api api) Ouput the documentation files for the specified API private void setSquashedDirectories(Api api) void setSquashEmptyDirectories(boolean b) private char pathSeparator() String paramsString(List&lt;ParamNode&gt; params) private void outputTypeDoc(TypeNode typeDoc, String subType) private void outputSupertypes(TypeNode typeDoc) private void outputPackageMembers(String title, List&lt;?&gt; members) private void outputPackageDoc(PackageNode packageDoc) private void outputNestedClassSummary(List&lt;ClassNode&gt; nestedClasses) private void outputMethodSummary(List&lt;MethodNode&gt; methods) Writes the markdown for a class's method summary table private void outputImplementedInterfaces(TypeNode typeDoc) private void outputFieldSummary(List&lt;FieldNode&gt; fields) private void outputEnumConstantsSummary(EnumNode enumNode) private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode) private void outputEnclosingClass(TypeNode typeDoc) private void outputDetails(List&lt;Node&gt; nodes) Writes the markdown for a class's method or field details. private void outputDeprecation(Deprecation status, Text text) private void outputConstructorSummary(List&lt;MethodNode&gt; methods) private void outputConstantValues(Api api) String fullSignature(MethodNode method) private String formatTaggedText(List&lt;? extends DocTree&gt; parsedSegments) private String formatTaggedLinkPlain(DocTree link) private String formatTaggedLink(DocTree link) private String formatReference(Reference ref) private Writer createFile(String className, String packageName) private static int countDots(String str) private File buildContainingDirPath(String outputDirectory, String packageName)"},{"location":"markista/javadoc/doclet/MarkdownWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#writer","title":"writer","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#squasheddirectories","title":"squashedDirectories","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#squashemptydirectories","title":"squashEmptyDirectories","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputdirectory","title":"outputDirectory","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#nbsp","title":"NBSP","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#br","title":"BR","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownWriter/#writedocs","title":"writeDocs","text":"<p>void writeDocs(Api api)</p> <p>Ouput the documentation files for the specified API</p> <p>Parameters:</p> <p><code>api</code> - The API to output the documentation for</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#setsquasheddirectories","title":"setSquashedDirectories","text":"<p>private void setSquashedDirectories(Api api)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#setsquashemptydirectories","title":"setSquashEmptyDirectories","text":"<p>void setSquashEmptyDirectories(boolean b)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#pathseparator","title":"pathSeparator","text":"<p>private char pathSeparator()</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#paramsstring","title":"paramsString","text":"<p>String paramsString(List&lt;ParamNode&gt; params)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputtypedoc","title":"outputTypeDoc","text":"<p>private void outputTypeDoc(TypeNode typeDoc, String subType)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputsupertypes","title":"outputSupertypes","text":"<p>private void outputSupertypes(TypeNode typeDoc)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputpackagemembers","title":"outputPackageMembers","text":"<p>private void outputPackageMembers(String title, List&lt;?&gt; members)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputpackagedoc","title":"outputPackageDoc","text":"<p>private void outputPackageDoc(PackageNode packageDoc)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputnestedclasssummary","title":"outputNestedClassSummary","text":"<p>private void outputNestedClassSummary(List&lt;ClassNode&gt; nestedClasses)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputmethodsummary","title":"outputMethodSummary","text":"<p>private void outputMethodSummary(List&lt;MethodNode&gt; methods)</p> <p>Writes the markdown for a class's method summary table</p> <p>Parameters:</p> <p><code>methods</code> - The list of methods to include in the summary table</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputimplementedinterfaces","title":"outputImplementedInterfaces","text":"<p>private void outputImplementedInterfaces(TypeNode typeDoc)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputfieldsummary","title":"outputFieldSummary","text":"<p>private void outputFieldSummary(List&lt;FieldNode&gt; fields)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputenumconstantssummary","title":"outputEnumConstantsSummary","text":"<p>private void outputEnumConstantsSummary(EnumNode enumNode)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputenumconstantdetails","title":"outputEnumConstantDetails","text":"<p>private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputenclosingclass","title":"outputEnclosingClass","text":"<p>private void outputEnclosingClass(TypeNode typeDoc)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputdetails","title":"outputDetails","text":"<p>private void outputDetails(List&lt;Node&gt; nodes)</p> <p>Writes the markdown for a class's method or field details.</p> <p>Parameters:</p> <p><code>nodes</code> - The list of methods to write the details of</p> <p>Since:</p> <p>0.1.0</p> <p>See Also:</p> <p>http://example.com</p> <p>List</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputdeprecation","title":"outputDeprecation","text":"<p>private void outputDeprecation(Deprecation status, Text text)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputconstructorsummary","title":"outputConstructorSummary","text":"<p>private void outputConstructorSummary(List&lt;MethodNode&gt; methods)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#outputconstantvalues","title":"outputConstantValues","text":"<p>private void outputConstantValues(Api api)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#fullsignature","title":"fullSignature","text":"<p>String fullSignature(MethodNode method)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#formattaggedtext","title":"formatTaggedText","text":"<p>private String formatTaggedText(List&lt;? extends DocTree&gt; parsedSegments)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#formattaggedlinkplain","title":"formatTaggedLinkPlain","text":"<p>private String formatTaggedLinkPlain(DocTree link)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#formattaggedlink","title":"formatTaggedLink","text":"<p>private String formatTaggedLink(DocTree link)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#formatreference","title":"formatReference","text":"<p>private String formatReference(Reference ref)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#createfile","title":"createFile","text":"<p>private Writer createFile(String className, String packageName)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#countdots","title":"countDots","text":"<p>private static int countDots(String str)</p>"},{"location":"markista/javadoc/doclet/MarkdownWriter/#buildcontainingdirpath","title":"buildContainingDirPath","text":"<p>private File buildContainingDirPath(String outputDirectory, String packageName)</p> <p>Parameters:</p> <p><code>outputDirectory</code> - output path specified by the <code>-d</code> command line parameter</p> <p><code>packageName</code> - the name of the packageName</p>"},{"location":"markista/javadoc/model/","title":"Package io.github.sandydunlop.markista.model","text":"<p>The classes used to store structure and docuemntation information in the API tree.</p> ClassesEnum Classes Class Description InterfaceNode Reference ExceptionNode AnnotationNode EnumNode FieldNode A class to hold infomation about fields within a class, interface, or enum. PackageNode TypeNode ParamNode A class to hold infomation about method parameters. ClassNode Api Node MethodNode Text Class Description Deprecation"},{"location":"markista/javadoc/model/AnnotationNode/","title":"AnnotationNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AnnotationNode/#class-annotationnode","title":"Class AnnotationNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationNode </p>"},{"location":"markista/javadoc/model/AnnotationNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/Api/","title":"Api","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Api/#class-api","title":"Class Api","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Api </p>"},{"location":"markista/javadoc/model/Api/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;PackageNode&gt; topLevelPackages private List&lt;PackageNode&gt; packages private List&lt;InterfaceNode&gt; interfaces private List&lt;ExceptionNode&gt; exceptions private List&lt;EnumNode&gt; enums private List&lt;FieldNode&gt; constantValues private List&lt;ClassNode&gt; classes private List&lt;AnnotationNode&gt; annotations"},{"location":"markista/javadoc/model/Api/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Api()"},{"location":"markista/javadoc/model/Api/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sort() TypeNode getTypeDoc(String qualifiedName, List&lt;?&gt; docs) List&lt;PackageNode&gt; getPackages() PackageNode getPackageDoc(String qualifiedName) List&lt;InterfaceNode&gt; getInterfaces() List&lt;ExceptionNode&gt; getExceptions() List&lt;EnumNode&gt; getEnums() List&lt;FieldNode&gt; getConstantValues() List&lt;ClassNode&gt; getClasses() ClassNode getClassDoc(TypeElement type) List&lt;AnnotationNode&gt; getAnnotations() void addPackage(PackageNode node) void addInterface(InterfaceNode node) void addException(ExceptionNode node) void addEnum(EnumNode node) void addClass(ClassNode node) void addAnnotation(AnnotationNode node)"},{"location":"markista/javadoc/model/Api/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Api/#toplevelpackages","title":"topLevelPackages","text":""},{"location":"markista/javadoc/model/Api/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/Api/#interfaces","title":"interfaces","text":""},{"location":"markista/javadoc/model/Api/#exceptions","title":"exceptions","text":""},{"location":"markista/javadoc/model/Api/#enums","title":"enums","text":""},{"location":"markista/javadoc/model/Api/#constantvalues","title":"constantValues","text":""},{"location":"markista/javadoc/model/Api/#classes","title":"classes","text":""},{"location":"markista/javadoc/model/Api/#annotations","title":"annotations","text":""},{"location":"markista/javadoc/model/Api/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Api/#sort","title":"sort","text":"<p>void sort()</p>"},{"location":"markista/javadoc/model/Api/#gettypedoc","title":"getTypeDoc","text":"<p>TypeNode getTypeDoc(String qualifiedName, List&lt;?&gt; docs)</p>"},{"location":"markista/javadoc/model/Api/#getpackages","title":"getPackages","text":"<p>List&lt;PackageNode&gt; getPackages()</p>"},{"location":"markista/javadoc/model/Api/#getpackagedoc","title":"getPackageDoc","text":"<p>PackageNode getPackageDoc(String qualifiedName)</p>"},{"location":"markista/javadoc/model/Api/#getinterfaces","title":"getInterfaces","text":"<p>List&lt;InterfaceNode&gt; getInterfaces()</p>"},{"location":"markista/javadoc/model/Api/#getexceptions","title":"getExceptions","text":"<p>List&lt;ExceptionNode&gt; getExceptions()</p>"},{"location":"markista/javadoc/model/Api/#getenums","title":"getEnums","text":"<p>List&lt;EnumNode&gt; getEnums()</p>"},{"location":"markista/javadoc/model/Api/#getconstantvalues","title":"getConstantValues","text":"<p>List&lt;FieldNode&gt; getConstantValues()</p>"},{"location":"markista/javadoc/model/Api/#getclasses","title":"getClasses","text":"<p>List&lt;ClassNode&gt; getClasses()</p>"},{"location":"markista/javadoc/model/Api/#getclassdoc","title":"getClassDoc","text":"<p>ClassNode getClassDoc(TypeElement type)</p>"},{"location":"markista/javadoc/model/Api/#getannotations","title":"getAnnotations","text":"<p>List&lt;AnnotationNode&gt; getAnnotations()</p>"},{"location":"markista/javadoc/model/Api/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode node)</p>"},{"location":"markista/javadoc/model/Api/#addinterface","title":"addInterface","text":"<p>void addInterface(InterfaceNode node)</p>"},{"location":"markista/javadoc/model/Api/#addexception","title":"addException","text":"<p>void addException(ExceptionNode node)</p>"},{"location":"markista/javadoc/model/Api/#addenum","title":"addEnum","text":"<p>void addEnum(EnumNode node)</p>"},{"location":"markista/javadoc/model/Api/#addclass","title":"addClass","text":"<p>void addClass(ClassNode node)</p>"},{"location":"markista/javadoc/model/Api/#addannotation","title":"addAnnotation","text":"<p>void addAnnotation(AnnotationNode node)</p>"},{"location":"markista/javadoc/model/ClassNode/","title":"ClassNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ClassNode/#class-classnode","title":"Class ClassNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ClassNode </p>"},{"location":"markista/javadoc/model/ClassNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ClassNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/ClassNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description MethodNode getMethod(MethodNode method) FieldNode getField(String fieldName) MethodNode getConstructor(MethodNode method)"},{"location":"markista/javadoc/model/ClassNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ClassNode/#getmethod","title":"getMethod","text":"<p>MethodNode getMethod(MethodNode method)</p>"},{"location":"markista/javadoc/model/ClassNode/#getfield","title":"getField","text":"<p>FieldNode getField(String fieldName)</p>"},{"location":"markista/javadoc/model/ClassNode/#getconstructor","title":"getConstructor","text":"<p>MethodNode getConstructor(MethodNode method)</p>"},{"location":"markista/javadoc/model/Deprecation/","title":"Deprecation","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Deprecation/#enum-deprecation","title":"Enum Deprecation","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Deprecation&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Deprecation </p>"},{"location":"markista/javadoc/model/Deprecation/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE FOR_REMOVAL DEPRECATED"},{"location":"markista/javadoc/model/Deprecation/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Deprecation/#none","title":"NONE","text":"<p>public static final Deprecation NONE</p>"},{"location":"markista/javadoc/model/Deprecation/#for_removal","title":"FOR_REMOVAL","text":"<p>public static final Deprecation FOR_REMOVAL</p>"},{"location":"markista/javadoc/model/Deprecation/#deprecated","title":"DEPRECATED","text":"<p>public static final Deprecation DEPRECATED</p>"},{"location":"markista/javadoc/model/EnumNode/","title":"EnumNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/EnumNode/#class-enumnode","title":"Class EnumNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.EnumNode </p>"},{"location":"markista/javadoc/model/EnumNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;FieldNode&gt; constants"},{"location":"markista/javadoc/model/EnumNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description EnumNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/EnumNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/EnumNode/#constants","title":"constants","text":""},{"location":"markista/javadoc/model/ExceptionNode/","title":"ExceptionNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ExceptionNode/#class-exceptionnode","title":"Class ExceptionNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ExceptionNode </p>"},{"location":"markista/javadoc/model/ExceptionNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ExceptionNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/FieldNode/","title":"FieldNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/FieldNode/#class-fieldnode","title":"Class FieldNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.FieldNode </p>"},{"location":"markista/javadoc/model/FieldNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description Serializable constantValue"},{"location":"markista/javadoc/model/FieldNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FieldNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/FieldNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String fullSignature()"},{"location":"markista/javadoc/model/FieldNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/FieldNode/#constantvalue","title":"constantValue","text":""},{"location":"markista/javadoc/model/FieldNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/FieldNode/#fullsignature","title":"fullSignature","text":"<p>String fullSignature()</p>"},{"location":"markista/javadoc/model/InterfaceNode/","title":"InterfaceNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/InterfaceNode/#class-interfacenode","title":"Class InterfaceNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.InterfaceNode </p>"},{"location":"markista/javadoc/model/InterfaceNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description InterfaceNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/MethodNode/","title":"MethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/MethodNode/#class-methodnode","title":"Class MethodNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.MethodNode </p>"},{"location":"markista/javadoc/model/MethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;? extends TypeMirror&gt; thrownTypes TypeNode returnType List&lt;? extends DocTree&gt; returnDescription List&lt;ParamNode&gt; params"},{"location":"markista/javadoc/model/MethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MethodNode(TypeNode returnType, String name)"},{"location":"markista/javadoc/model/MethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String signature() void setReturnComment(List&lt;? extends DocTree&gt; doc) String paramsString() String fullSignature()"},{"location":"markista/javadoc/model/MethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/MethodNode/#throwntypes","title":"thrownTypes","text":""},{"location":"markista/javadoc/model/MethodNode/#returntype","title":"returnType","text":""},{"location":"markista/javadoc/model/MethodNode/#returndescription","title":"returnDescription","text":""},{"location":"markista/javadoc/model/MethodNode/#params","title":"params","text":""},{"location":"markista/javadoc/model/MethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/MethodNode/#signature","title":"signature","text":"<p>String signature()</p>"},{"location":"markista/javadoc/model/MethodNode/#setreturncomment","title":"setReturnComment","text":"<p>void setReturnComment(List&lt;? extends DocTree&gt; doc)</p>"},{"location":"markista/javadoc/model/MethodNode/#paramsstring","title":"paramsString","text":"<p>String paramsString()</p>"},{"location":"markista/javadoc/model/MethodNode/#fullsignature","title":"fullSignature","text":"<p>String fullSignature()</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/","title":"Node.ModifierSorter","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#class-nodemodifiersorter","title":"Class Node.ModifierSorter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node.ModifierSorter  Enclosing Class: Node</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final List&lt;Modifier&gt; ORDER"},{"location":"markista/javadoc/model/Node.ModifierSorter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node.ModifierSorter()"},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#order","title":"ORDER","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#sortmodifiers","title":"sortModifiers","text":"<p>static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)</p>"},{"location":"markista/javadoc/model/Node/","title":"Node","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node/#class-node","title":"Class Node","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node </p>"},{"location":"markista/javadoc/model/Node/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description Node.ModifierSorter"},{"location":"markista/javadoc/model/Node/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description Text since String simpleName private List&lt;Reference&gt; references String qualifiedName String packageName Node owner Set&lt;Modifier&gt; modifiers private List&lt;? extends DocTree&gt; fullBody private List&lt;? extends DocTree&gt; firstSentence Text deprecationText Deprecation deprecation private List&lt;? extends DocTree&gt; body"},{"location":"markista/javadoc/model/Node/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node()"},{"location":"markista/javadoc/model/Node/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sortModifiers() void setReferences(List&lt;Reference&gt; refs) void setFullBody(List&lt;? extends DocTree&gt; doc) void setFirstSentence(List&lt;? extends DocTree&gt; doc) void setBody(List&lt;? extends DocTree&gt; doc) List&lt;Reference&gt; getReferences() String getModifiers() List&lt;? extends DocTree&gt; getFullBody() List&lt;? extends DocTree&gt; getFirstSentence() List&lt;? extends DocTree&gt; getBody()"},{"location":"markista/javadoc/model/Node/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node/#since","title":"since","text":""},{"location":"markista/javadoc/model/Node/#simplename","title":"simpleName","text":""},{"location":"markista/javadoc/model/Node/#references","title":"references","text":""},{"location":"markista/javadoc/model/Node/#qualifiedname","title":"qualifiedName","text":""},{"location":"markista/javadoc/model/Node/#packagename","title":"packageName","text":""},{"location":"markista/javadoc/model/Node/#owner","title":"owner","text":""},{"location":"markista/javadoc/model/Node/#modifiers","title":"modifiers","text":""},{"location":"markista/javadoc/model/Node/#fullbody","title":"fullBody","text":""},{"location":"markista/javadoc/model/Node/#firstsentence","title":"firstSentence","text":""},{"location":"markista/javadoc/model/Node/#deprecationtext","title":"deprecationText","text":""},{"location":"markista/javadoc/model/Node/#deprecation","title":"deprecation","text":""},{"location":"markista/javadoc/model/Node/#body","title":"body","text":""},{"location":"markista/javadoc/model/Node/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node/#sortmodifiers","title":"sortModifiers","text":"<p>void sortModifiers()</p>"},{"location":"markista/javadoc/model/Node/#setreferences","title":"setReferences","text":"<p>void setReferences(List&lt;Reference&gt; refs)</p>"},{"location":"markista/javadoc/model/Node/#setfullbody","title":"setFullBody","text":"<p>void setFullBody(List&lt;? extends DocTree&gt; doc)</p>"},{"location":"markista/javadoc/model/Node/#setfirstsentence","title":"setFirstSentence","text":"<p>void setFirstSentence(List&lt;? extends DocTree&gt; doc)</p>"},{"location":"markista/javadoc/model/Node/#setbody","title":"setBody","text":"<p>void setBody(List&lt;? extends DocTree&gt; doc)</p>"},{"location":"markista/javadoc/model/Node/#getreferences","title":"getReferences","text":"<p>List&lt;Reference&gt; getReferences()</p>"},{"location":"markista/javadoc/model/Node/#getmodifiers","title":"getModifiers","text":"<p>String getModifiers()</p>"},{"location":"markista/javadoc/model/Node/#getfullbody","title":"getFullBody","text":"<p>List&lt;? extends DocTree&gt; getFullBody()</p>"},{"location":"markista/javadoc/model/Node/#getfirstsentence","title":"getFirstSentence","text":"<p>List&lt;? extends DocTree&gt; getFirstSentence()</p>"},{"location":"markista/javadoc/model/Node/#getbody","title":"getBody","text":"<p>List&lt;? extends DocTree&gt; getBody()</p>"},{"location":"markista/javadoc/model/PackageNode/","title":"PackageNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageNode/#class-packagenode","title":"Class PackageNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageNode </p>"},{"location":"markista/javadoc/model/PackageNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;PackageNode&gt; packages List&lt;InterfaceNode&gt; interfaces List&lt;ExceptionNode&gt; exceptionClasses List&lt;EnumNode&gt; enumClasses List&lt;ClassNode&gt; classes List&lt;AnnotationNode&gt; annotationClasses"},{"location":"markista/javadoc/model/PackageNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageNode(String packageName)"},{"location":"markista/javadoc/model/PackageNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description List&lt;PackageNode&gt; getPackages()"},{"location":"markista/javadoc/model/PackageNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/PackageNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/PackageNode/#interfaces","title":"interfaces","text":""},{"location":"markista/javadoc/model/PackageNode/#exceptionclasses","title":"exceptionClasses","text":""},{"location":"markista/javadoc/model/PackageNode/#enumclasses","title":"enumClasses","text":""},{"location":"markista/javadoc/model/PackageNode/#classes","title":"classes","text":""},{"location":"markista/javadoc/model/PackageNode/#annotationclasses","title":"annotationClasses","text":""},{"location":"markista/javadoc/model/PackageNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageNode/#getpackages","title":"getPackages","text":"<p>List&lt;PackageNode&gt; getPackages()</p>"},{"location":"markista/javadoc/model/ParamNode/","title":"ParamNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ParamNode/#class-paramnode","title":"Class ParamNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ParamNode </p>"},{"location":"markista/javadoc/model/ParamNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description TypeNode type"},{"location":"markista/javadoc/model/ParamNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ParamNode() ParamNode(TypeNode type, String name)"},{"location":"markista/javadoc/model/ParamNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/ParamNode/#type","title":"type","text":""},{"location":"markista/javadoc/model/Reference.Kind/","title":"Reference.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-referencekind","title":"Enum Reference.Kind","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Kind  Enclosing Class: Reference</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE PACKAGE TYPE PAGE URL"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Kind/#none","title":"NONE","text":"<p>public static final Reference.Kind NONE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#package","title":"PACKAGE","text":"<p>public static final Reference.Kind PACKAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#type","title":"TYPE","text":"<p>public static final Reference.Kind TYPE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#page","title":"PAGE","text":"<p>public static final Reference.Kind PAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#url","title":"URL","text":"<p>public static final Reference.Kind URL</p>"},{"location":"markista/javadoc/model/Reference.Scope/","title":"Reference.Scope","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-referencescope","title":"Enum Reference.Scope","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Scope&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Scope  Enclosing Class: Reference</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE LOCAL NATIVE FOREIGN"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Scope/#none","title":"NONE","text":"<p>public static final Reference.Scope NONE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#local","title":"LOCAL","text":"<p>public static final Reference.Scope LOCAL</p>"},{"location":"markista/javadoc/model/Reference.Scope/#native","title":"NATIVE","text":"<p>public static final Reference.Scope NATIVE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#foreign","title":"FOREIGN","text":"<p>public static final Reference.Scope FOREIGN</p>"},{"location":"markista/javadoc/model/Reference/","title":"Reference","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference/#class-reference","title":"Class Reference","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference </p>"},{"location":"markista/javadoc/model/Reference/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description String uri Reference.Scope scope String name Reference.Kind kind"},{"location":"markista/javadoc/model/Reference/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference() Reference(Reference.Kind kind, String name, String value) Reference(Reference.Scope scope, Reference.Kind kind, String name, String uri)"},{"location":"markista/javadoc/model/Reference/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Reference/#uri","title":"uri","text":""},{"location":"markista/javadoc/model/Reference/#scope","title":"scope","text":""},{"location":"markista/javadoc/model/Reference/#name","title":"name","text":""},{"location":"markista/javadoc/model/Reference/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/Text/","title":"Text","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text/#class-text","title":"Class Text","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text </p>"},{"location":"markista/javadoc/model/Text/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;? extends DocTree&gt; text"},{"location":"markista/javadoc/model/Text/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text() Text(List&lt;? extends DocTree&gt; t)"},{"location":"markista/javadoc/model/Text/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void set(List&lt;? extends DocTree&gt; t) boolean isEmpty() static Text empty()"},{"location":"markista/javadoc/model/Text/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Text/#text","title":"text","text":""},{"location":"markista/javadoc/model/Text/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text/#set","title":"set","text":"<p>void set(List&lt;? extends DocTree&gt; t)</p>"},{"location":"markista/javadoc/model/Text/#isempty","title":"isEmpty","text":"<p>boolean isEmpty()</p>"},{"location":"markista/javadoc/model/Text/#empty","title":"empty","text":"<p>static Text empty()</p>"},{"location":"markista/javadoc/model/TypeNode/","title":"TypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode/#class-typenode","title":"Class TypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode </p>"},{"location":"markista/javadoc/model/TypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;String&gt; supertypes List&lt;MethodNode&gt; methods List&lt;InterfaceNode&gt; interfaces List&lt;String&gt; implementedInterfaces String fullDescription List&lt;FieldNode&gt; fields List&lt;ExceptionNode&gt; exceptionClasses List&lt;EnumNode&gt; enumClasses List&lt;MethodNode&gt; constructors List&lt;ClassNode&gt; classes String arrayBrackets List&lt;AnnotationNode&gt; annotationClasses"},{"location":"markista/javadoc/model/TypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode(String qualifiedName, String simpleName, String packageName)"},{"location":"markista/javadoc/model/TypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void sort()"},{"location":"markista/javadoc/model/TypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/TypeNode/#supertypes","title":"supertypes","text":""},{"location":"markista/javadoc/model/TypeNode/#methods","title":"methods","text":""},{"location":"markista/javadoc/model/TypeNode/#interfaces","title":"interfaces","text":""},{"location":"markista/javadoc/model/TypeNode/#implementedinterfaces","title":"implementedInterfaces","text":""},{"location":"markista/javadoc/model/TypeNode/#fulldescription","title":"fullDescription","text":""},{"location":"markista/javadoc/model/TypeNode/#fields","title":"fields","text":""},{"location":"markista/javadoc/model/TypeNode/#exceptionclasses","title":"exceptionClasses","text":""},{"location":"markista/javadoc/model/TypeNode/#enumclasses","title":"enumClasses","text":""},{"location":"markista/javadoc/model/TypeNode/#constructors","title":"constructors","text":""},{"location":"markista/javadoc/model/TypeNode/#classes","title":"classes","text":""},{"location":"markista/javadoc/model/TypeNode/#arraybrackets","title":"arrayBrackets","text":""},{"location":"markista/javadoc/model/TypeNode/#annotationclasses","title":"annotationClasses","text":""},{"location":"markista/javadoc/model/TypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode/#sort","title":"sort","text":"<p>void sort()</p>"},{"location":"markista/javadoc/util/","title":"Package io.github.sandydunlop.markista.util","text":"<p>This package contains utility methods used by other packages.</p> Classes Class Description LinkResolver This class woks calculates the paths for Markdown documents  to link between different packages and to URLs of external packages and their contents. Util A set of utility methods for changing between qualified and unqualified names."},{"location":"markista/javadoc/util/LinkResolver/","title":"LinkResolver","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/LinkResolver/#class-linkresolver","title":"Class LinkResolver","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkResolver </p>"},{"location":"markista/javadoc/util/LinkResolver/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static HashMap&lt;String, String&gt; suffix private static HashMap&lt;String, String&gt; nativePackageNames private static final ModuleLayer moduleLayer private static String location private static Api api"},{"location":"markista/javadoc/util/LinkResolver/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkResolver()"},{"location":"markista/javadoc/util/LinkResolver/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void setLocation(String loc) static void setApi(Api a) static String resolveNative(String to) static Reference resolve(String to) static Reference resolve(String from, String to) static String relativize(String to) static String relativize(String from, String to) static String qualifyPackage(String from, String to) static String qualifyClass(String from, String to) static boolean isQualified(String from, String to) private static String getPackageName(String id) private static String getClassName(String id) static void addNativeModule(String moduleName, String baseUrl, String s)"},{"location":"markista/javadoc/util/LinkResolver/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#suffix","title":"suffix","text":""},{"location":"markista/javadoc/util/LinkResolver/#nativepackagenames","title":"nativePackageNames","text":""},{"location":"markista/javadoc/util/LinkResolver/#modulelayer","title":"moduleLayer","text":""},{"location":"markista/javadoc/util/LinkResolver/#location","title":"location","text":""},{"location":"markista/javadoc/util/LinkResolver/#api","title":"api","text":""},{"location":"markista/javadoc/util/LinkResolver/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#setlocation","title":"setLocation","text":"<p>static void setLocation(String loc)</p>"},{"location":"markista/javadoc/util/LinkResolver/#setapi","title":"setApi","text":"<p>static void setApi(Api a)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvenative","title":"resolveNative","text":"<p>static String resolveNative(String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve","title":"resolve","text":"<p>static Reference resolve(String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve_1","title":"resolve","text":"<p>static Reference resolve(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize","title":"relativize","text":"<p>static String relativize(String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize_1","title":"relativize","text":"<p>static String relativize(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifypackage","title":"qualifyPackage","text":"<p>static String qualifyPackage(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifyclass","title":"qualifyClass","text":"<p>static String qualifyClass(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#isqualified","title":"isQualified","text":"<p>static boolean isQualified(String from, String to)</p>"},{"location":"markista/javadoc/util/LinkResolver/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String id)</p>"},{"location":"markista/javadoc/util/LinkResolver/#getclassname","title":"getClassName","text":"<p>private static String getClassName(String id)</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodule","title":"addNativeModule","text":"<p>static void addNativeModule(String moduleName, String baseUrl, String s)</p>"},{"location":"markista/javadoc/util/NameUtils/","title":"NameUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/NameUtils/#class-nameutils","title":"Class NameUtils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.NameUtils </p>"},{"location":"markista/javadoc/util/NameUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description NameUtils()"},{"location":"markista/javadoc/util/NameUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. static String simplifyGenerics(String str) Changes qualified generic names to unqualified generic names. static String removeParentheses(String expression) Removes parentheses and what they contain from an expression static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name."},{"location":"markista/javadoc/util/NameUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/NameUtils/#simplifynames","title":"simplifyNames","text":"<p><code>static [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) simplifyNames([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) str)</code></p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Parameters:</p> <p><code>str</code> - A string that may contain one or more qualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/util/NameUtils/#simplifygenerics","title":"simplifyGenerics","text":"<p><code>static [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) simplifyGenerics([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) str)</code></p> <p>Changes qualified generic names to unqualified generic names.</p> <p>Parameters:</p> <p><code>str</code> - A string containing a qualified generic name.</p> <p>Returns:</p> <p>A string with the qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/util/NameUtils/#removeparentheses","title":"removeParentheses","text":"<p><code>static [String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) removeParentheses([String](https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/String.html) expression)</code></p> <p>Removes parentheses and what they contain from an expression</p> <p>Parameters:</p> <p><code>expression</code> - An expression such as <code>classname.method(parameter)</code>.</p> <p>Returns:</p> <p>The expression with the parentheses removed</p>"},{"location":"markista/javadoc/util/NameUtils/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p><code>static boolean isValidSimpleNameChar(char c)</code></p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/util/NameUtils/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p><code>static boolean isValidQualifiedNameChar(char c)</code></p> <p>Checks if the given character is valid in a qualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/util/Util/","title":"Util","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Util/#class-util","title":"Class Util","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Util </p>"},{"location":"markista/javadoc/util/Util/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Util()"},{"location":"markista/javadoc/util/Util/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String splitAndLink(String typesString) static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. static String removeParentheses(String expression) Removes parentheses and what they contain from an expression static String mdDocumentLink(String docName) static String mdDocumentLink(String phrase, String docName) static String mdAutoLink(String identifier, boolean simplify) Create a markdown link, automatically deciding what kind of link to make static String mdAutoLink(String identifier) static String mdAnchorLink(String phrase) static String mdAnchor(String phrase) static String linkGenerics(String str, boolean simplifiy) Changes qualified generic type names to unqualified generic type names and adds links to their API documentation. static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name. static boolean isNullOrEmpty(String s) static String inOneLine(String text) static String escape(String str)"},{"location":"markista/javadoc/util/Util/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Util/#splitandlink","title":"splitAndLink","text":"<p>static String splitAndLink(String typesString)</p>"},{"location":"markista/javadoc/util/Util/#simplifynames","title":"simplifyNames","text":"<p>static String simplifyNames(String str)</p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Parameters:</p> <p><code>str</code> - A string that may contain one or more qualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/util/Util/#removeparentheses","title":"removeParentheses","text":"<p>static String removeParentheses(String expression)</p> <p>Removes parentheses and what they contain from an expression</p> <p>Parameters:</p> <p><code>expression</code> - An expression such as <code>classname.method(parameter)</code>.</p> <p>Returns:</p> <p>The expression with the parentheses removed</p>"},{"location":"markista/javadoc/util/Util/#mddocumentlink","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String docName)</p>"},{"location":"markista/javadoc/util/Util/#mddocumentlink_1","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String phrase, String docName)</p>"},{"location":"markista/javadoc/util/Util/#mdautolink","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier, boolean simplify)</p> <p>Create a markdown link, automatically deciding what kind of link to make</p> <p>Parameters:</p> <p><code>identifier</code> - a package, type, or method identifier</p> <p><code>simplify</code> - if true, the fully simplified version of the identifier is shown</p> <p>Returns:</p> <p>markdown text for a link to a document for the specified identifier or an anchor link</p>"},{"location":"markista/javadoc/util/Util/#mdautolink_1","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier)</p>"},{"location":"markista/javadoc/util/Util/#mdanchorlink","title":"mdAnchorLink","text":"<p>static String mdAnchorLink(String phrase)</p>"},{"location":"markista/javadoc/util/Util/#mdanchor","title":"mdAnchor","text":"<p>static String mdAnchor(String phrase)</p>"},{"location":"markista/javadoc/util/Util/#linkgenerics","title":"linkGenerics","text":"<p>static String linkGenerics(String str, boolean simplifiy)</p> <p>Changes qualified generic type names to unqualified generic type names and adds links to their API documentation.</p> <p>Parameters:</p> <p><code>str</code> - A string containing a qualified generic name.</p> <p>Returns:</p> <p>A string with the qualified names changed to unqualified names and links to types added</p>"},{"location":"markista/javadoc/util/Util/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p>static boolean isValidSimpleNameChar(char c)</p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/util/Util/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p>static boolean isValidQualifiedNameChar(char c)</p> <p>Checks if the given character is valid in a qualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/util/Util/#isnullorempty","title":"isNullOrEmpty","text":"<p>static boolean isNullOrEmpty(String s)</p>"},{"location":"markista/javadoc/util/Util/#inoneline","title":"inOneLine","text":"<p>static String inOneLine(String text)</p>"},{"location":"markista/javadoc/util/Util/#escape","title":"escape","text":"<p>static String escape(String str)</p>"},{"location":"newsfeed/","title":"Newsfeed - An RSS News Reader for Minecraft","text":""},{"location":"newsfeed/#features","title":"Features","text":"<p>This mod adds a news feed to the game that displays the latest news from a configurable source. The mod is designed to be lightweight and easy to use, with a simple interface that allows you to quickly view the latest news headlines. The default news source is set to the BBC World News RSS feed, but you can change it to any RSS feed you like. </p> <p>When a new article is published to the feed, a notification will appear in the game. You can view the article by pressing the Newsfeed key (default <code>N</code>). The article will be displayed in a GUI that shows the title, description, and a link to the full article. You can also view previous headlines in the GUI.</p> <p> news article being displayed</p> <p> news headline being displayed</p>"},{"location":"newsfeed/#download","title":"Download","text":"<p>Downloads are available for Minecraft versions 1.21.4 to 1.21.7.</p> <p>JAR files are available to download on Modrinth.</p> <p>Source code is available on Github.</p>"},{"location":"newsfeed/#configuration","title":"Configuration","text":"<p>Newsfeed is compatible with mod_menu and can be configured in-game. </p> <p> configuration screen</p> <p>Alternatively, the configuration file is located in the <code>config</code> folder of your Minecraft instance. The file is named <code>newsfeed.json</code>. You can edit this file to change the settings of the mod.</p>"},{"location":"newsfeed/#license","title":"License","text":"<p>This mod is licensed under the MIT License. You are free to use, modify, and distribute this mod as long as you include the original license in your distribution.</p>"}]}
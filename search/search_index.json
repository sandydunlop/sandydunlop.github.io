{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I'm Sandy</p> <p>I'm a Software Engineer based in sunny Scotland.</p> <p>Over the past 21 years, I've worked in various areas of software development, including UNIX systems development, data warehousing, data security and IoT.</p> <p>I've worked on and led projects across multipe sectors including immigration and law enforcement in countries like the United Kingdom, United States, and United Arab Emirates.</p>"},{"location":"markista/","title":"Markista","text":"<p>Serving Markdown Flavored Documentation</p>"},{"location":"markista/#introduction","title":"Introduction","text":"<p>Markista is a doclet that turns your Java documentation comments into Markdown, suitable for use with Github, MkDocs, etc. </p> <p>Markista is under active development and has reached a point where it is becoming useful. There will be features that aren't completely implemented yet.</p> <p>As a demonstration, the Markdown Javadoc for Markista itself is available here. It was produced with the <code>-private</code> parameter which tells Markista to document private members of classes. By default only public and protected members are documented.</p>"},{"location":"markista/#gradle","title":"Gradle","text":"<p>Markista can be used from a Gradle build by following these simple steps:</p>"},{"location":"markista/#step-1-define-a-configuration-for-the-doclet","title":"Step 1: Define a Configuration for the Doclet","text":"<p>Create a configuration in your build.gradle file to manage the Markista dependency.</p> <pre><code>configurations {\n    markista\n}\n</code></pre>"},{"location":"markista/#step-2-add-the-markista-dependency","title":"Step 2: Add the Markista Dependency","text":"<p>Add Markista as a dependency under the configuration you just created. Markista is available in the Maven Central repository.</p> <pre><code>dependencies {\n    markista(\"io.github.sandydunlop:markista:0.1.10\")\n}\n</code></pre>"},{"location":"markista/#step-3-configure-the-javadoc-task","title":"Step 3: Configure the Javadoc Task","text":"<p>In the Javadoc task, specify the doclet path and the doclet class. This tells Gradle where to find the doclet and which one to use.</p> <pre><code>javadoc {\n    options {\n        docletpath = configurations.markista.files.asType(List)\n        doclet = 'io.github.sandydunlop.markista.doclet.MarkdownDoclet'\n        source = null\n        addBooleanOption('flatten', true)\n        addBooleanOption('external', true)\n    }\n}\n</code></pre>"},{"location":"markista/#command-line","title":"Command Line","text":"<p>Markista can be used from the command line with the <code>javadoc</code> command as follows:</p> <pre><code>javadoc -docletpath libs/markista-0.1.10.jar -doclet io.github.sandydunlop.markista.doclet.MarkdownDoclet src/main/java/my.package/Hello.java\n</code></pre>"},{"location":"markista/#parameters","title":"Parameters","text":"<code>-d &lt;directory&gt;</code> The directory to write the Markdown files to. <code>-private</code> Generate docs for private members. By default only public  and abstract members are documented. <code>-external</code> Create links to classes defined outside of the API being     documented (eg. java.utils.String) <code>-flatten</code> Don't create directories that contain no classes <code>-tabs</code> Display summary tables in content tabs <code>-verbose</code> Display progress information"},{"location":"markista/#download","title":"Download","text":"<p>JAR files for version 0.1.10 are available to download here.</p>"},{"location":"markista/#source-code","title":"Source Code","text":"<p>Markista's source code is available on Github under the GPLv3 license.</p> <p></p>"},{"location":"markista/javadoc/","title":"API","text":""},{"location":"markista/javadoc/#packages","title":"Packages","text":"Package Description io.github.sandydunlop.markista.util This package contains utility methods used by other packages. io.github.sandydunlop.markista.markdown This package contains the classes responsible for writing the Markdown file. io.github.sandydunlop.markista.doclet This package contains only the MarkdownDoclet class. io.github.sandydunlop.markista.model The types used to store structure and documentation information of the API."},{"location":"markista/javadoc/constant-values/","title":"Constant Field Values","text":"Modifier and Type Constant Field Value private static final  String DOT_HTML .html private static final  String JAVA_24_URL https://docs.oracle.com/en/java/javase/24/docs/api/ private static final  String DEFAULT_OUTPUT_DIRECTORY build/md-docs private static final  String FORMAT_SIMPLE_LINK [%s](%s) private static final  String TITLE_API API private static final  String TITLE_CONSTANT_FIELD Constant Field private static final  String TITLE_CONSTANT_FIELD_VALUES Constant Field Values private static final  String TITLE_DESCRIPTION Description private static final  String TITLE_EXPORTS Exports private static final  String TITLE_IMPLEMENTATIONS Implementations private static final  String TITLE_INTERFACE Interface private static final  String TITLE_MODIFIER_AND_TYPE Modifier and Type private static final  String TITLE_MODULE Module private static final  String TITLE_OPENS Opens private static final  String TITLE_PACKAGE Package private static final  String TITLE_PACKAGES Packages private static final  String TITLE_PROVIDES Provides private static final  String TITLE_REQUIRES Requires private static final  String TITLE_USES Uses private static final  String TITLE_VALUE Value private static final  String TEXT_CLASS Class private static final  String TEXT_DESCRIPTION Description private static final  String TEXT_CLASS Class private static final  String TEXT_DESCRIPTION Description private static final  String TEXT_MODIFIER_AND_TYPE Modifier and Type private static final  String BR static final  boolean OK true private static final  boolean FAILED false private static final  String UNUSED_OPTION_DESCRIPTION Unused option"},{"location":"markista/javadoc/doclet/","title":"Package io.github.sandydunlop.markista.doclet","text":"<p>This package contains only the MarkdownDoclet class. it is here only to allow the <code>markista</code> module to export the doclet without exposing the other packages the doclet depends on.</p> Classes Class Description MarkdownDoclet A doclet that renders javadoc comments as Markdown"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/","title":"MarkdownDoclet.Option","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#class-markdowndocletoption","title":"Class MarkdownDoclet.Option","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet.Option  All Implemented Interfaces: Doclet.Option</p> <p>Enclosing Class: MarkdownDoclet</p> <p>A base class for declaring options. Subtypes for specific options should implement the Doclet.Option.process(java.lang.String,java.util.List) method to handle instances of the option found on the command line.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name private final boolean hasArg private final String description private final String parameters"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet.Option(String name, boolean hasArg, String description, String parameters)"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description int getArgumentCount() String getDescription() Doclet.Option.Kind getKind() List&lt;String&gt; getNames() String getParameters()"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#name","title":"name","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#hasarg","title":"hasArg","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#description","title":"description","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#parameters","title":"parameters","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getargumentcount","title":"getArgumentCount","text":"<p>int getArgumentCount()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getdescription","title":"getDescription","text":"<p>String getDescription()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getkind","title":"getKind","text":"<p>Doclet.Option.Kind getKind()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getnames","title":"getNames","text":"<p>List&lt;String&gt; getNames()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet.Option/#getparameters","title":"getParameters","text":"<p>String getParameters()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet.Option</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/","title":"MarkdownDoclet","text":"<p>Package io.github.sandydunlop.markista.doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#class-markdowndoclet","title":"Class MarkdownDoclet","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.doclet.MarkdownDoclet  All Implemented Interfaces: Doclet</p> <p>A doclet that renders javadoc comments as Markdown</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description abstract MarkdownDoclet.Option A base class for declaring options."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. static final boolean OK Indicates success private static final boolean FAILED Indicates failure private static final String UNUSED_OPTION_DESCRIPTION private final Set&lt;MarkdownDoclet.Option&gt; options"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownDoclet() The default constructor, does nothing."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void main(String[] args) The starting point of Markista if it is being used without the Javadoc command. void init(Locale locale, Reporter reporter) Initializes the doclet. String getName() Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions() SourceVersion getSupportedSourceVersion() boolean run(DocletEnvironment environment) The <code>run</code> method is called by the Javadoc tool to begin running the doclet."},{"location":"markista/javadoc/doclet/MarkdownDoclet/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#ok","title":"OK","text":"<p>Indicates success</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#failed","title":"FAILED","text":"<p>Indicates failure</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#unused_option_description","title":"UNUSED_OPTION_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#options","title":"options","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/doclet/MarkdownDoclet/#main","title":"main","text":"<p>static void main(String[] args)</p> <p>The starting point of Markista if it is being used without the Javadoc command. This is useful for debugging.</p> <p>Parameters:</p> <p><code>args</code> - this parameter is ignored.</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#init","title":"init","text":"<p>void init(Locale locale, Reporter reporter)</p> <p>Initializes the doclet.</p> <p>Parameters:</p> <p><code>locale</code> - The locale used for messages</p> <p><code>reporter</code> - The reporter used for messages</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getname","title":"getName","text":"<p>String getName()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedoptions","title":"getSupportedOptions","text":"<p>Set&lt;? extends MarkdownDoclet.Option&gt; getSupportedOptions()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#getsupportedsourceversion","title":"getSupportedSourceVersion","text":"<p>SourceVersion getSupportedSourceVersion()</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet</p>"},{"location":"markista/javadoc/doclet/MarkdownDoclet/#run","title":"run","text":"<p>boolean run(DocletEnvironment environment)</p> <p>The <code>run</code> method is called by the Javadoc tool to begin running the doclet.</p> <p>Parameters:</p> <p><code>environment</code> - Represents the operating environment of a single invocation of the doclet.</p> <p>Returns:</p> <p>true if completed without errors, false if errors occurred.</p> <p>Specified By:</p> <p>jdk.javadoc.doclet.Doclet</p>"},{"location":"markista/javadoc/markdown/","title":"Package io.github.sandydunlop.markista.markdown","text":"<p>This package contains the classes responsible for writing the Markdown file. ModuleWriter handles the top-level module documentation including constant field values for the module. It uses PackageWriter to output the Markdown files for each PackageNode  contained within, which in turn uses TypeWriter to output the Markdown  files for each TypeNode  contained within.</p> Classes Class Description ModuleWriter A class that outputs a module's API documentation as Markdown. MarkdownTable A utility class for creating tables in Markdown documents. PackageWriter A class that outputs API package documentation as Markdown. TypeWriter A class that outputs API type documentation as Markdown."},{"location":"markista/javadoc/markdown/MarkdownTable.Column/","title":"MarkdownTable.Column","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#class-markdowntablecolumn","title":"Class MarkdownTable.Column","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.MarkdownTable.Column  Enclosing Class: MarkdownTable</p> <p>A class to represent the name and width of a column within a table.</p>"},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description String name int width"},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable.Column(String name) Constructs a new <code>Column</code> object with the specified name."},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#name","title":"name","text":""},{"location":"markista/javadoc/markdown/MarkdownTable.Column/#width","title":"width","text":""},{"location":"markista/javadoc/markdown/MarkdownTable/","title":"MarkdownTable","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markdown/MarkdownTable/#class-markdowntable","title":"Class MarkdownTable","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.MarkdownTable </p> <p>A utility class for creating tables in Markdown documents.</p> <p>This class allows adding columns with headings and rows with data. It automatically calculates column widths to align the table content.</p> <p>The table can be rendered as Markdown text to a Writer, optionally with indentation for nested formatting.</p>"},{"location":"markista/javadoc/markdown/MarkdownTable/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description MarkdownTable.Column A class to represent the name and width of a column within a table."},{"location":"markista/javadoc/markdown/MarkdownTable/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description List&lt;MarkdownTable.Column&gt; columns List&lt;String[]&gt; rows"},{"location":"markista/javadoc/markdown/MarkdownTable/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownTable() Constructs an empty MarkdownTable."},{"location":"markista/javadoc/markdown/MarkdownTable/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description MarkdownTable addColumn(String heading) Adds a column with the specified heading to the table. MarkdownTable addRow(String[] valueStrings) Adds a row of data to the table. void render(Writer writer) Renders the table as Markdown text without any indentation. void render(Writer writer, int indent) Renders the table as Markdown text with a given indentation level (number of spaces)."},{"location":"markista/javadoc/markdown/MarkdownTable/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markdown/MarkdownTable/#columns","title":"columns","text":""},{"location":"markista/javadoc/markdown/MarkdownTable/#rows","title":"rows","text":""},{"location":"markista/javadoc/markdown/MarkdownTable/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markdown/MarkdownTable/#addcolumn","title":"addColumn","text":"<p>MarkdownTable addColumn(String heading)</p> <p>Adds a column with the specified heading to the table.</p> <p>Parameters:</p> <p><code>heading</code> - String to be used as the column heading.</p> <p>Returns:</p> <p>The table (this) to allow method chaining.</p>"},{"location":"markista/javadoc/markdown/MarkdownTable/#addrow","title":"addRow","text":"<p>MarkdownTable addRow(String[] valueStrings)</p> <p>Adds a row of data to the table. The number of values should match or be less than the number of columns.</p> <p>Parameters:</p> <p><code>valueStrings</code> - One or more strings representing the data for this row.</p> <p>Returns:</p> <p>The table (this) to allow method chaining.</p>"},{"location":"markista/javadoc/markdown/MarkdownTable/#render","title":"render","text":"<p>void render(Writer writer)</p> <p>Renders the table as Markdown text without any indentation.</p> <p>Parameters:</p> <p><code>writer</code> - The Writer to output Markdown text to.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/MarkdownTable/#render_1","title":"render","text":"<p>void render(Writer writer, int indent)</p> <p>Renders the table as Markdown text with a given indentation level (number of spaces).</p> <p>Parameters:</p> <p><code>writer</code> - The Writer to output Markdown text to.</p> <p><code>indent</code> - The number of spaces to indent each line.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/","title":"ModuleWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#class-modulewriter","title":"Class ModuleWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.ModuleWriter </p> <p>A class that outputs a module's API documentation as Markdown.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TITLE_API private static final String TITLE_CONSTANT_FIELD private static final String TITLE_CONSTANT_FIELD_VALUES private static final String TITLE_DESCRIPTION private static final String TITLE_EXPORTS private static final String TITLE_IMPLEMENTATIONS private static final String TITLE_INTERFACE private static final String TITLE_MODIFIER_AND_TYPE private static final String TITLE_MODULE private static final String TITLE_OPENS private static final String TITLE_PACKAGE private static final String TITLE_PACKAGES private static final String TITLE_PROVIDES private static final String TITLE_REQUIRES private static final String TITLE_USES private static final String TITLE_VALUE private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document. private Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation."},{"location":"markista/javadoc/markdown/ModuleWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleWriter() Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markdown/ModuleWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(Api api) Output the documentation files for the specified API private void outputModuleDoc(ModuleNode moduleNode) Outputs a single module's documentation as a Markdown file. private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives) Outputs the directives declared in a module's <code>module-info.java</code> file. private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives) Outputs the <code>provides</code> directives declared in a module's <code>module-info.java</code> file. private String multiLink(List&lt;String&gt; names) Turns each member of a list of strings into a link to the documentation for the module, package, or type denoted by that list member. private String formatDirectivePackageDoc(DirectiveNode directive) Formats the first sentence of a DirectiveNode's documentation so that it uses only one line in the markdown output and links and code are rendered properly. private void outputConstantValues(ModuleNode moduleNode) Output the Constant Field Values page. private static String escape(String text)"},{"location":"markista/javadoc/markdown/ModuleWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markdown/ModuleWriter/#title_api","title":"TITLE_API","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_constant_field","title":"TITLE_CONSTANT_FIELD","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_constant_field_values","title":"TITLE_CONSTANT_FIELD_VALUES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_description","title":"TITLE_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_exports","title":"TITLE_EXPORTS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_implementations","title":"TITLE_IMPLEMENTATIONS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_interface","title":"TITLE_INTERFACE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_modifier_and_type","title":"TITLE_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_module","title":"TITLE_MODULE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_opens","title":"TITLE_OPENS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_package","title":"TITLE_PACKAGE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_packages","title":"TITLE_PACKAGES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_provides","title":"TITLE_PROVIDES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_requires","title":"TITLE_REQUIRES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_uses","title":"TITLE_USES","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#title_value","title":"TITLE_VALUE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markdown/ModuleWriter/#writedocs","title":"writeDocs","text":"<p>void writeDocs(Api api)</p> <p>Output the documentation files for the specified API</p> <p>Parameters:</p> <p><code>api</code> - The API to output the documentation for</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#outputmoduledoc","title":"outputModuleDoc","text":"<p>private void outputModuleDoc(ModuleNode moduleNode)</p> <p>Outputs a single module's documentation as a Markdown file. For each module, the documentation for each PackageNode it contains are then written.</p> <p>Parameters:</p> <p><code>moduleNode</code> - The module to write documentation for</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#outputmoduledirectives","title":"outputModuleDirectives","text":"<p>private void outputModuleDirectives(String title, String kind, List&lt;DirectiveNode&gt; directives)</p> <p>Outputs the directives declared in a module's <code>module-info.java</code> file.</p> <p>Parameters:</p> <p><code>title</code> - The title to be used in this section of the markdown page.</p> <p><code>kind</code> - The kind of directive being described</p> <p><code>directives</code> - The list of directives belonging to the module.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#outputmoduleprovidesdirectives","title":"outputModuleProvidesDirectives","text":"<p>private void outputModuleProvidesDirectives(List&lt;DirectiveNode&gt; directives)</p> <p>Outputs the <code>provides</code> directives declared in a module's <code>module-info.java</code> file.</p> <p>Parameters:</p> <p><code>directives</code> - The list of <code>provides</code> directives belonging to the module.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#multilink","title":"multiLink","text":"<p>private String multiLink(List&lt;String&gt; names)</p> <p>Turns each member of a list of strings into a link to the documentation for the module, package, or type denoted by that list member.</p> <p>Parameters:</p> <p><code>names</code> - A list of strings that represent modules, packages, or types.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#formatdirectivepackagedoc","title":"formatDirectivePackageDoc","text":"<p>private String formatDirectivePackageDoc(DirectiveNode directive)</p> <p>Formats the first sentence of a DirectiveNode's documentation so that it uses only one line in the markdown output and links and code are rendered properly.</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#outputconstantvalues","title":"outputConstantValues","text":"<p>private void outputConstantValues(ModuleNode moduleNode)</p> <p>Output the Constant Field Values page.</p> <p>Parameters:</p> <p><code>moduleNode</code> - The API tree node representing a module.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/ModuleWriter/#escape","title":"escape","text":"<p>private static String escape(String text)</p>"},{"location":"markista/javadoc/markdown/PackageWriter/","title":"PackageWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#class-packagewriter","title":"Class PackageWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.PackageWriter </p> <p>A class that outputs API package documentation as Markdown.</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TEXT_CLASS private static final String TEXT_DESCRIPTION private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document."},{"location":"markista/javadoc/markdown/PackageWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageWriter() Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markdown/PackageWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDocs(ModuleNode moduleNode) Output the documentation files for the specified API private void outputPackageDoc(PackageNode packageNode) Writes the Javadoc for a package as Markdown private void outputPackageMembers(String title, List&lt;PackageMember&gt; members) Writes the Javadoc for a package's members as Markdown"},{"location":"markista/javadoc/markdown/PackageWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markdown/PackageWriter/#text_class","title":"TEXT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#text_description","title":"TEXT_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markdown/PackageWriter/#writedocs","title":"writeDocs","text":"<p>void writeDocs(ModuleNode moduleNode)</p> <p>Output the documentation files for the specified API</p> <p>Parameters:</p> <p><code>moduleNode</code> - The module containing the packages to output the documentation for</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#outputpackagedoc","title":"outputPackageDoc","text":"<p>private void outputPackageDoc(PackageNode packageNode)</p> <p>Writes the Javadoc for a package as Markdown</p> <p>Parameters:</p> <p><code>packageNode</code> - the package</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/PackageWriter/#outputpackagemembers","title":"outputPackageMembers","text":"<p>private void outputPackageMembers(String title, List&lt;PackageMember&gt; members)</p> <p>Writes the Javadoc for a package's members as Markdown</p> <p>Parameters:</p> <p><code>title</code> - The title of this section in the Markdown document</p> <p><code>members</code> - The list of members of this package</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/","title":"TypeWriter","text":"<p>Package io.github.sandydunlop.markista.markdown</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#class-typewriter","title":"Class TypeWriter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.markdown.TypeWriter </p> <p>A class that outputs API type documentation as Markdown.</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String TEXT_CLASS private static final String TEXT_DESCRIPTION private static final String TEXT_MODIFIER_AND_TYPE private static final String BR private static final String NBSP private Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private Writer writer The Writer used to output the generated markdown content for the current document."},{"location":"markista/javadoc/markdown/TypeWriter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeWriter() Constructor that sets up the locations API documents will be written to."},{"location":"markista/javadoc/markdown/TypeWriter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void writeDoc(TypeNode typeNode) Tells the LinkResolver what class is about to be documented then  calls the appropriate method do begin the documentation process. private void outputTypeDoc(TypeNode typeNode, String typeKind) Writes a Markdown file for the Javadoc of a type private void outputSupertypes(TypeNode typeNode) Outputs the hierarchy of supertypes of a class private void outputImplementedInterfaces(TypeNode typeNode) Outputs details of any interfaces that this class implements private void outputEnclosingClass(TypeNode enclosingClass) Outputs details of the class that encloses this one private void outputNestedClassSummary(List&lt;PackageMember&gt; nestedClasses) Outputs a summary of nested classes within this one as Markdown private void outputEnumConstantsSummary(EnumNode enumNode) Outputs as summary of an enum's constants as Markdown private void outputFieldSummary(List&lt;FieldNode&gt; fields) Outputs a summary of this class's fields as Markdown private void outputConstructorSummary(List&lt;MethodNode&gt; methods) Outputs a the summary of this class's constructors as Markdown private void outputMethodSummary(List&lt;MethodNode&gt; methods) Writes the markdown for a class's method summary table private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode) Outputs enum constant details as Markdown private void outputDetails(List&lt;Node&gt; nodes) Writes the markdown for a class's method or field details. private void outputReferences(Node node) Outputs references for a type member private void outputMethodDetails(MethodNode method) Outputs the Javadoc of a method as Markdown private void outputMethodParams(MethodNode method) Outputs the parameters of a method as Markdown private void outputDeprecation(Deprecation status, Text text) Outputs the deprecation status of this type as Markdown"},{"location":"markista/javadoc/markdown/TypeWriter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/markdown/TypeWriter/#text_class","title":"TEXT_CLASS","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#text_description","title":"TEXT_DESCRIPTION","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#text_modifier_and_type","title":"TEXT_MODIFIER_AND_TYPE","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#br","title":"BR","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#nbsp","title":"NBSP","text":""},{"location":"markista/javadoc/markdown/TypeWriter/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#writer","title":"writer","text":"<p>The Writer used to output the generated markdown content for the current document. It handles writing text to the appropriate output file or stream.</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/markdown/TypeWriter/#writedoc","title":"writeDoc","text":"<p>void writeDoc(TypeNode typeNode)</p> <p>Tells the LinkResolver what class is about to be documented then  calls the appropriate method do begin the documentation process.</p> <p>Parameters:</p> <p><code>typeNode</code> - The type to be documented</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputtypedoc","title":"outputTypeDoc","text":"<p>private void outputTypeDoc(TypeNode typeNode, String typeKind)</p> <p>Writes a Markdown file for the Javadoc of a type</p> <p>Parameters:</p> <p><code>typeNode</code> - the type</p> <p><code>typeKind</code> - The name of the kind of the type eg. \"Class\", or \"Enum\"</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputsupertypes","title":"outputSupertypes","text":"<p>private void outputSupertypes(TypeNode typeNode)</p> <p>Outputs the hierarchy of supertypes of a class</p> <p>Parameters:</p> <p><code>typeNode</code> - the class</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputimplementedinterfaces","title":"outputImplementedInterfaces","text":"<p>private void outputImplementedInterfaces(TypeNode typeNode)</p> <p>Outputs details of any interfaces that this class implements</p> <p>Parameters:</p> <p><code>typeNode</code> - a TypeNode representing a class, interface, enum, or annotation</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputenclosingclass","title":"outputEnclosingClass","text":"<p>private void outputEnclosingClass(TypeNode enclosingClass)</p> <p>Outputs details of the class that encloses this one</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputnestedclasssummary","title":"outputNestedClassSummary","text":"<p>private void outputNestedClassSummary(List&lt;PackageMember&gt; nestedClasses)</p> <p>Outputs a summary of nested classes within this one as Markdown</p> <p>Parameters:</p> <p><code>nestedClasses</code> - a list of the nested classes</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputenumconstantssummary","title":"outputEnumConstantsSummary","text":"<p>private void outputEnumConstantsSummary(EnumNode enumNode)</p> <p>Outputs as summary of an enum's constants as Markdown</p> <p>Parameters:</p> <p><code>enumNode</code> - the enum</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputfieldsummary","title":"outputFieldSummary","text":"<p>private void outputFieldSummary(List&lt;FieldNode&gt; fields)</p> <p>Outputs a summary of this class's fields as Markdown</p> <p>Parameters:</p> <p><code>fields</code> - A list of fields belonging to this class</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputconstructorsummary","title":"outputConstructorSummary","text":"<p>private void outputConstructorSummary(List&lt;MethodNode&gt; methods)</p> <p>Outputs a the summary of this class's constructors as Markdown</p> <p>Parameters:</p> <p><code>methods</code> - A list of the constructor methods</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputmethodsummary","title":"outputMethodSummary","text":"<p>private void outputMethodSummary(List&lt;MethodNode&gt; methods)</p> <p>Writes the markdown for a class's method summary table</p> <p>Parameters:</p> <p><code>methods</code> - The list of methods to include in the summary table</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputenumconstantdetails","title":"outputEnumConstantDetails","text":"<p>private void outputEnumConstantDetails(List&lt;FieldNode&gt; constants, EnumNode enumNode)</p> <p>Outputs enum constant details as Markdown</p> <p>Parameters:</p> <p><code>constants</code> - a list of enum constants</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputdetails","title":"outputDetails","text":"<p>private void outputDetails(List&lt;Node&gt; nodes)</p> <p>Writes the markdown for a class's method or field details.</p> <p>Parameters:</p> <p><code>nodes</code> - The list of methods to write the details of</p> <p>Throws:</p> <p>IOException</p> <p>Since:</p> <p>0.1.0</p> <p>See Also:</p> <p>http://example.com</p> <p>List</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputreferences","title":"outputReferences","text":"<p>private void outputReferences(Node node)</p> <p>Outputs references for a type member</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputmethoddetails","title":"outputMethodDetails","text":"<p>private void outputMethodDetails(MethodNode method)</p> <p>Outputs the Javadoc of a method as Markdown</p> <p>Parameters:</p> <p><code>method</code> - the method</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputmethodparams","title":"outputMethodParams","text":"<p>private void outputMethodParams(MethodNode method)</p> <p>Outputs the parameters of a method as Markdown</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/markdown/TypeWriter/#outputdeprecation","title":"outputDeprecation","text":"<p>private void outputDeprecation(Deprecation status, Text text)</p> <p>Outputs the deprecation status of this type as Markdown</p> <p>Parameters:</p> <p><code>status</code> - The deprecation status</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/model/","title":"Package io.github.sandydunlop.markista.model","text":"<p>The types used to store structure and documentation information of the API.</p> ClassesInterfacesEnum Classes Class Description InterfaceNode A node representing a Java interface type Reference <code>Reference</code> encapsulates links to web pages, markdown pages, modules, packages, types, and methods. AnnotationNode A Node that represents an Annotation class OverriddenMethodNode Represents a method from another type that is overridden by a method in the type being documented. ModuleNode Represents a module node that contains directives, packages, and constant values. DirectiveNode Represents a directive within a module declaration, such as requires, exports, or provides. EnumNode Represents an enum type node with its constants. FieldNode A class to hold information about fields within a class, interface, or enum. PackageNode Represents a Java package TypeNode Represents a type in the API model, including its kind (class, interface, enum, annotation), supertypes, implemented interfaces, constructors, methods, fields, ownership, and relevant metadata. AbstractTypeOwner An abstract class with a set of methods useful to other subclasses of Node that can be owners of types. ParamNode A class to hold information about method parameters. ClassNode Represents a JAva class that extends a type node. Api Represents the API being documented, encapsulating its modules and packages. Node The base class for all types of nodes in the API model. MethodNode Contains information about a method being documented Text Represents a block of text. Class Description PackageMember Represents a member belonging to a package, such as a class, interface, or sub-package. TypeOwner A TypeOwner is a Node that can be set as the owner of another type. PackageOwner Interface representing an owner of packages. Class Description Modifier Enum representing Java language modifiers with their string  representations. Deprecation Enum representing the deprecation status of an element"},{"location":"markista/javadoc/model/AbstractTypeOwner/","title":"AbstractTypeOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#class-abstracttypeowner","title":"Class AbstractTypeOwner","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AbstractTypeOwner  All Implemented Interfaces: TypeOwner</p> <p>An abstract class with a set of methods useful to other subclasses of Node that can be owners of types.</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected List&lt;TypeNode&gt; types A list of types owned by this type owner"},{"location":"markista/javadoc/model/AbstractTypeOwner/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AbstractTypeOwner() Default constructor"},{"location":"markista/javadoc/model/AbstractTypeOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addType(TypeNode typeNode) Adds a type to the list of types owned by this instance. List&lt;TypeNode&gt; getTypes() Gets the list of types owned by this instance. List&lt;PackageMember&gt; getClasses() Gets the list of classes owned by this instance. List&lt;PackageMember&gt; getInterfaces() Gets the list of interfaces owned by this instance. List&lt;PackageMember&gt; getEnums() Gets the list of enums owned by this instance. List&lt;PackageMember&gt; getAnnotations() Gets the list of annotations owned by this instance. void addClass(ClassNode node) Adds a class to the list of classes owned by this instance. void addInterface(InterfaceNode node) Adds a interface to the list of interfaces owned by this instance. void addEnum(EnumNode node) Adds a enum to the list of enums owned by this instance. void addAnnotation(AnnotationNode node) Adds a annotation to the list of annotations owned by this instance. void sort() Sorts the nodes owned by this instance into alphabetical order."},{"location":"markista/javadoc/model/AbstractTypeOwner/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/AbstractTypeOwner/#types","title":"types","text":"<p>A list of types owned by this type owner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/AbstractTypeOwner/#addtype","title":"addType","text":"<p>void addType(TypeNode typeNode)</p> <p>Adds a type to the list of types owned by this instance.</p> <p>Parameters:</p> <p><code>typeNode</code> - the type to add</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#gettypes","title":"getTypes","text":"<p>List&lt;TypeNode&gt; getTypes()</p> <p>Gets the list of types owned by this instance.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getclasses","title":"getClasses","text":"<p>List&lt;PackageMember&gt; getClasses()</p> <p>Gets the list of classes owned by this instance.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getinterfaces","title":"getInterfaces","text":"<p>List&lt;PackageMember&gt; getInterfaces()</p> <p>Gets the list of interfaces owned by this instance.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getenums","title":"getEnums","text":"<p>List&lt;PackageMember&gt; getEnums()</p> <p>Gets the list of enums owned by this instance.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#getannotations","title":"getAnnotations","text":"<p>List&lt;PackageMember&gt; getAnnotations()</p> <p>Gets the list of annotations owned by this instance.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.TypeOwner</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addclass","title":"addClass","text":"<p>void addClass(ClassNode node)</p> <p>Adds a class to the list of classes owned by this instance.</p> <p>Parameters:</p> <p><code>node</code> - the class to add</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addinterface","title":"addInterface","text":"<p>void addInterface(InterfaceNode node)</p> <p>Adds a interface to the list of interfaces owned by this instance.</p> <p>Parameters:</p> <p><code>node</code> - the interface to add</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addenum","title":"addEnum","text":"<p>void addEnum(EnumNode node)</p> <p>Adds a enum to the list of enums owned by this instance.</p> <p>Parameters:</p> <p><code>node</code> - the enum to add</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#addannotation","title":"addAnnotation","text":"<p>void addAnnotation(AnnotationNode node)</p> <p>Adds a annotation to the list of annotations owned by this instance.</p> <p>Parameters:</p> <p><code>node</code> - the annotation to add</p>"},{"location":"markista/javadoc/model/AbstractTypeOwner/#sort","title":"sort","text":"<p>void sort()</p> <p>Sorts the nodes owned by this instance into alphabetical order.</p>"},{"location":"markista/javadoc/model/AnnotationNode/","title":"AnnotationNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/AnnotationNode/#class-annotationnode","title":"Class AnnotationNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.AnnotationNode </p> <p>A Node that represents an Annotation class</p>"},{"location":"markista/javadoc/model/AnnotationNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description AnnotationNode(String qualifiedName, String simpleName, PackageNode packageNode) Constructor that sets the minimum required information for an <code>AnnotationNode</code>."},{"location":"markista/javadoc/model/Api/","title":"Api","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Api/#class-api","title":"Class Api","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Api </p> <p>Represents the API being documented, encapsulating its modules and packages. Provides methods to add and retrieve modules, packages, and types, as well as sorting them.</p>"},{"location":"markista/javadoc/model/Api/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;ModuleNode&gt; modules List of modules included in the API. private List&lt;PackageNode&gt; packages List of packages included in the API. private ModuleNode unnamedModule Represents the unnamed module in the API."},{"location":"markista/javadoc/model/Api/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Api() Constructs an empty Api instance."},{"location":"markista/javadoc/model/Api/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getName() Returns the name of the API. void setName(String name) Sets the name of the API. void addModule(ModuleNode node) Adds a module to the API. List&lt;ModuleNode&gt; getModules() Returns the list of modules in the API. ModuleNode getModuleNode(String qualifiedName) Retrieves a module matching the specified qualified name. ModuleNode getUnnamedModuleNode() Returns the unnamed module of the API. void addPackage(PackageNode node) Adds a package to the API. List&lt;PackageNode&gt; getPackages() Returns the list of packages in the API. PackageNode getPackageNode(String qualifiedName) Retrieves a package matching the specified qualified name. TypeNode getTypeNode(String qualifiedName) Retrieves a TypeNode based on its fully qualified name. TypeNode getTypeNode(TypeElement type) Retrieves a TypeNode based on a TypeElement. void sort() Sorts the packages in descending order by qualified name and sorts all child types recursively. String commonBase() Computes the longest common base package prefix shared by all packages in this API."},{"location":"markista/javadoc/model/Api/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Api/#modules","title":"modules","text":"<p>List of modules included in the API.</p>"},{"location":"markista/javadoc/model/Api/#packages","title":"packages","text":"<p>List of packages included in the API.</p>"},{"location":"markista/javadoc/model/Api/#unnamedmodule","title":"unnamedModule","text":"<p>Represents the unnamed module in the API.</p>"},{"location":"markista/javadoc/model/Api/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Api/#getname","title":"getName","text":"<p>String getName()</p> <p>Returns the name of the API.</p> <p>Returns:</p> <p>The name of the API</p>"},{"location":"markista/javadoc/model/Api/#setname","title":"setName","text":"<p>void setName(String name)</p> <p>Sets the name of the API.</p> <p>Parameters:</p> <p><code>name</code> - The name of the API</p>"},{"location":"markista/javadoc/model/Api/#addmodule","title":"addModule","text":"<p>void addModule(ModuleNode node)</p> <p>Adds a module to the API.</p> <p>Parameters:</p> <p><code>node</code> - the ModuleNode instance to add.</p>"},{"location":"markista/javadoc/model/Api/#getmodules","title":"getModules","text":"<p>List&lt;ModuleNode&gt; getModules()</p> <p>Returns the list of modules in the API.</p> <p>Returns:</p> <p>List of ModuleNode objects representing the modules.</p>"},{"location":"markista/javadoc/model/Api/#getmodulenode","title":"getModuleNode","text":"<p>ModuleNode getModuleNode(String qualifiedName)</p> <p>Retrieves a module matching the specified qualified name.</p> <p>Parameters:</p> <p><code>qualifiedName</code> - the fully qualified name of the module.</p> <p>Returns:</p> <p>the matching ModuleNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/model/Api/#getunnamedmodulenode","title":"getUnnamedModuleNode","text":"<p>ModuleNode getUnnamedModuleNode()</p> <p>Returns the unnamed module of the API.</p> <p>Returns:</p> <p>the unnamed ModuleNode.</p>"},{"location":"markista/javadoc/model/Api/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode node)</p> <p>Adds a package to the API.</p> <p>Parameters:</p> <p><code>node</code> - the PackageNode instance to add.</p>"},{"location":"markista/javadoc/model/Api/#getpackages","title":"getPackages","text":"<p>List&lt;PackageNode&gt; getPackages()</p> <p>Returns the list of packages in the API.</p> <p>Returns:</p> <p>List of PackageNode objects representing the packages.</p>"},{"location":"markista/javadoc/model/Api/#getpackagenode","title":"getPackageNode","text":"<p>PackageNode getPackageNode(String qualifiedName)</p> <p>Retrieves a package matching the specified qualified name.</p> <p>Parameters:</p> <p><code>qualifiedName</code> - the fully qualified name of the package.</p> <p>Returns:</p> <p>the matching PackageNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/model/Api/#gettypenode","title":"getTypeNode","text":"<p>TypeNode getTypeNode(String qualifiedName)</p> <p>Retrieves a TypeNode based on its fully qualified name.</p> <p>Parameters:</p> <p><code>qualifiedName</code> - the fully qualified name of the type.</p> <p>Returns:</p> <p>the matching TypeNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/model/Api/#gettypenode_1","title":"getTypeNode","text":"<p>TypeNode getTypeNode(TypeElement type)</p> <p>Retrieves a TypeNode based on a TypeElement.</p> <p>Parameters:</p> <p><code>type</code> - the TypeElement to match.</p> <p>Returns:</p> <p>the matching TypeNode if found, or null if type is null or no match found.</p>"},{"location":"markista/javadoc/model/Api/#sort","title":"sort","text":"<p>void sort()</p> <p>Sorts the packages in descending order by qualified name and sorts all child types recursively.</p> <p>Overrides:</p> <p>AbstractTypeOwner.sort from AbstractTypeOwner</p>"},{"location":"markista/javadoc/model/Api/#commonbase","title":"commonBase","text":"<p>String commonBase()</p> <p>Computes the longest common base package prefix shared by all packages in this API.</p> <p>This method iterates through the list of packages and determines the common package name prefix, truncated at the nearest dot ('.') boundary. If no common base exists, returns an empty string.</p> <p>Returns:</p> <p>The longest common base package name shared by all packages, or an empty string if none.</p>"},{"location":"markista/javadoc/model/ClassNode/","title":"ClassNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ClassNode/#class-classnode","title":"Class ClassNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ClassNode </p> <p>Represents a JAva class that extends a type node. This class is intended to model a class within a program's structure. It inherits properties from TypeNode and specifies its own kind.</p>"},{"location":"markista/javadoc/model/ClassNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ClassNode(String qualifiedName, String simpleName, PackageNode packageNode) Constructs a new ClassNode."},{"location":"markista/javadoc/model/Deprecation/","title":"Deprecation","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Deprecation/#enum-deprecation","title":"Enum Deprecation","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Deprecation&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Deprecation </p> <p>Enum representing the deprecation status of an element</p>"},{"location":"markista/javadoc/model/Deprecation/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE FOR_REMOVAL DEPRECATED"},{"location":"markista/javadoc/model/Deprecation/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Deprecation()"},{"location":"markista/javadoc/model/Deprecation/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Deprecation values() static Deprecation valueOf(String name)"},{"location":"markista/javadoc/model/Deprecation/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Deprecation/#none","title":"NONE","text":"<p>public static final Deprecation NONE</p>"},{"location":"markista/javadoc/model/Deprecation/#for_removal","title":"FOR_REMOVAL","text":"<p>public static final Deprecation FOR_REMOVAL</p>"},{"location":"markista/javadoc/model/Deprecation/#deprecated","title":"DEPRECATED","text":"<p>public static final Deprecation DEPRECATED</p>"},{"location":"markista/javadoc/model/Deprecation/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Deprecation/#values","title":"values","text":"<p>static Deprecation values()</p>"},{"location":"markista/javadoc/model/Deprecation/#valueof","title":"valueOf","text":"<p>static Deprecation valueOf(String name)</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/","title":"DirectiveNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-directivenodekind","title":"Enum DirectiveNode.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.DirectiveNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode.Kind  Enclosing Class: DirectiveNode</p> <p>Enum representing the various kinds of directives possible in a module declaration.</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE REQUIRES EXPORTS OPENS USES PROVIDES"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode.Kind()"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static DirectiveNode.Kind values() static DirectiveNode.Kind valueOf(String name)"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/DirectiveNode.Kind/#none","title":"NONE","text":"<p>public static final DirectiveNode.Kind NONE</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#requires","title":"REQUIRES","text":"<p>public static final DirectiveNode.Kind REQUIRES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#exports","title":"EXPORTS","text":"<p>public static final DirectiveNode.Kind EXPORTS</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#opens","title":"OPENS","text":"<p>public static final DirectiveNode.Kind OPENS</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#uses","title":"USES","text":"<p>public static final DirectiveNode.Kind USES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#provides","title":"PROVIDES","text":"<p>public static final DirectiveNode.Kind PROVIDES</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/DirectiveNode.Kind/#values","title":"values","text":"<p>static DirectiveNode.Kind values()</p>"},{"location":"markista/javadoc/model/DirectiveNode.Kind/#valueof","title":"valueOf","text":"<p>static DirectiveNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/DirectiveNode/","title":"DirectiveNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/DirectiveNode/#class-directivenode","title":"Class DirectiveNode","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.DirectiveNode </p> <p>Represents a directive within a module declaration, such as requires, exports, or provides. Tracks the kind of directive, its name, whether it is transitive, associated packages, implementations, and related interface information.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private DirectiveNode.Kind kind The kind of this directive (e.g. REQUIRES, EXPORTS). private String name The name associated with this directive. private boolean transitive Indicates whether this directive is transitive. private List&lt;String&gt; packages List of package names associated with this directive. private List&lt;String&gt; implementations List of implementation names associated with this directive. private String interfaceName The interface name associated with this directive, if any."},{"location":"markista/javadoc/model/DirectiveNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description DirectiveNode(DirectiveNode.Kind kind, String name, boolean transitive) Constructs a DirectiveNode with the specified kind, name and transitive flag. DirectiveNode(DirectiveNode.Kind kind, String name) Constructs a DirectiveNode with the specified kind and name."},{"location":"markista/javadoc/model/DirectiveNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description DirectiveNode.Kind getKind() Returns the kind of this directive. String getName() Returns the name associated with this directive. boolean isTransitive() Indicates if this directive is transitive. void addPackage(String packageName) Adds a package name to this directive's package list. List&lt;String&gt; getPackages() Returns the list of package names associated with this directive. void addImplementation(String implementationName) Adds the name of an implementation associated with this directive. List&lt;String&gt; getImplementations() Returns the list of implementations associated with this directive. void setInterface(String interfaceName) Sets the interface name related to this directive. String getInterface() Returns the interface name associated with this directive."},{"location":"markista/javadoc/model/DirectiveNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/DirectiveNode/#kind","title":"kind","text":"<p>The kind of this directive (e.g. REQUIRES, EXPORTS).</p>"},{"location":"markista/javadoc/model/DirectiveNode/#name","title":"name","text":"<p>The name associated with this directive.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#transitive","title":"transitive","text":"<p>Indicates whether this directive is transitive.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#packages","title":"packages","text":"<p>List of package names associated with this directive.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#implementations","title":"implementations","text":"<p>List of implementation names associated with this directive.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#interfacename","title":"interfaceName","text":"<p>The interface name associated with this directive, if any.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/DirectiveNode/#getkind","title":"getKind","text":"<p>DirectiveNode.Kind getKind()</p> <p>Returns the kind of this directive.</p> <p>Returns:</p> <p>the directive kind.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Returns the name associated with this directive.</p> <p>Returns:</p> <p>the directive name.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#istransitive","title":"isTransitive","text":"<p>boolean isTransitive()</p> <p>Indicates if this directive is transitive.</p> <p>Returns:</p> <p>true if transitive; false otherwise.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#addpackage","title":"addPackage","text":"<p>void addPackage(String packageName)</p> <p>Adds a package name to this directive's package list.</p> <p>Parameters:</p> <p><code>packageName</code> - the fully qualified package name to add.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getpackages","title":"getPackages","text":"<p>List&lt;String&gt; getPackages()</p> <p>Returns the list of package names associated with this directive.</p> <p>Returns:</p> <p>list of package names.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#addimplementation","title":"addImplementation","text":"<p>void addImplementation(String implementationName)</p> <p>Adds the name of an implementation associated with this directive.</p> <p>Parameters:</p> <p><code>implementationName</code> - the name of the implementation to add.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getimplementations","title":"getImplementations","text":"<p>List&lt;String&gt; getImplementations()</p> <p>Returns the list of implementations associated with this directive.</p> <p>Returns:</p> <p>list of implementation names.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#setinterface","title":"setInterface","text":"<p>void setInterface(String interfaceName)</p> <p>Sets the interface name related to this directive.</p> <p>Parameters:</p> <p><code>interfaceName</code> - the interface name to set.</p>"},{"location":"markista/javadoc/model/DirectiveNode/#getinterface","title":"getInterface","text":"<p>String getInterface()</p> <p>Returns the interface name associated with this directive.</p> <p>Returns:</p> <p>the interface name, or an empty string if none set.</p>"},{"location":"markista/javadoc/model/EnumNode/","title":"EnumNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/EnumNode/#class-enumnode","title":"Class EnumNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.EnumNode </p> <p>Represents an enum type node with its constants.</p>"},{"location":"markista/javadoc/model/EnumNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;FieldNode&gt; constants"},{"location":"markista/javadoc/model/EnumNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description EnumNode(String qualifiedName, String simpleName, PackageNode packageNode) Constructs an EnumNode with the specified qualified name, simple name, and package."},{"location":"markista/javadoc/model/EnumNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addConstant(FieldNode constant) Adds a constant field to this enum. List&lt;FieldNode&gt; getConstants() Returns the list of enum constants."},{"location":"markista/javadoc/model/EnumNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/EnumNode/#constants","title":"constants","text":""},{"location":"markista/javadoc/model/EnumNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/EnumNode/#addconstant","title":"addConstant","text":"<p>void addConstant(FieldNode constant)</p> <p>Adds a constant field to this enum.</p> <p>Parameters:</p> <p><code>constant</code> - The FieldNode representing the enum constant.</p>"},{"location":"markista/javadoc/model/EnumNode/#getconstants","title":"getConstants","text":"<p>List&lt;FieldNode&gt; getConstants()</p> <p>Returns the list of enum constants.</p> <p>Returns:</p> <p>List of FieldNode constants.</p>"},{"location":"markista/javadoc/model/FieldNode/","title":"FieldNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/FieldNode/#class-fieldnode","title":"Class FieldNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.ParamNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.FieldNode </p> <p>A class to hold information about fields within a class, interface, or enum.</p>"},{"location":"markista/javadoc/model/FieldNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Serializable constantValue The constant value assigned to this field, if any."},{"location":"markista/javadoc/model/FieldNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description FieldNode(TypeNode type, String name) Constructs a FieldNode with the given type and name."},{"location":"markista/javadoc/model/FieldNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Serializable getConstantValue() Returns the constant value of this field. void setConstantValue(Serializable constantValue) Sets the constant value of this field. String fullSignature() Returns the full signature of the field including modifiers and name."},{"location":"markista/javadoc/model/FieldNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/FieldNode/#constantvalue","title":"constantValue","text":"<p>The constant value assigned to this field, if any.</p>"},{"location":"markista/javadoc/model/FieldNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/FieldNode/#getconstantvalue","title":"getConstantValue","text":"<p>Serializable getConstantValue()</p> <p>Returns the constant value of this field.</p> <p>Returns:</p> <p>The constant value of the field or null if none.</p>"},{"location":"markista/javadoc/model/FieldNode/#setconstantvalue","title":"setConstantValue","text":"<p>void setConstantValue(Serializable constantValue)</p> <p>Sets the constant value of this field.</p> <p>Parameters:</p> <p><code>constantValue</code> - The constant value to set.</p>"},{"location":"markista/javadoc/model/FieldNode/#fullsignature","title":"fullSignature","text":"<p>String fullSignature()</p> <p>Returns the full signature of the field including modifiers and name.</p> <p>Returns:</p> <p>The string representing the full signature.</p>"},{"location":"markista/javadoc/model/InterfaceNode/","title":"InterfaceNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/InterfaceNode/#class-interfacenode","title":"Class InterfaceNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner io.github.sandydunlop.markista.model.TypeNode \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.InterfaceNode </p> <p>A node representing a Java interface type</p>"},{"location":"markista/javadoc/model/InterfaceNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description InterfaceNode(String qualifiedName, String simpleName, PackageNode packageNode) Create an InterfaceNode with the specified details"},{"location":"markista/javadoc/model/MethodNode/","title":"MethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/MethodNode/#class-methodnode","title":"Class MethodNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.MethodNode </p> <p>Contains information about a method being documented</p>"},{"location":"markista/javadoc/model/MethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Text returnDescription Description of the method's return value. private String specifiedBy Name of the interface or specification this method is specified by. private TypeNode returnType The return type of this method. private OverriddenMethodNode overrides Information about the method that this method overrides, if any. private List&lt;ParamNode&gt; params List of parameters for this method. private List&lt;String&gt; thrownTypes List of exception types that this method declares it can throw. private TypeNode owner The type (class/interface) that owns this method."},{"location":"markista/javadoc/model/MethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MethodNode(TypeNode returnType, String name) Constructs a MethodNode with the specified return type and method name."},{"location":"markista/javadoc/model/MethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setOverriddenMethod(OverriddenMethodNode overrides) Sets the overridden method information that this method overrides. OverriddenMethodNode getOverriddenMethod() Returns the overridden method information, if any. TypeNode getReturnType() Returns the return type of this method. void addParam(ParamNode param) Adds a parameter to this method. List&lt;ParamNode&gt; getParams() Returns the list of parameters of this method. void addThrownType(String name) Adds an exception type that this method declares it throws. List&lt;String&gt; getThrownTypes() Returns the list of exception types declared by this method. void setOwner(TypeNode owner) Sets the owning type (class/interface) of this method. TypeNode getOwner() Returns the owning type of this method. void setSpecifiedBy(String interfaceName) Sets the interface or specification name this method is specified by. String getSpecifiedBy() Returns the name of the interface or specification this method is specified by. void setReturnDescription(Text text) Sets the description of the method's return value. Text getReturnDescription() Returns the description of the method's return value. String signature() Computes and returns the method signature string, including return type, name, and parameters. void setSimpleName(String name) Sets the simple name of the method. String getSimpleName() Returns the simple name of the method."},{"location":"markista/javadoc/model/MethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/MethodNode/#returndescription","title":"returnDescription","text":"<p>Description of the method's return value.</p>"},{"location":"markista/javadoc/model/MethodNode/#specifiedby","title":"specifiedBy","text":"<p>Name of the interface or specification this method is specified by.</p>"},{"location":"markista/javadoc/model/MethodNode/#returntype","title":"returnType","text":"<p>The return type of this method.</p>"},{"location":"markista/javadoc/model/MethodNode/#overrides","title":"overrides","text":"<p>Information about the method that this method overrides, if any.</p>"},{"location":"markista/javadoc/model/MethodNode/#params","title":"params","text":"<p>List of parameters for this method.</p>"},{"location":"markista/javadoc/model/MethodNode/#throwntypes","title":"thrownTypes","text":"<p>List of exception types that this method declares it can throw.</p>"},{"location":"markista/javadoc/model/MethodNode/#owner","title":"owner","text":"<p>The type (class/interface) that owns this method.</p>"},{"location":"markista/javadoc/model/MethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/MethodNode/#setoverriddenmethod","title":"setOverriddenMethod","text":"<p>void setOverriddenMethod(OverriddenMethodNode overrides)</p> <p>Sets the overridden method information that this method overrides.</p> <p>Parameters:</p> <p><code>overrides</code> - an OverriddenMethodNode representing the overridden method.</p>"},{"location":"markista/javadoc/model/MethodNode/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>OverriddenMethodNode getOverriddenMethod()</p> <p>Returns the overridden method information, if any.</p> <p>Returns:</p> <p>the OverriddenMethodNode representing the overridden method, or null if none.</p>"},{"location":"markista/javadoc/model/MethodNode/#getreturntype","title":"getReturnType","text":"<p>TypeNode getReturnType()</p> <p>Returns the return type of this method.</p> <p>Returns:</p> <p>the TypeNode representing the return type.</p>"},{"location":"markista/javadoc/model/MethodNode/#addparam","title":"addParam","text":"<p>void addParam(ParamNode param)</p> <p>Adds a parameter to this method.</p> <p>Parameters:</p> <p><code>param</code> - a ParamNode representing the parameter to add.</p>"},{"location":"markista/javadoc/model/MethodNode/#getparams","title":"getParams","text":"<p>List&lt;ParamNode&gt; getParams()</p> <p>Returns the list of parameters of this method.</p> <p>Returns:</p> <p>List of ParamNode objects representing the method parameters.</p>"},{"location":"markista/javadoc/model/MethodNode/#addthrowntype","title":"addThrownType","text":"<p>void addThrownType(String name)</p> <p>Adds an exception type that this method declares it throws.</p> <p>Parameters:</p> <p><code>name</code> - the fully qualified name of the exception type.</p>"},{"location":"markista/javadoc/model/MethodNode/#getthrowntypes","title":"getThrownTypes","text":"<p>List&lt;String&gt; getThrownTypes()</p> <p>Returns the list of exception types declared by this method.</p> <p>Returns:</p> <p>List of exception type names as Strings.</p>"},{"location":"markista/javadoc/model/MethodNode/#setowner","title":"setOwner","text":"<p>void setOwner(TypeNode owner)</p> <p>Sets the owning type (class/interface) of this method.</p> <p>Parameters:</p> <p><code>owner</code> - the TypeNode representing the owner.</p>"},{"location":"markista/javadoc/model/MethodNode/#getowner","title":"getOwner","text":"<p>TypeNode getOwner()</p> <p>Returns the owning type of this method.</p> <p>Returns:</p> <p>the TypeNode representing the owner.</p>"},{"location":"markista/javadoc/model/MethodNode/#setspecifiedby","title":"setSpecifiedBy","text":"<p>void setSpecifiedBy(String interfaceName)</p> <p>Sets the interface or specification name this method is specified by.</p> <p>Parameters:</p> <p><code>interfaceName</code> - the name of the specifying interface or specification.</p>"},{"location":"markista/javadoc/model/MethodNode/#getspecifiedby","title":"getSpecifiedBy","text":"<p>String getSpecifiedBy()</p> <p>Returns the name of the interface or specification this method is specified by.</p> <p>Returns:</p> <p>the specifying interface or specification name.</p>"},{"location":"markista/javadoc/model/MethodNode/#setreturndescription","title":"setReturnDescription","text":"<p>void setReturnDescription(Text text)</p> <p>Sets the description of the method's return value.</p> <p>Parameters:</p> <p><code>text</code> - a Text object describing the return value.</p>"},{"location":"markista/javadoc/model/MethodNode/#getreturndescription","title":"getReturnDescription","text":"<p>Text getReturnDescription()</p> <p>Returns the description of the method's return value.</p> <p>Returns:</p> <p>a Text object containing the return description.</p>"},{"location":"markista/javadoc/model/MethodNode/#signature","title":"signature","text":"<p>String signature()</p> <p>Computes and returns the method signature string, including return type, name, and parameters. Example format: \"java.lang.String methodName(int, java.util.List)\"</p> <p>Returns:</p> <p>the method signature as a String.</p>"},{"location":"markista/javadoc/model/MethodNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p> <p>Sets the simple name of the method.</p> <p>Parameters:</p> <p><code>name</code> - the simple name to set.</p>"},{"location":"markista/javadoc/model/MethodNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p> <p>Returns the simple name of the method.</p> <p>Returns:</p> <p>the simple name as a String.</p>"},{"location":"markista/javadoc/model/Modifier/","title":"Modifier","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Modifier/#enum-modifier","title":"Enum Modifier","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Modifier&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Modifier </p> <p>Enum representing Java language modifiers with their string  representations.</p>"},{"location":"markista/javadoc/model/Modifier/#enum-constants","title":"Enum Constants","text":"Enum Constant Description PUBLIC PROTECTED PRIVATE STATIC FINAL ABSTRACT SYNCHRONIZED TRANSIENT VOLATILE NATIVE STRICTFP DEFAULT"},{"location":"markista/javadoc/model/Modifier/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name The string representation of the modifier."},{"location":"markista/javadoc/model/Modifier/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Modifier(String s) Constructs a Modifier enum constant with the specified string value."},{"location":"markista/javadoc/model/Modifier/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Modifier values() static Modifier valueOf(String name) String toString() Returns the string representation of this modifier."},{"location":"markista/javadoc/model/Modifier/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Modifier/#public","title":"PUBLIC","text":"<p>public static final Modifier PUBLIC</p>"},{"location":"markista/javadoc/model/Modifier/#protected","title":"PROTECTED","text":"<p>public static final Modifier PROTECTED</p>"},{"location":"markista/javadoc/model/Modifier/#private","title":"PRIVATE","text":"<p>public static final Modifier PRIVATE</p>"},{"location":"markista/javadoc/model/Modifier/#static","title":"STATIC","text":"<p>public static final Modifier STATIC</p>"},{"location":"markista/javadoc/model/Modifier/#final","title":"FINAL","text":"<p>public static final Modifier FINAL</p>"},{"location":"markista/javadoc/model/Modifier/#abstract","title":"ABSTRACT","text":"<p>public static final Modifier ABSTRACT</p>"},{"location":"markista/javadoc/model/Modifier/#synchronized","title":"SYNCHRONIZED","text":"<p>public static final Modifier SYNCHRONIZED</p>"},{"location":"markista/javadoc/model/Modifier/#transient","title":"TRANSIENT","text":"<p>public static final Modifier TRANSIENT</p>"},{"location":"markista/javadoc/model/Modifier/#volatile","title":"VOLATILE","text":"<p>public static final Modifier VOLATILE</p>"},{"location":"markista/javadoc/model/Modifier/#native","title":"NATIVE","text":"<p>public static final Modifier NATIVE</p>"},{"location":"markista/javadoc/model/Modifier/#strictfp","title":"STRICTFP","text":"<p>public static final Modifier STRICTFP</p>"},{"location":"markista/javadoc/model/Modifier/#default","title":"DEFAULT","text":"<p>public static final Modifier DEFAULT</p>"},{"location":"markista/javadoc/model/Modifier/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Modifier/#name","title":"name","text":"<p>The string representation of the modifier.</p>"},{"location":"markista/javadoc/model/Modifier/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Modifier/#values","title":"values","text":"<p>static Modifier values()</p>"},{"location":"markista/javadoc/model/Modifier/#valueof","title":"valueOf","text":"<p>static Modifier valueOf(String name)</p>"},{"location":"markista/javadoc/model/Modifier/#tostring","title":"toString","text":"<p>String toString()</p> <p>Returns the string representation of this modifier.</p> <p>Returns:</p> <p>The string name of the modifier.</p> <p>Overrides:</p> <p>Enum&lt;Modifier&gt; from Enum&lt;Modifier&gt;</p>"},{"location":"markista/javadoc/model/ModuleNode/","title":"ModuleNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ModuleNode/#class-modulenode","title":"Class ModuleNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ModuleNode  All Implemented Interfaces: PackageOwner</p> <p>Represents a module node that contains directives, packages, and constant values.  Implements the PackageOwner interface to manage contained packages.</p>"},{"location":"markista/javadoc/model/ModuleNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;DirectiveNode&gt; directives private List&lt;PackageMember&gt; packages private List&lt;FieldNode&gt; constantValues"},{"location":"markista/javadoc/model/ModuleNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleNode(String moduleName) Constructs a ModuleNode with the given module name."},{"location":"markista/javadoc/model/ModuleNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getName() Returns the name (qualified name) of this module. List&lt;PackageMember&gt; getPackages() Returns the list of packages contained in this module. void addPackage(PackageNode packageNode) Adds a package to this module. void addDirective(DirectiveNode directive) Adds a directive to this module. List&lt;DirectiveNode&gt; getDirectives() Returns the list of directives declared in this module. void addConstantValue(FieldNode constant) Adds a constant field value to this module. List&lt;FieldNode&gt; getConstantValues() Returns the list of constant values defined in this module. List&lt;DirectiveNode&gt; getExports() Returns the list of 'exports' directives in this module. List&lt;DirectiveNode&gt; getRequires() Returns the list of 'requires' directives in this module. List&lt;DirectiveNode&gt; getOpens() Returns the list of 'opens' directives in this module. List&lt;DirectiveNode&gt; getUses() Returns the list of 'uses' directives in this module. List&lt;DirectiveNode&gt; getProvides() Returns the list of 'provides' directives in this module."},{"location":"markista/javadoc/model/ModuleNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/ModuleNode/#directives","title":"directives","text":""},{"location":"markista/javadoc/model/ModuleNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/ModuleNode/#constantvalues","title":"constantValues","text":""},{"location":"markista/javadoc/model/ModuleNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ModuleNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Returns the name (qualified name) of this module.</p> <p>Returns:</p> <p>The module name.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getpackages","title":"getPackages","text":"<p>List&lt;PackageMember&gt; getPackages()</p> <p>Returns the list of packages contained in this module.</p> <p>Returns:</p> <p>List of PackageMember objects.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageOwner</p>"},{"location":"markista/javadoc/model/ModuleNode/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode packageNode)</p> <p>Adds a package to this module.</p> <p>Parameters:</p> <p><code>packageNode</code> - The PackageNode to add.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageOwner</p>"},{"location":"markista/javadoc/model/ModuleNode/#adddirective","title":"addDirective","text":"<p>void addDirective(DirectiveNode directive)</p> <p>Adds a directive to this module.</p> <p>Parameters:</p> <p><code>directive</code> - The DirectiveNode to add.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getdirectives","title":"getDirectives","text":"<p>List&lt;DirectiveNode&gt; getDirectives()</p> <p>Returns the list of directives declared in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects.</p>"},{"location":"markista/javadoc/model/ModuleNode/#addconstantvalue","title":"addConstantValue","text":"<p>void addConstantValue(FieldNode constant)</p> <p>Adds a constant field value to this module.</p> <p>Parameters:</p> <p><code>constant</code> - The FieldNode representing the constant.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getconstantvalues","title":"getConstantValues","text":"<p>List&lt;FieldNode&gt; getConstantValues()</p> <p>Returns the list of constant values defined in this module.</p> <p>Returns:</p> <p>List of FieldNode objects.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getexports","title":"getExports","text":"<p>List&lt;DirectiveNode&gt; getExports()</p> <p>Returns the list of 'exports' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by EXPORTS kind.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getrequires","title":"getRequires","text":"<p>List&lt;DirectiveNode&gt; getRequires()</p> <p>Returns the list of 'requires' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by REQUIRES kind.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getopens","title":"getOpens","text":"<p>List&lt;DirectiveNode&gt; getOpens()</p> <p>Returns the list of 'opens' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by OPENS kind.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getuses","title":"getUses","text":"<p>List&lt;DirectiveNode&gt; getUses()</p> <p>Returns the list of 'uses' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by USES kind.</p>"},{"location":"markista/javadoc/model/ModuleNode/#getprovides","title":"getProvides","text":"<p>List&lt;DirectiveNode&gt; getProvides()</p> <p>Returns the list of 'provides' directives in this module.</p> <p>Returns:</p> <p>List of DirectiveNode objects filtered by PROVIDES kind.</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/","title":"Node.ModifierSorter","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#class-nodemodifiersorter","title":"Class Node.ModifierSorter","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node.ModifierSorter  Enclosing Class: Node</p> <p>Utility class to sort modifiers according to Java language conventions.</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final List&lt;Modifier&gt; ORDER The fixed order of modifiers as per Java language specification."},{"location":"markista/javadoc/model/Node.ModifierSorter/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node.ModifierSorter() Private constructor to prevent instantiation."},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet) Sort the given set of modifiers into the standard order."},{"location":"markista/javadoc/model/Node.ModifierSorter/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#order","title":"ORDER","text":"<p>The fixed order of modifiers as per Java language specification.</p>"},{"location":"markista/javadoc/model/Node.ModifierSorter/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node.ModifierSorter/#sortmodifiers","title":"sortModifiers","text":"<p>static List&lt;Modifier&gt; sortModifiers(Set&lt;Modifier&gt; modifierSet)</p> <p>Sort the given set of modifiers into the standard order.</p> <p>Parameters:</p> <p><code>modifierSet</code> - The set of modifiers to sort.</p> <p>Returns:</p> <p>List of modifiers sorted in the defined order.</p>"},{"location":"markista/javadoc/model/Node/","title":"Node","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Node/#class-node","title":"Class Node","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Node </p> <p>The base class for all types of nodes in the API model.</p>"},{"location":"markista/javadoc/model/Node/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description static Node.ModifierSorter Utility class to sort modifiers according to Java language conventions."},{"location":"markista/javadoc/model/Node/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description protected String simpleName The simple form of the node's name protected String qualifiedName The canonical form of the node's name protected PackageNode packageNode A PackageNode representing the package the node belongs to private Set&lt;Modifier&gt; modifiers A list of the modifiers a node has private Deprecation deprecation The deprecation status of the node private Text deprecationText Text describing the deprecation state of the node private Text since Text showing when this node was added to the API protected Text firstSentence The first sentence of the Javadoc for this node private Text body The body text of the Javadoc for this node private Text fullBody The full text of the Javadoc for this node private List&lt;Reference&gt; references A list of references specified in this node's Javadoc"},{"location":"markista/javadoc/model/Node/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Node() The default constructor"},{"location":"markista/javadoc/model/Node/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void addModifier(Modifier mod) Adds a modifier to the set of modifiers. Set&lt;Modifier&gt; getModifiers() Returns the set of modifiers for this node. void setDeprecation(Deprecation deprecation) Sets the deprecation status for this node. Deprecation getDeprecation() Retrieves the deprecation status of this node. void setDeprecationText(Text text) Sets the deprecation text. Text getDeprecationText() Returns the deprecation text. void setSince(Text text) Sets the 'since' documentation text. Text getSince() Returns the 'since' documentation text. void setFirstSentence(Text text) Sets the first sentence of the documentation. Text getFirstSentence() Returns the first sentence of the documentation. void setBody(Text text) Sets the main body documentation text. Text getBody() Returns the main body documentation text. void setFullBody(Text text) Sets the full body documentation text including tags. Text getFullBody() Returns the full body documentation text including tags. void setReferences(List&lt;Reference&gt; refs) Sets the list of references for this node. List&lt;Reference&gt; getReferences() Returns the list of references associated with this node. String getModifiersString() Returns a string representation of modifiers, excluding 'public'."},{"location":"markista/javadoc/model/Node/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Node/#simplename","title":"simpleName","text":"<p>The simple form of the node's name</p>"},{"location":"markista/javadoc/model/Node/#qualifiedname","title":"qualifiedName","text":"<p>The canonical form of the node's name</p>"},{"location":"markista/javadoc/model/Node/#packagenode","title":"packageNode","text":"<p>A PackageNode representing the package the node belongs to</p>"},{"location":"markista/javadoc/model/Node/#modifiers","title":"modifiers","text":"<p>A list of the modifiers a node has</p>"},{"location":"markista/javadoc/model/Node/#deprecation","title":"deprecation","text":"<p>The deprecation status of the node</p>"},{"location":"markista/javadoc/model/Node/#deprecationtext","title":"deprecationText","text":"<p>Text describing the deprecation state of the node</p>"},{"location":"markista/javadoc/model/Node/#since","title":"since","text":"<p>Text showing when this node was added to the API</p>"},{"location":"markista/javadoc/model/Node/#firstsentence","title":"firstSentence","text":"<p>The first sentence of the Javadoc for this node</p>"},{"location":"markista/javadoc/model/Node/#body","title":"body","text":"<p>The body text of the Javadoc for this node</p>"},{"location":"markista/javadoc/model/Node/#fullbody","title":"fullBody","text":"<p>The full text of the Javadoc for this node</p>"},{"location":"markista/javadoc/model/Node/#references","title":"references","text":"<p>A list of references specified in this node's Javadoc</p>"},{"location":"markista/javadoc/model/Node/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Node/#addmodifier","title":"addModifier","text":"<p>void addModifier(Modifier mod)</p> <p>Adds a modifier to the set of modifiers.</p> <p>Parameters:</p> <p><code>mod</code> - The modifier to add.</p>"},{"location":"markista/javadoc/model/Node/#getmodifiers","title":"getModifiers","text":"<p>Set&lt;Modifier&gt; getModifiers()</p> <p>Returns the set of modifiers for this node.</p> <p>Returns:</p> <p>Set of modifiers.</p>"},{"location":"markista/javadoc/model/Node/#setdeprecation","title":"setDeprecation","text":"<p>void setDeprecation(Deprecation deprecation)</p> <p>Sets the deprecation status for this node.</p> <p>Parameters:</p> <p><code>deprecation</code> - The deprecation enum value.</p>"},{"location":"markista/javadoc/model/Node/#getdeprecation","title":"getDeprecation","text":"<p>Deprecation getDeprecation()</p> <p>Retrieves the deprecation status of this node.</p> <p>Returns:</p> <p>The deprecation enum value.</p>"},{"location":"markista/javadoc/model/Node/#setdeprecationtext","title":"setDeprecationText","text":"<p>void setDeprecationText(Text text)</p> <p>Sets the deprecation text.</p> <p>Parameters:</p> <p><code>text</code> - The text describing the deprecation.</p>"},{"location":"markista/javadoc/model/Node/#getdeprecationtext","title":"getDeprecationText","text":"<p>Text getDeprecationText()</p> <p>Returns the deprecation text.</p> <p>Returns:</p> <p>The deprecation descriptive text.</p>"},{"location":"markista/javadoc/model/Node/#setsince","title":"setSince","text":"<p>void setSince(Text text)</p> <p>Sets the 'since' documentation text.</p> <p>Parameters:</p> <p><code>text</code> - The since text.</p>"},{"location":"markista/javadoc/model/Node/#getsince","title":"getSince","text":"<p>Text getSince()</p> <p>Returns the 'since' documentation text.</p> <p>Returns:</p> <p>The since text.</p>"},{"location":"markista/javadoc/model/Node/#setfirstsentence","title":"setFirstSentence","text":"<p>void setFirstSentence(Text text)</p> <p>Sets the first sentence of the documentation.</p> <p>Parameters:</p> <p><code>text</code> - The first sentence text.</p>"},{"location":"markista/javadoc/model/Node/#getfirstsentence","title":"getFirstSentence","text":"<p>Text getFirstSentence()</p> <p>Returns the first sentence of the documentation.</p> <p>Returns:</p> <p>The first sentence text.</p>"},{"location":"markista/javadoc/model/Node/#setbody","title":"setBody","text":"<p>void setBody(Text text)</p> <p>Sets the main body documentation text.</p> <p>Parameters:</p> <p><code>text</code> - The body text.</p>"},{"location":"markista/javadoc/model/Node/#getbody","title":"getBody","text":"<p>Text getBody()</p> <p>Returns the main body documentation text.</p> <p>Returns:</p> <p>The body text.</p>"},{"location":"markista/javadoc/model/Node/#setfullbody","title":"setFullBody","text":"<p>void setFullBody(Text text)</p> <p>Sets the full body documentation text including tags.</p> <p>Parameters:</p> <p><code>text</code> - The full body text.</p>"},{"location":"markista/javadoc/model/Node/#getfullbody","title":"getFullBody","text":"<p>Text getFullBody()</p> <p>Returns the full body documentation text including tags.</p> <p>Returns:</p> <p>The full body text.</p>"},{"location":"markista/javadoc/model/Node/#setreferences","title":"setReferences","text":"<p>void setReferences(List&lt;Reference&gt; refs)</p> <p>Sets the list of references for this node.</p> <p>Parameters:</p> <p><code>refs</code> - List of Reference objects.</p>"},{"location":"markista/javadoc/model/Node/#getreferences","title":"getReferences","text":"<p>List&lt;Reference&gt; getReferences()</p> <p>Returns the list of references associated with this node.</p> <p>Returns:</p> <p>List of Reference objects.</p>"},{"location":"markista/javadoc/model/Node/#getmodifiersstring","title":"getModifiersString","text":"<p>String getModifiersString()</p> <p>Returns a string representation of modifiers, excluding 'public'. The modifiers are sorted according to a predefined order.</p> <p>Returns:</p> <p>A string containing sorted modifiers separated by spaces.</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/","title":"OverriddenMethodNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#class-overriddenmethodnode","title":"Class OverriddenMethodNode","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.OverriddenMethodNode </p> <p>Represents a method from another type that is overridden by a method in the type being documented.</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private String qualifiedClassName Fully qualified name of the class that declares the overridden method. private String methodName Name of the overridden method."},{"location":"markista/javadoc/model/OverriddenMethodNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description OverriddenMethodNode(String qualifiedClassName, String methodName) Constructs an OverriddenMethodNode with specified qualified class name and method name."},{"location":"markista/javadoc/model/OverriddenMethodNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description String getClassName() Returns the fully qualified class name of the overridden method. String getMethodName() Returns the name of the overridden method."},{"location":"markista/javadoc/model/OverriddenMethodNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#qualifiedclassname","title":"qualifiedClassName","text":"<p>Fully qualified name of the class that declares the overridden method.</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#methodname","title":"methodName","text":"<p>Name of the overridden method.</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/OverriddenMethodNode/#getclassname","title":"getClassName","text":"<p>String getClassName()</p> <p>Returns the fully qualified class name of the overridden method.</p> <p>Returns:</p> <p>The qualified class name.</p>"},{"location":"markista/javadoc/model/OverriddenMethodNode/#getmethodname","title":"getMethodName","text":"<p>String getMethodName()</p> <p>Returns the name of the overridden method.</p> <p>Returns:</p> <p>The method name.</p>"},{"location":"markista/javadoc/model/PackageMember/","title":"PackageMember","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageMember/#interface-packagemember","title":"Interface PackageMember","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageMember </p> <p>Represents a member belonging to a package, such as a class, interface, or sub-package.</p>"},{"location":"markista/javadoc/model/PackageMember/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract String getName() Returns the simple name of this package member. abstract Text getDescription() Returns the description of this package member as a Text object."},{"location":"markista/javadoc/model/PackageMember/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageMember/#getname","title":"getName","text":"<p>abstract String getName()</p> <p>Returns the simple name of this package member.</p> <p>Returns:</p> <p>The name as a String.</p>"},{"location":"markista/javadoc/model/PackageMember/#getdescription","title":"getDescription","text":"<p>abstract Text getDescription()</p> <p>Returns the description of this package member as a Text object.</p> <p>Returns:</p> <p>The description text.</p>"},{"location":"markista/javadoc/model/PackageNode/","title":"PackageNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageNode/#class-packagenode","title":"Class PackageNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageNode  All Implemented Interfaces: PackageMember, PackageOwner</p> <p>Represents a Java package</p>"},{"location":"markista/javadoc/model/PackageNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private ModuleNode module private List&lt;PackageMember&gt; packages"},{"location":"markista/javadoc/model/PackageNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description PackageNode(String packageName) Constructs a PackageNode with the specified qualified package name."},{"location":"markista/javadoc/model/PackageNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setModule(ModuleNode module) Sets the module for this package. ModuleNode getModule() Returns the module that owns this package. List&lt;PackageMember&gt; getPackages() Returns the list of package members owned by this package. void addPackage(PackageNode packageNode) Adds a subpackage to this package. String getName() Returns the name (qualified name) of this package. Text getDescription() Returns the description text for this package, typically the first sentence."},{"location":"markista/javadoc/model/PackageNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/PackageNode/#module","title":"module","text":""},{"location":"markista/javadoc/model/PackageNode/#packages","title":"packages","text":""},{"location":"markista/javadoc/model/PackageNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageNode/#setmodule","title":"setModule","text":"<p>void setModule(ModuleNode module)</p> <p>Sets the module for this package.</p> <p>Parameters:</p> <p><code>module</code> - The ModuleNode that owns this package.</p>"},{"location":"markista/javadoc/model/PackageNode/#getmodule","title":"getModule","text":"<p>ModuleNode getModule()</p> <p>Returns the module that owns this package.</p> <p>Returns:</p> <p>The ModuleNode instance.</p>"},{"location":"markista/javadoc/model/PackageNode/#getpackages","title":"getPackages","text":"<p>List&lt;PackageMember&gt; getPackages()</p> <p>Returns the list of package members owned by this package.</p> <p>Returns:</p> <p>List of PackageMember objects.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageOwner</p>"},{"location":"markista/javadoc/model/PackageNode/#addpackage","title":"addPackage","text":"<p>void addPackage(PackageNode packageNode)</p> <p>Adds a subpackage to this package.</p> <p>Parameters:</p> <p><code>packageNode</code> - The PackageNode to add as a member.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageOwner</p>"},{"location":"markista/javadoc/model/PackageNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Returns the name (qualified name) of this package.</p> <p>Returns:</p> <p>The qualified package name.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageMember</p>"},{"location":"markista/javadoc/model/PackageNode/#getdescription","title":"getDescription","text":"<p>Text getDescription()</p> <p>Returns the description text for this package, typically the first sentence.</p> <p>Returns:</p> <p>The Text object representing the description.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageMember</p>"},{"location":"markista/javadoc/model/PackageOwner/","title":"PackageOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/PackageOwner/#interface-packageowner","title":"Interface PackageOwner","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.PackageOwner </p> <p>Interface representing an owner of packages. public interface</p>"},{"location":"markista/javadoc/model/PackageOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract List&lt;PackageMember&gt; getPackages() Returns the list of packages owned by this owner. abstract void addPackage(PackageNode packageNode) Adds a package to the owned packages."},{"location":"markista/javadoc/model/PackageOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/PackageOwner/#getpackages","title":"getPackages","text":"<p>abstract List&lt;PackageMember&gt; getPackages()</p> <p>Returns the list of packages owned by this owner.</p> <p>Returns:</p> <p>List of PackageMember objects representing owned packages.</p>"},{"location":"markista/javadoc/model/PackageOwner/#addpackage","title":"addPackage","text":"<p>abstract void addPackage(PackageNode packageNode)</p> <p>Adds a package to the owned packages.</p> <p>Parameters:</p> <p><code>packageNode</code> - The PackageNode to add.</p>"},{"location":"markista/javadoc/model/ParamNode/","title":"ParamNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/ParamNode/#class-paramnode","title":"Class ParamNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.ParamNode </p> <p>A class to hold information about method parameters.</p>"},{"location":"markista/javadoc/model/ParamNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private TypeNode type"},{"location":"markista/javadoc/model/ParamNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ParamNode(TypeNode type, String name) Constructs a ParamNode with the given type and name."},{"location":"markista/javadoc/model/ParamNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description TypeNode getType() Returns the type of this parameter. void setType(TypeNode type) Sets the type of this parameter. void setSimpleName(String name) Sets the simple name of this parameter. String getSimpleName() Returns the simple name of this parameter. void setQualifiedName(String name) Sets the qualified name of this parameter. String getQualifiedName() Returns the qualified name of this parameter."},{"location":"markista/javadoc/model/ParamNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/ParamNode/#type","title":"type","text":""},{"location":"markista/javadoc/model/ParamNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/ParamNode/#gettype","title":"getType","text":"<p>TypeNode getType()</p> <p>Returns the type of this parameter.</p> <p>Returns:</p> <p>The TypeNode representing the parameter's type.</p>"},{"location":"markista/javadoc/model/ParamNode/#settype","title":"setType","text":"<p>void setType(TypeNode type)</p> <p>Sets the type of this parameter.</p> <p>Parameters:</p> <p><code>type</code> - The TypeNode to set as this parameter's type.</p>"},{"location":"markista/javadoc/model/ParamNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p> <p>Sets the simple name of this parameter.</p> <p>Parameters:</p> <p><code>name</code> - The simple name to set.</p>"},{"location":"markista/javadoc/model/ParamNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p> <p>Returns the simple name of this parameter.</p> <p>Returns:</p> <p>The simple name.</p>"},{"location":"markista/javadoc/model/ParamNode/#setqualifiedname","title":"setQualifiedName","text":"<p>void setQualifiedName(String name)</p> <p>Sets the qualified name of this parameter.</p> <p>Parameters:</p> <p><code>name</code> - The qualified name to set.</p>"},{"location":"markista/javadoc/model/ParamNode/#getqualifiedname","title":"getQualifiedName","text":"<p>String getQualifiedName()</p> <p>Returns the qualified name of this parameter.</p> <p>Returns:</p> <p>The qualified name.</p>"},{"location":"markista/javadoc/model/Reference.Kind/","title":"Reference.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-referencekind","title":"Enum Reference.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Kind  Enclosing Class: Reference</p> <p>Enum representing different kinds/types of references.</p>"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE UNKNOWN URL PAGE MODULE PACKAGE TYPE METHOD PRIMITIVE VOID"},{"location":"markista/javadoc/model/Reference.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Kind()"},{"location":"markista/javadoc/model/Reference.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Reference.Kind values() static Reference.Kind valueOf(String name)"},{"location":"markista/javadoc/model/Reference.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Kind/#none","title":"NONE","text":"<p>public static final Reference.Kind NONE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#unknown","title":"UNKNOWN","text":"<p>public static final Reference.Kind UNKNOWN</p>"},{"location":"markista/javadoc/model/Reference.Kind/#url","title":"URL","text":"<p>public static final Reference.Kind URL</p>"},{"location":"markista/javadoc/model/Reference.Kind/#page","title":"PAGE","text":"<p>public static final Reference.Kind PAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#module","title":"MODULE","text":"<p>public static final Reference.Kind MODULE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#package","title":"PACKAGE","text":"<p>public static final Reference.Kind PACKAGE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#type","title":"TYPE","text":"<p>public static final Reference.Kind TYPE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#method","title":"METHOD","text":"<p>public static final Reference.Kind METHOD</p>"},{"location":"markista/javadoc/model/Reference.Kind/#primitive","title":"PRIMITIVE","text":"<p>public static final Reference.Kind PRIMITIVE</p>"},{"location":"markista/javadoc/model/Reference.Kind/#void","title":"VOID","text":"<p>public static final Reference.Kind VOID</p>"},{"location":"markista/javadoc/model/Reference.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference.Kind/#values","title":"values","text":"<p>static Reference.Kind values()</p>"},{"location":"markista/javadoc/model/Reference.Kind/#valueof","title":"valueOf","text":"<p>static Reference.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/Reference.Scope/","title":"Reference.Scope","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-referencescope","title":"Enum Reference.Scope","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Reference.Scope&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference.Scope  Enclosing Class: Reference</p> <p>Enum representing the scope of references.</p>"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE UNKNOWN LOCAL NATIVE FOREIGN"},{"location":"markista/javadoc/model/Reference.Scope/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference.Scope()"},{"location":"markista/javadoc/model/Reference.Scope/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Reference.Scope values() static Reference.Scope valueOf(String name)"},{"location":"markista/javadoc/model/Reference.Scope/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Reference.Scope/#none","title":"NONE","text":"<p>public static final Reference.Scope NONE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#unknown","title":"UNKNOWN","text":"<p>public static final Reference.Scope UNKNOWN</p>"},{"location":"markista/javadoc/model/Reference.Scope/#local","title":"LOCAL","text":"<p>public static final Reference.Scope LOCAL</p>"},{"location":"markista/javadoc/model/Reference.Scope/#native","title":"NATIVE","text":"<p>public static final Reference.Scope NATIVE</p>"},{"location":"markista/javadoc/model/Reference.Scope/#foreign","title":"FOREIGN","text":"<p>public static final Reference.Scope FOREIGN</p>"},{"location":"markista/javadoc/model/Reference.Scope/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference.Scope/#values","title":"values","text":"<p>static Reference.Scope values()</p>"},{"location":"markista/javadoc/model/Reference.Scope/#valueof","title":"valueOf","text":"<p>static Reference.Scope valueOf(String name)</p>"},{"location":"markista/javadoc/model/Reference/","title":"Reference","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Reference/#class-reference","title":"Class Reference","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Reference </p> <p><code>Reference</code> encapsulates links to web pages, markdown pages, modules, packages, types, and methods.</p>"},{"location":"markista/javadoc/model/Reference/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Reference.Kind kind private Reference.Scope scope private String displayName private String className private String uri private String anchor"},{"location":"markista/javadoc/model/Reference/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Reference() Default constructor creates an empty reference with kind and scope set to NONE. Reference(Reference.Kind kind, String name, String uri) Constructs a Reference with given kind, name, and URI. Reference(Reference.Scope scope, Reference.Kind kind, String name) Constructs a Reference with given scope, kind, and name. Reference(Reference.Scope scope, Reference.Kind kind, String name, String uri) Constructs a Reference with full specification: scope, kind, name, and URI."},{"location":"markista/javadoc/model/Reference/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setKind(Reference.Kind kind) Sets the kind/type of the reference. Reference.Kind getKind() Returns the kind/type of the reference. void setScope(Reference.Scope scope) Sets the scope of the reference. Reference.Scope getScope() Returns the scope of the reference. void setDisplayName(String name) Sets the display name of the reference. String getDisplayName() Returns the display name of the reference. void setClassName(String name) Sets the class name associated with the reference. String getClassName() Returns the class name associated with the reference. void setUri(String uri) Sets the URI of the reference. String getUri() Returns the URI of the reference. void setAnchor(String anchor) Sets the anchor part of the URI. String getAnchor() Returns the anchor part of the URI."},{"location":"markista/javadoc/model/Reference/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Reference/#kind","title":"kind","text":""},{"location":"markista/javadoc/model/Reference/#scope","title":"scope","text":""},{"location":"markista/javadoc/model/Reference/#displayname","title":"displayName","text":""},{"location":"markista/javadoc/model/Reference/#classname","title":"className","text":""},{"location":"markista/javadoc/model/Reference/#uri","title":"uri","text":""},{"location":"markista/javadoc/model/Reference/#anchor","title":"anchor","text":""},{"location":"markista/javadoc/model/Reference/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Reference/#setkind","title":"setKind","text":"<p>void setKind(Reference.Kind kind)</p> <p>Sets the kind/type of the reference.</p> <p>Parameters:</p> <p><code>kind</code> - The kind to set.</p>"},{"location":"markista/javadoc/model/Reference/#getkind","title":"getKind","text":"<p>Reference.Kind getKind()</p> <p>Returns the kind/type of the reference.</p> <p>Returns:</p> <p>The reference kind.</p>"},{"location":"markista/javadoc/model/Reference/#setscope","title":"setScope","text":"<p>void setScope(Reference.Scope scope)</p> <p>Sets the scope of the reference.</p> <p>Parameters:</p> <p><code>scope</code> - The scope to set.</p>"},{"location":"markista/javadoc/model/Reference/#getscope","title":"getScope","text":"<p>Reference.Scope getScope()</p> <p>Returns the scope of the reference.</p> <p>Returns:</p> <p>The reference scope.</p>"},{"location":"markista/javadoc/model/Reference/#setdisplayname","title":"setDisplayName","text":"<p>void setDisplayName(String name)</p> <p>Sets the display name of the reference.</p> <p>Parameters:</p> <p><code>name</code> - The display name to set.</p>"},{"location":"markista/javadoc/model/Reference/#getdisplayname","title":"getDisplayName","text":"<p>String getDisplayName()</p> <p>Returns the display name of the reference.</p> <p>Returns:</p> <p>The display name.</p>"},{"location":"markista/javadoc/model/Reference/#setclassname","title":"setClassName","text":"<p>void setClassName(String name)</p> <p>Sets the class name associated with the reference.</p> <p>Parameters:</p> <p><code>name</code> - The class name to set.</p>"},{"location":"markista/javadoc/model/Reference/#getclassname","title":"getClassName","text":"<p>String getClassName()</p> <p>Returns the class name associated with the reference.</p> <p>Returns:</p> <p>The class name.</p>"},{"location":"markista/javadoc/model/Reference/#seturi","title":"setUri","text":"<p>void setUri(String uri)</p> <p>Sets the URI of the reference.</p> <p>Parameters:</p> <p><code>uri</code> - The URI to set.</p>"},{"location":"markista/javadoc/model/Reference/#geturi","title":"getUri","text":"<p>String getUri()</p> <p>Returns the URI of the reference.</p> <p>Returns:</p> <p>The URI string.</p>"},{"location":"markista/javadoc/model/Reference/#setanchor","title":"setAnchor","text":"<p>void setAnchor(String anchor)</p> <p>Sets the anchor part of the URI.</p> <p>Parameters:</p> <p><code>anchor</code> - The anchor to set.</p>"},{"location":"markista/javadoc/model/Reference/#getanchor","title":"getAnchor","text":"<p>String getAnchor()</p> <p>Returns the anchor part of the URI.</p> <p>Returns:</p> <p>The anchor string.</p>"},{"location":"markista/javadoc/model/Text.Segment/","title":"Text.Segment","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text.Segment/#class-textsegment","title":"Class Text.Segment","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.Segment  Enclosing Class: Text</p> <p>Represents a segment of the Text with its kind, content, and optional link.</p>"},{"location":"markista/javadoc/model/Text.Segment/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Text.SegmentKind kind The kind/type of this segment. private String text The textual content of this segment. private String link The associated link if the segment represents a link."},{"location":"markista/javadoc/model/Text.Segment/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.Segment() Private constructor to restrict instantiation."},{"location":"markista/javadoc/model/Text.Segment/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text.Segment empty() Creates an empty segment instance. Text.Segment setKind(Text.SegmentKind k) Sets the kind of this segment. Text.SegmentKind getKind() Returns the kind of this segment. String toString() Returns the string representation of this segment. Text.Segment setText(String text) Sets the text content of this segment. String getText() Returns the text content of this segment. Text.Segment setLink(String link) Sets the link value of this segment. String getLink() Returns the link associated with this segment."},{"location":"markista/javadoc/model/Text.Segment/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Text.Segment/#kind","title":"kind","text":"<p>The kind/type of this segment.</p>"},{"location":"markista/javadoc/model/Text.Segment/#text","title":"text","text":"<p>The textual content of this segment.</p>"},{"location":"markista/javadoc/model/Text.Segment/#link","title":"link","text":"<p>The associated link if the segment represents a link.</p>"},{"location":"markista/javadoc/model/Text.Segment/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text.Segment/#empty","title":"empty","text":"<p>static Text.Segment empty()</p> <p>Creates an empty segment instance.</p> <p>Returns:</p> <p>A new empty Segment object.</p>"},{"location":"markista/javadoc/model/Text.Segment/#setkind","title":"setKind","text":"<p>Text.Segment setKind(Text.SegmentKind k)</p> <p>Sets the kind of this segment.</p> <p>Parameters:</p> <p><code>k</code> - The SegmentKind value.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/model/Text.Segment/#getkind","title":"getKind","text":"<p>Text.SegmentKind getKind()</p> <p>Returns the kind of this segment.</p> <p>Returns:</p> <p>The current SegmentKind.</p>"},{"location":"markista/javadoc/model/Text.Segment/#tostring","title":"toString","text":"<p>String toString()</p> <p>Returns the string representation of this segment. If text is null or empty, returns the link value.</p> <p>Returns:</p> <p>The text or link of this segment.</p>"},{"location":"markista/javadoc/model/Text.Segment/#settext","title":"setText","text":"<p>Text.Segment setText(String text)</p> <p>Sets the text content of this segment.</p> <p>Parameters:</p> <p><code>text</code> - The text to set.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/model/Text.Segment/#gettext","title":"getText","text":"<p>String getText()</p> <p>Returns the text content of this segment.</p> <p>Returns:</p> <p>The text string.</p>"},{"location":"markista/javadoc/model/Text.Segment/#setlink","title":"setLink","text":"<p>Text.Segment setLink(String link)</p> <p>Sets the link value of this segment.</p> <p>Parameters:</p> <p><code>link</code> - The link to set.</p> <p>Returns:</p> <p>This Segment instance for chaining.</p>"},{"location":"markista/javadoc/model/Text.Segment/#getlink","title":"getLink","text":"<p>String getLink()</p> <p>Returns the link associated with this segment.</p> <p>Returns:</p> <p>The link string.</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/","title":"Text.SegmentKind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-textsegmentkind","title":"Enum Text.SegmentKind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.Text.SegmentKind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text.SegmentKind  Enclosing Class: Text</p> <p>Enum class that defines different kinds of segments for Text.</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE MARKDOWN TEXT LINK CODE START END"},{"location":"markista/javadoc/model/Text.SegmentKind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text.SegmentKind()"},{"location":"markista/javadoc/model/Text.SegmentKind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text.SegmentKind values() static Text.SegmentKind valueOf(String name)"},{"location":"markista/javadoc/model/Text.SegmentKind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/Text.SegmentKind/#none","title":"NONE","text":"<p>public static final Text.SegmentKind NONE</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#markdown","title":"MARKDOWN","text":"<p>public static final Text.SegmentKind MARKDOWN</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#text","title":"TEXT","text":"<p>public static final Text.SegmentKind TEXT</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#link","title":"LINK","text":"<p>public static final Text.SegmentKind LINK</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#code","title":"CODE","text":"<p>public static final Text.SegmentKind CODE</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#start","title":"START","text":"<p>public static final Text.SegmentKind START</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#end","title":"END","text":"<p>public static final Text.SegmentKind END</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text.SegmentKind/#values","title":"values","text":"<p>static Text.SegmentKind values()</p>"},{"location":"markista/javadoc/model/Text.SegmentKind/#valueof","title":"valueOf","text":"<p>static Text.SegmentKind valueOf(String name)</p>"},{"location":"markista/javadoc/model/Text/","title":"Text","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/Text/#class-text","title":"Class Text","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.Text </p> <p>Represents a block of text. Text stores the text as a list of segments which can be of kind text, markdown, link, or code for easy retrieval and manipulation.</p>"},{"location":"markista/javadoc/model/Text/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description static Text.Segment Represents a segment of the Text with its kind, content, and optional link."},{"location":"markista/javadoc/model/Text/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private List&lt;Text.Segment&gt; segments List of text segments composing this Text instance."},{"location":"markista/javadoc/model/Text/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Text() Private constructor to prevent external instantiation."},{"location":"markista/javadoc/model/Text/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Text empty() Creates an empty Text instance. String toString() Returns the combined string representation of all segments. boolean isEmpty() Checks whether this Text instance is empty. List&lt;Text.Segment&gt; getSegments() Returns the list of segments composing this Text. void set(Text text) Sets the segments of this Text to match another Text. Text append(Text.Segment segment) Appends a single segment to this Text. Text append(String text) Appends a single text segment to this Text. Text append(Text text) Appends all segments from another Text instance."},{"location":"markista/javadoc/model/Text/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/Text/#segments","title":"segments","text":"<p>List of text segments composing this Text instance.</p>"},{"location":"markista/javadoc/model/Text/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/Text/#empty","title":"empty","text":"<p>static Text empty()</p> <p>Creates an empty Text instance.</p> <p>Returns:</p> <p>A new empty Text object.</p>"},{"location":"markista/javadoc/model/Text/#tostring","title":"toString","text":"<p>String toString()</p> <p>Returns the combined string representation of all segments.</p> <p>Returns:</p> <p>Concatenated string of all segment texts.</p>"},{"location":"markista/javadoc/model/Text/#isempty","title":"isEmpty","text":"<p>boolean isEmpty()</p> <p>Checks whether this Text instance is empty.</p> <p>Returns:</p> <p>true if there are no segments or the segment list is null.</p>"},{"location":"markista/javadoc/model/Text/#getsegments","title":"getSegments","text":"<p>List&lt;Text.Segment&gt; getSegments()</p> <p>Returns the list of segments composing this Text.</p> <p>Returns:</p> <p>List of Text.Segment objects.</p>"},{"location":"markista/javadoc/model/Text/#set","title":"set","text":"<p>void set(Text text)</p> <p>Sets the segments of this Text to match another Text.</p> <p>Parameters:</p> <p><code>text</code> - The Text source to copy from.</p>"},{"location":"markista/javadoc/model/Text/#append","title":"append","text":"<p>Text append(Text.Segment segment)</p> <p>Appends a single segment to this Text.</p> <p>Parameters:</p> <p><code>segment</code> - The segment to add.</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/model/Text/#append_1","title":"append","text":"<p>Text append(String text)</p> <p>Appends a single text segment to this Text.</p> <p>Parameters:</p> <p><code>text</code> - text to go in the segment</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/model/Text/#append_2","title":"append","text":"<p>Text append(Text text)</p> <p>Appends all segments from another Text instance.</p> <p>Parameters:</p> <p><code>text</code> - The Text whose segments should be appended.</p> <p>Returns:</p> <p>This Text instance for chaining.</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/","title":"TypeNode.Kind","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-typenodekind","title":"Enum TypeNode.Kind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.model.TypeNode.Kind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode.Kind  Enclosing Class: TypeNode</p> <p>Enumeration representing kinds of types: None, Class, Interface, Enum, Annotation.</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE CLASS INTERFACE ENUM ANNOTATION"},{"location":"markista/javadoc/model/TypeNode.Kind/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private final String name The display name for the kind."},{"location":"markista/javadoc/model/TypeNode.Kind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode.Kind(String s) Constructor assigning the display name."},{"location":"markista/javadoc/model/TypeNode.Kind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static TypeNode.Kind values() static TypeNode.Kind valueOf(String name) String toString() Returns the display name of the kind."},{"location":"markista/javadoc/model/TypeNode.Kind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#none","title":"NONE","text":"<p>public static final TypeNode.Kind NONE</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#class","title":"CLASS","text":"<p>public static final TypeNode.Kind CLASS</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#interface","title":"INTERFACE","text":"<p>public static final TypeNode.Kind INTERFACE</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#enum","title":"ENUM","text":"<p>public static final TypeNode.Kind ENUM</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#annotation","title":"ANNOTATION","text":"<p>public static final TypeNode.Kind ANNOTATION</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#name","title":"name","text":"<p>The display name for the kind.</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode.Kind/#values","title":"values","text":"<p>static TypeNode.Kind values()</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#valueof","title":"valueOf","text":"<p>static TypeNode.Kind valueOf(String name)</p>"},{"location":"markista/javadoc/model/TypeNode.Kind/#tostring","title":"toString","text":"<p>String toString()</p> <p>Returns the display name of the kind.</p> <p>Overrides:</p> <p>Enum&lt;TypeNode.Kind&gt; from Enum&lt;TypeNode.Kind&gt;</p>"},{"location":"markista/javadoc/model/TypeNode/","title":"TypeNode","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeNode/#class-typenode","title":"Class TypeNode","text":"<p>java.lang.Object io.github.sandydunlop.markista.model.Node io.github.sandydunlop.markista.model.AbstractTypeOwner \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeNode  All Implemented Interfaces: PackageMember</p> <p>Represents a type in the API model, including its kind (class, interface, enum, annotation), supertypes, implemented interfaces, constructors, methods, fields, ownership, and relevant metadata.</p>"},{"location":"markista/javadoc/model/TypeNode/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private TypeOwner owner The owner of this type, usually another type or module. private List&lt;String&gt; implementedInterfaces List of qualified names of interfaces implemented by this type. private List&lt;String&gt; supertypes List of qualified names of this type's supertypes. private String arrayBrackets String representation of array brackets if this type is an array (e.g., <code>[]</code>). private List&lt;MethodNode&gt; constructors List of constructor methods belonging to this type. private List&lt;MethodNode&gt; methods List of methods belonging to this type. private List&lt;FieldNode&gt; fields List of fields belonging to this type. protected TypeNode.Kind kind The kind of this type (e.g., class, interface, enum, annotation)."},{"location":"markista/javadoc/model/TypeNode/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeNode(String qualifiedName, String simpleName, PackageNode packageNode) Constructs a TypeNode with the specified qualified name, simple name, and package."},{"location":"markista/javadoc/model/TypeNode/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setArrayBrackets(String brackets) Sets the array brackets representation for this type. String getArrayBrackets() Returns the array brackets representation for this type. void setImplementedInterfaces(List&lt;String&gt; implementedInterfaces) Sets the list of implemented interfaces by qualified names. void setSupertypes(List&lt;String&gt; supertypes) Sets the list of supertypes by qualified names. List&lt;String&gt; getSupertypes() Returns the list of supertypes by qualified names. List&lt;String&gt; getImplementedInterfaces() Returns the list of implemented interfaces by qualified names. void setOwner(TypeOwner owner) Sets the owner of this type. TypeOwner getOwner() Returns the owner of this type. void setSimpleName(String name) Sets the simple name of this type. String getSimpleName() Returns the simple name of this type. void setQualifiedName(String name) Sets the qualified name of this type. String getQualifiedName() Returns the qualified name of this type. String getPackageName() Returns the package name for this type. PackageNode getPackage() Returns the package node this type belongs to. void setKind(TypeNode.Kind kind) Sets the kind (class, interface, enum, annotation) of this type. TypeNode.Kind getKind() Returns the kind of this type. void addMethod(MethodNode method) Adds a method to this type. List&lt;MethodNode&gt; getMethods() Returns the list of methods of this type. void addConstructor(MethodNode constructor) Adds a constructor method to this type. List&lt;MethodNode&gt; getConstructors() Returns the list of constructors of this type. void addField(FieldNode field) Adds a field to this type. List&lt;FieldNode&gt; getFields() Returns the list of fields of this type. FieldNode getField(String fieldName) Retrieves a field by its simple name. MethodNode getMethod(MethodNode method) Retrieves a method matching the signature of a given MethodNode. MethodNode getConstructor(MethodNode method) Retrieves a constructor matching the signature of a given MethodNode. String getName() Returns the name of the type. Text getDescription() Returns the description of this type."},{"location":"markista/javadoc/model/TypeNode/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/model/TypeNode/#owner","title":"owner","text":"<p>The owner of this type, usually another type or module.</p>"},{"location":"markista/javadoc/model/TypeNode/#implementedinterfaces","title":"implementedInterfaces","text":"<p>List of qualified names of interfaces implemented by this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#supertypes","title":"supertypes","text":"<p>List of qualified names of this type's supertypes.</p>"},{"location":"markista/javadoc/model/TypeNode/#arraybrackets","title":"arrayBrackets","text":"<p>String representation of array brackets if this type is an array (e.g., <code>[]</code>).</p>"},{"location":"markista/javadoc/model/TypeNode/#constructors","title":"constructors","text":"<p>List of constructor methods belonging to this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#methods","title":"methods","text":"<p>List of methods belonging to this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#fields","title":"fields","text":"<p>List of fields belonging to this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#kind","title":"kind","text":"<p>The kind of this type (e.g., class, interface, enum, annotation).</p>"},{"location":"markista/javadoc/model/TypeNode/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeNode/#setarraybrackets","title":"setArrayBrackets","text":"<p>void setArrayBrackets(String brackets)</p> <p>Sets the array brackets representation for this type.</p> <p>Parameters:</p> <p><code>brackets</code> - string representing array dimension brackets (e.g., <code>[]</code>).</p>"},{"location":"markista/javadoc/model/TypeNode/#getarraybrackets","title":"getArrayBrackets","text":"<p>String getArrayBrackets()</p> <p>Returns the array brackets representation for this type.</p> <p>Returns:</p> <p>string representing array dimension brackets.</p>"},{"location":"markista/javadoc/model/TypeNode/#setimplementedinterfaces","title":"setImplementedInterfaces","text":"<p>void setImplementedInterfaces(List&lt;String&gt; implementedInterfaces)</p> <p>Sets the list of implemented interfaces by qualified names.</p> <p>Parameters:</p> <p><code>implementedInterfaces</code> - list of qualified interface names.</p>"},{"location":"markista/javadoc/model/TypeNode/#setsupertypes","title":"setSupertypes","text":"<p>void setSupertypes(List&lt;String&gt; supertypes)</p> <p>Sets the list of supertypes by qualified names.</p> <p>Parameters:</p> <p><code>supertypes</code> - list of qualified supertype names.</p>"},{"location":"markista/javadoc/model/TypeNode/#getsupertypes","title":"getSupertypes","text":"<p>List&lt;String&gt; getSupertypes()</p> <p>Returns the list of supertypes by qualified names.</p> <p>Returns:</p> <p>list of qualified supertype names.</p>"},{"location":"markista/javadoc/model/TypeNode/#getimplementedinterfaces","title":"getImplementedInterfaces","text":"<p>List&lt;String&gt; getImplementedInterfaces()</p> <p>Returns the list of implemented interfaces by qualified names.</p> <p>Returns:</p> <p>list of qualified interface names.</p>"},{"location":"markista/javadoc/model/TypeNode/#setowner","title":"setOwner","text":"<p>void setOwner(TypeOwner owner)</p> <p>Sets the owner of this type.</p> <p>Parameters:</p> <p><code>owner</code> - the TypeOwner that owns this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#getowner","title":"getOwner","text":"<p>TypeOwner getOwner()</p> <p>Returns the owner of this type.</p> <p>Returns:</p> <p>the TypeOwner that owns this type.</p>"},{"location":"markista/javadoc/model/TypeNode/#setsimplename","title":"setSimpleName","text":"<p>void setSimpleName(String name)</p> <p>Sets the simple name of this type.</p> <p>Parameters:</p> <p><code>name</code> - the simple name to set.</p>"},{"location":"markista/javadoc/model/TypeNode/#getsimplename","title":"getSimpleName","text":"<p>String getSimpleName()</p> <p>Returns the simple name of this type.</p> <p>Returns:</p> <p>the simple name.</p>"},{"location":"markista/javadoc/model/TypeNode/#setqualifiedname","title":"setQualifiedName","text":"<p>void setQualifiedName(String name)</p> <p>Sets the qualified name of this type.</p> <p>Parameters:</p> <p><code>name</code> - the qualified name to set.</p>"},{"location":"markista/javadoc/model/TypeNode/#getqualifiedname","title":"getQualifiedName","text":"<p>String getQualifiedName()</p> <p>Returns the qualified name of this type.</p> <p>Returns:</p> <p>the qualified name.</p>"},{"location":"markista/javadoc/model/TypeNode/#getpackagename","title":"getPackageName","text":"<p>String getPackageName()</p> <p>Returns the package name for this type.</p> <p>Returns:</p> <p>fully qualified package name, or null if no package node.</p>"},{"location":"markista/javadoc/model/TypeNode/#getpackage","title":"getPackage","text":"<p>PackageNode getPackage()</p> <p>Returns the package node this type belongs to.</p> <p>Returns:</p> <p>the PackageNode instance.</p>"},{"location":"markista/javadoc/model/TypeNode/#setkind","title":"setKind","text":"<p>void setKind(TypeNode.Kind kind)</p> <p>Sets the kind (class, interface, enum, annotation) of this type.</p> <p>Parameters:</p> <p><code>kind</code> - the Kind enum value.</p>"},{"location":"markista/javadoc/model/TypeNode/#getkind","title":"getKind","text":"<p>TypeNode.Kind getKind()</p> <p>Returns the kind of this type.</p> <p>Returns:</p> <p>the Kind enum value.</p>"},{"location":"markista/javadoc/model/TypeNode/#addmethod","title":"addMethod","text":"<p>void addMethod(MethodNode method)</p> <p>Adds a method to this type.</p> <p>Parameters:</p> <p><code>method</code> - the MethodNode to add.</p>"},{"location":"markista/javadoc/model/TypeNode/#getmethods","title":"getMethods","text":"<p>List&lt;MethodNode&gt; getMethods()</p> <p>Returns the list of methods of this type.</p> <p>Returns:</p> <p>list of MethodNode instances.</p>"},{"location":"markista/javadoc/model/TypeNode/#addconstructor","title":"addConstructor","text":"<p>void addConstructor(MethodNode constructor)</p> <p>Adds a constructor method to this type.</p> <p>Parameters:</p> <p><code>constructor</code> - the MethodNode constructor to add.</p>"},{"location":"markista/javadoc/model/TypeNode/#getconstructors","title":"getConstructors","text":"<p>List&lt;MethodNode&gt; getConstructors()</p> <p>Returns the list of constructors of this type.</p> <p>Returns:</p> <p>list of MethodNode constructors.</p>"},{"location":"markista/javadoc/model/TypeNode/#addfield","title":"addField","text":"<p>void addField(FieldNode field)</p> <p>Adds a field to this type.</p> <p>Parameters:</p> <p><code>field</code> - the FieldNode to add.</p>"},{"location":"markista/javadoc/model/TypeNode/#getfields","title":"getFields","text":"<p>List&lt;FieldNode&gt; getFields()</p> <p>Returns the list of fields of this type.</p> <p>Returns:</p> <p>list of FieldNode instances.</p>"},{"location":"markista/javadoc/model/TypeNode/#getfield","title":"getField","text":"<p>FieldNode getField(String fieldName)</p> <p>Retrieves a field by its simple name.</p> <p>Parameters:</p> <p><code>fieldName</code> - the simple name of the field.</p> <p>Returns:</p> <p>the FieldNode if found, otherwise null.</p>"},{"location":"markista/javadoc/model/TypeNode/#getmethod","title":"getMethod","text":"<p>MethodNode getMethod(MethodNode method)</p> <p>Retrieves a method matching the signature of a given MethodNode.</p> <p>Parameters:</p> <p><code>method</code> - the MethodNode whose signature to match.</p> <p>Returns:</p> <p>the matching MethodNode if found, otherwise null.</p>"},{"location":"markista/javadoc/model/TypeNode/#getconstructor","title":"getConstructor","text":"<p>MethodNode getConstructor(MethodNode method)</p> <p>Retrieves a constructor matching the signature of a given MethodNode.</p> <p>Parameters:</p> <p><code>method</code> - the MethodNode whose signature to match.</p> <p>Returns:</p> <p>the matching constructor MethodNode if found, otherwise null.</p>"},{"location":"markista/javadoc/model/TypeNode/#getname","title":"getName","text":"<p>String getName()</p> <p>Returns the name of the type.</p> <p>Returns:</p> <p>the simple name.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageMember</p>"},{"location":"markista/javadoc/model/TypeNode/#getdescription","title":"getDescription","text":"<p>Text getDescription()</p> <p>Returns the description of this type.</p> <p>Returns:</p> <p>a Text object containing the first sentence or summary.</p> <p>Specified By:</p> <p>io.github.sandydunlop.markista.model.PackageMember</p>"},{"location":"markista/javadoc/model/TypeOwner/","title":"TypeOwner","text":"<p>Package io.github.sandydunlop.markista.model</p>"},{"location":"markista/javadoc/model/TypeOwner/#interface-typeowner","title":"Interface TypeOwner","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.model.TypeOwner </p> <p>A TypeOwner is a Node that can be set as the owner of another type.</p>"},{"location":"markista/javadoc/model/TypeOwner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description abstract void addType(TypeNode typeNode) Adds a type node to this owner. abstract List&lt;TypeNode&gt; getTypes() Returns a list of all type nodes owned by this owner. abstract List&lt;PackageMember&gt; getClasses() Returns a list of classes owned by this owner. abstract List&lt;PackageMember&gt; getInterfaces() Returns a list of interfaces owned by this owner. abstract List&lt;PackageMember&gt; getEnums() Returns a list of enums owned by this owner. abstract List&lt;PackageMember&gt; getAnnotations() Returns a list of annotations owned by this owner. abstract String getName() Returns the simple name of this owner."},{"location":"markista/javadoc/model/TypeOwner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/model/TypeOwner/#addtype","title":"addType","text":"<p>abstract void addType(TypeNode typeNode)</p> <p>Adds a type node to this owner.</p> <p>Parameters:</p> <p><code>typeNode</code> - the TypeNode to add</p>"},{"location":"markista/javadoc/model/TypeOwner/#gettypes","title":"getTypes","text":"<p>abstract List&lt;TypeNode&gt; getTypes()</p> <p>Returns a list of all type nodes owned by this owner.</p> <p>Returns:</p> <p>list of TypeNode objects</p>"},{"location":"markista/javadoc/model/TypeOwner/#getclasses","title":"getClasses","text":"<p>abstract List&lt;PackageMember&gt; getClasses()</p> <p>Returns a list of classes owned by this owner.</p> <p>Returns:</p> <p>list of PackageMember objects representing classes</p>"},{"location":"markista/javadoc/model/TypeOwner/#getinterfaces","title":"getInterfaces","text":"<p>abstract List&lt;PackageMember&gt; getInterfaces()</p> <p>Returns a list of interfaces owned by this owner.</p> <p>Returns:</p> <p>list of PackageMember objects representing interfaces</p>"},{"location":"markista/javadoc/model/TypeOwner/#getenums","title":"getEnums","text":"<p>abstract List&lt;PackageMember&gt; getEnums()</p> <p>Returns a list of enums owned by this owner.</p> <p>Returns:</p> <p>list of PackageMember objects representing enums</p>"},{"location":"markista/javadoc/model/TypeOwner/#getannotations","title":"getAnnotations","text":"<p>abstract List&lt;PackageMember&gt; getAnnotations()</p> <p>Returns a list of annotations owned by this owner.</p> <p>Returns:</p> <p>list of PackageMember objects representing annotations</p>"},{"location":"markista/javadoc/model/TypeOwner/#getname","title":"getName","text":"<p>abstract String getName()</p> <p>Returns the simple name of this owner.</p> <p>Returns:</p> <p>name as a String</p>"},{"location":"markista/javadoc/util/","title":"Package io.github.sandydunlop.markista.util","text":"<p>This package contains utility methods used by other packages.</p> Classes Class Description LinkResolver <code>LinkResolver</code> calculates the paths for Markdown documents to link between different packages and to URLs of external packages and their contents. TypeUtils Utility class providing static methods to create and manipulate TypeNodes, MethodNodes, FieldNodes, and other API model objects from language model elements and Javadoc doc trees obtained from the Java source code. MarkdownParser Parses a Markdown string into a sequence of segments representing text and special markup such as brackets and parentheses. Context Singleton class that maintains the current context during documentation generation. Markdown A utility class for producing Markdown formatted text and resolving Markdown links to point to the correct file, directory, or web page. ModuleDirectives A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive  objects scanned by the ApiScanner. ApiScanner A class that scans code and generates an API tree representing code and Javadoc comments. Utils A set of utility methods for changing between qualified and unqualified names. Configuration Utility class holding global configuration settings for the documentation generator."},{"location":"markista/javadoc/util/ApiScanner/","title":"ApiScanner","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/ApiScanner/#class-apiscanner","title":"Class ApiScanner","text":"<p>java.lang.Object javax.lang.model.util.AbstractElementVisitor6&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner6&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner7&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner8&lt;java.lang.Void, java.lang.Integer&gt; javax.lang.model.util.ElementScanner9&lt;java.lang.Void, java.lang.Integer&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.ApiScanner </p> <p>A class that scans code and generates an API tree representing code and Javadoc comments.</p>"},{"location":"markista/javadoc/util/ApiScanner/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private Context ctx private Api api private DocletEnvironment environment private ModuleNode unnamedModule private ModuleNode currentModule private HashSet&lt;String&gt; includedNames"},{"location":"markista/javadoc/util/ApiScanner/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ApiScanner(DocletEnvironment environment) Initializes the ApiScanner with access to the doclet environment."},{"location":"markista/javadoc/util/ApiScanner/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description Api scan(Set&lt;? extends Element&gt; elements) The starting point for a scan of the API structure. private void processIncludedElements(Set&lt;? extends Element&gt; elements) private boolean isIncludedElement(String qualifiedName) private boolean isIncludedElement(Element e) Void scan(Element e, Integer depth) Void visitModule(ModuleElement e, Integer depth) Void visitPackage(PackageElement ee, Integer depth) Void visitType(TypeElement e, Integer depth) Void visitExecutable(ExecutableElement ee, Integer depth) Void visitVariable(VariableElement ve, Integer depth) Void visitTypeParameter(TypeParameterElement e, Integer depth) Void visitRecordComponent(RecordComponentElement e, Integer depth)"},{"location":"markista/javadoc/util/ApiScanner/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/ApiScanner/#ctx","title":"ctx","text":""},{"location":"markista/javadoc/util/ApiScanner/#api","title":"api","text":""},{"location":"markista/javadoc/util/ApiScanner/#environment","title":"environment","text":""},{"location":"markista/javadoc/util/ApiScanner/#unnamedmodule","title":"unnamedModule","text":""},{"location":"markista/javadoc/util/ApiScanner/#currentmodule","title":"currentModule","text":""},{"location":"markista/javadoc/util/ApiScanner/#includednames","title":"includedNames","text":""},{"location":"markista/javadoc/util/ApiScanner/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/ApiScanner/#scan","title":"scan","text":"<p>Api scan(Set&lt;? extends Element&gt; elements)</p> <p>The starting point for a scan of the API structure. This method sets up the environment and begins the scan of the API.</p> <p>Parameters:</p> <p><code>elements</code> - a list of language model elements</p> <p>Returns:</p> <p>An Api object representing the entire model of the API that's being documented</p>"},{"location":"markista/javadoc/util/ApiScanner/#processincludedelements","title":"processIncludedElements","text":"<p>private void processIncludedElements(Set&lt;? extends Element&gt; elements)</p>"},{"location":"markista/javadoc/util/ApiScanner/#isincludedelement","title":"isIncludedElement","text":"<p>private boolean isIncludedElement(String qualifiedName)</p>"},{"location":"markista/javadoc/util/ApiScanner/#isincludedelement_1","title":"isIncludedElement","text":"<p>private boolean isIncludedElement(Element e)</p>"},{"location":"markista/javadoc/util/ApiScanner/#scan_1","title":"scan","text":"<p>Void scan(Element e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visitmodule","title":"visitModule","text":"<p>Void visitModule(ModuleElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner9&lt;Void, Integer&gt; from ElementScanner9&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visitpackage","title":"visitPackage","text":"<p>Void visitPackage(PackageElement ee, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visittype","title":"visitType","text":"<p>Void visitType(TypeElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visitexecutable","title":"visitExecutable","text":"<p>Void visitExecutable(ExecutableElement ee, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visitvariable","title":"visitVariable","text":"<p>Void visitVariable(VariableElement ve, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner7&lt;Void, Integer&gt; from ElementScanner7&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visittypeparameter","title":"visitTypeParameter","text":"<p>Void visitTypeParameter(TypeParameterElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/ApiScanner/#visitrecordcomponent","title":"visitRecordComponent","text":"<p>Void visitRecordComponent(RecordComponentElement e, Integer depth)</p> <p>Overrides:</p> <p>ElementScanner6&lt;Void, Integer&gt; from ElementScanner6&lt;Void, Integer&gt;</p>"},{"location":"markista/javadoc/util/Configuration/","title":"Configuration","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Configuration/#class-configuration","title":"Class Configuration","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Configuration </p> <p>Utility class holding global configuration settings for the documentation generator.</p> <p>This class provides static getter and setter methods for various options that control the behavior of the documentation output, such as output directory, verbosity, and which members to include.</p> <p>All configuration fields are static and global and the constructor is hidden to prevent instantiation.</p>"},{"location":"markista/javadoc/util/Configuration/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static String outputDirectory The directory in which the documentation filles will be generated private static boolean createExternalLinks If true, links to types defined outside of the API being documented will be generated private static boolean documentPrivateMembers If true, private members of packages and types will be included in the generated documentation private static boolean flattenDirectories If true, empty directories will not be created, leading to a flatter directory structure private static boolean useContentTabs If true, summary tables will be created inside Markdown content tabs. private static boolean verbose If true, logging will include status information."},{"location":"markista/javadoc/util/Configuration/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Configuration() The default constructor"},{"location":"markista/javadoc/util/Configuration/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void setOutputDirectory(String path) Sets the directory path where the documentation files will be generated. static String getOutputDirectory() Returns the directory path where documentation files will be generated. static void setCreateExternalLinks(boolean b) Sets whether to generate links to external documentation for referenced types and modules. static boolean getCreateExternalLinks() Returns whether the documentation generator creates links to external documentation. static void setDocumentPrivateMembers(boolean b) Sets whether private members (fields, methods) should be included in the generated documentation. static boolean getDocumentPrivateMembers() Returns whether private members are included in the documentation. static void setFlattenDirectories(boolean b) Sets whether to flatten directory structure when generating the documentation output. static boolean getFlattenDirectories() Returns whether the documentation output directory structure is flattened. static void setUseContentTabs(boolean b) Sets whether to use content tabs in the generated documentation. static boolean getUseContentTabs() Returns whether content tabs are used in documentation. static void setVerbose(boolean b) Sets whether verbose logging or output should be enabled during documentation generation. static boolean getVerbose() Returns whether verbose output is enabled."},{"location":"markista/javadoc/util/Configuration/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/Configuration/#outputdirectory","title":"outputDirectory","text":"<p>The directory in which the documentation filles will be generated</p>"},{"location":"markista/javadoc/util/Configuration/#createexternallinks","title":"createExternalLinks","text":"<p>If true, links to types defined outside of the API being documented will be generated</p>"},{"location":"markista/javadoc/util/Configuration/#documentprivatemembers","title":"documentPrivateMembers","text":"<p>If true, private members of packages and types will be included in the generated documentation</p>"},{"location":"markista/javadoc/util/Configuration/#flattendirectories","title":"flattenDirectories","text":"<p>If true, empty directories will not be created, leading to a flatter directory structure</p>"},{"location":"markista/javadoc/util/Configuration/#usecontenttabs","title":"useContentTabs","text":"<p>If true, summary tables will be created inside Markdown content tabs. See mkdocs-material for more information.</p>"},{"location":"markista/javadoc/util/Configuration/#verbose","title":"verbose","text":"<p>If true, logging will include status information.</p>"},{"location":"markista/javadoc/util/Configuration/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Configuration/#setoutputdirectory","title":"setOutputDirectory","text":"<p>static void setOutputDirectory(String path)</p> <p>Sets the directory path where the documentation files will be generated.</p> <p>Parameters:</p> <p><code>path</code> - The output directory path as a String.</p>"},{"location":"markista/javadoc/util/Configuration/#getoutputdirectory","title":"getOutputDirectory","text":"<p>static String getOutputDirectory()</p> <p>Returns the directory path where documentation files will be generated.</p> <p>Returns:</p> <p>The output directory path as a String.</p>"},{"location":"markista/javadoc/util/Configuration/#setcreateexternallinks","title":"setCreateExternalLinks","text":"<p>static void setCreateExternalLinks(boolean b)</p> <p>Sets whether to generate links to external documentation for referenced types and modules.</p> <p>Parameters:</p> <p><code>b</code> - true to create external links, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#getcreateexternallinks","title":"getCreateExternalLinks","text":"<p>static boolean getCreateExternalLinks()</p> <p>Returns whether the documentation generator creates links to external documentation.</p> <p>Returns:</p> <p>true if external links should be created, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#setdocumentprivatemembers","title":"setDocumentPrivateMembers","text":"<p>static void setDocumentPrivateMembers(boolean b)</p> <p>Sets whether private members (fields, methods) should be included in the generated documentation.</p> <p>Parameters:</p> <p><code>b</code> - true to include private members, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#getdocumentprivatemembers","title":"getDocumentPrivateMembers","text":"<p>static boolean getDocumentPrivateMembers()</p> <p>Returns whether private members are included in the documentation.</p> <p>Returns:</p> <p>true if private members are included, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#setflattendirectories","title":"setFlattenDirectories","text":"<p>static void setFlattenDirectories(boolean b)</p> <p>Sets whether to flatten directory structure when generating the documentation output.</p> <p>Parameters:</p> <p><code>b</code> - true to flatten directories, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#getflattendirectories","title":"getFlattenDirectories","text":"<p>static boolean getFlattenDirectories()</p> <p>Returns whether the documentation output directory structure is flattened.</p> <p>Returns:</p> <p>true if directories are flattened, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#setusecontenttabs","title":"setUseContentTabs","text":"<p>static void setUseContentTabs(boolean b)</p> <p>Sets whether to use content tabs in the generated documentation.</p> <p>Parameters:</p> <p><code>b</code> - true to use content tabs, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#getusecontenttabs","title":"getUseContentTabs","text":"<p>static boolean getUseContentTabs()</p> <p>Returns whether content tabs are used in documentation.</p> <p>Returns:</p> <p>true if content tabs are enabled, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#setverbose","title":"setVerbose","text":"<p>static void setVerbose(boolean b)</p> <p>Sets whether verbose logging or output should be enabled during documentation generation.</p> <p>Parameters:</p> <p><code>b</code> - true to enable verbose output, false otherwise.</p>"},{"location":"markista/javadoc/util/Configuration/#getverbose","title":"getVerbose","text":"<p>static boolean getVerbose()</p> <p>Returns whether verbose output is enabled.</p> <p>Returns:</p> <p>true if verbose output is enabled, false otherwise.</p>"},{"location":"markista/javadoc/util/Context/","title":"Context","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Context/#class-context","title":"Class Context","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Context </p> <p>Singleton class that maintains the current context during documentation generation.</p> <p>This class tracks the current API model, output directory, current module, package, type, method, and field names, as well as the reporter used for reporting messages such as INFO, WARNING, and ERROR.</p> <p>It provides utilities to create directories and files for output, report errors or warnings with location information, and manage the structure of output paths in relation to package and module names.</p> <p>The Context instance should be obtained via getInstance(), and its fields configured as the documentation generation progresses. This class is not thread-safe.</p>"},{"location":"markista/javadoc/util/Context/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String DEFAULT_OUTPUT_DIRECTORY The default output directory private static Context instance The instance of this class that is returned to callers of getInstance() private Reporter reporter The  used for logging messages private Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation. private String outputDirectory The directory the documentation is being generated in private String flattenedDirectories The base section of the directory structure that contains no  documentation and can be skipped when creating directories. private String moduleName The name of the module currently being documented private String packageName The name of the package currently being documented private String typeName The name of the type currently being documented private String methodName The name of the method currently being documented private String fieldName The name of the field currently being documented"},{"location":"markista/javadoc/util/Context/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Context() The default constructor"},{"location":"markista/javadoc/util/Context/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static Context getInstance() Returns the singleton instance of this Context. void setApi(Api api) Sets the Api model associated with this context, also initializing the flattened directories string. Api getApi() Returns the Api model associated with this context. void setOutputDirectory(String outputDirectory) Sets the output directory path where documentation files will be written. void setReporter(Reporter reporter) Sets the reporter used for reporting messages and diagnostics during doc generation. Reporter getReporter() Returns the currently set reporter instance. void setModuleName(String name) Sets the current module name and resets the package name. String getModuleName() Returns the current module name. void setPackageName(String name) Sets the current package name and resets the type name. String getPackageName() Returns the current package name. void setTypeName(String name) Sets the current type name. String getTypeName() Returns the current type name. void setMethodName(String name) Sets the current method name. String getMethodName() Returns the current method name. void setFieldName(String name) Sets the current field name. String getFieldName() Returns the current field name. void reportInfo(String message) Reports an informational message through the reporter. void reportWarning(String message) Reports a warning message including location information. void reportError(String message) Reports an error message including location information. private String location() Returns a string describing the current location context in module, package, type, method, and field. File getDirectory() Constructs a File object representing the directory path corresponding to the current output directory, module, and fully qualified package name. Writer createFile() Creates a Writer for writing a file corresponding to the current context (type name, package, module). Writer createModuleFile(String fileName) Creates a Writer for writing a module-level file inside the module's directory. private Writer createFileInternal(File containingDir, String fileName) Helper method that creates a Writer for a file inside the specified directory. private char pathSeparator() Returns the character used to separate parts of filesystem paths for output directory construction."},{"location":"markista/javadoc/util/Context/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/Context/#default_output_directory","title":"DEFAULT_OUTPUT_DIRECTORY","text":"<p>The default output directory</p> <p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/Context/#instance","title":"instance","text":"<p>The instance of this class that is returned to callers of getInstance()</p>"},{"location":"markista/javadoc/util/Context/#reporter","title":"reporter","text":"<p>The  used for logging messages</p>"},{"location":"markista/javadoc/util/Context/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/util/Context/#outputdirectory","title":"outputDirectory","text":"<p>The directory the documentation is being generated in</p>"},{"location":"markista/javadoc/util/Context/#flatteneddirectories","title":"flattenedDirectories","text":"<p>The base section of the directory structure that contains no  documentation and can be skipped when creating directories.</p>"},{"location":"markista/javadoc/util/Context/#modulename","title":"moduleName","text":"<p>The name of the module currently being documented</p>"},{"location":"markista/javadoc/util/Context/#packagename","title":"packageName","text":"<p>The name of the package currently being documented</p>"},{"location":"markista/javadoc/util/Context/#typename","title":"typeName","text":"<p>The name of the type currently being documented</p>"},{"location":"markista/javadoc/util/Context/#methodname","title":"methodName","text":"<p>The name of the method currently being documented</p>"},{"location":"markista/javadoc/util/Context/#fieldname","title":"fieldName","text":"<p>The name of the field currently being documented</p>"},{"location":"markista/javadoc/util/Context/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Context/#getinstance","title":"getInstance","text":"<p>static Context getInstance()</p> <p>Returns the singleton instance of this Context.</p> <p>Returns:</p> <p>The Context singleton instance.</p>"},{"location":"markista/javadoc/util/Context/#setapi","title":"setApi","text":"<p>void setApi(Api api)</p> <p>Sets the Api model associated with this context, also initializing the flattened directories string.</p> <p>Parameters:</p> <p><code>api</code> - The Api instance.</p>"},{"location":"markista/javadoc/util/Context/#getapi","title":"getApi","text":"<p>Api getApi()</p> <p>Returns the Api model associated with this context.</p> <p>Returns:</p> <p>The current Api model.</p>"},{"location":"markista/javadoc/util/Context/#setoutputdirectory","title":"setOutputDirectory","text":"<p>void setOutputDirectory(String outputDirectory)</p> <p>Sets the output directory path where documentation files will be written.</p> <p>Parameters:</p> <p><code>outputDirectory</code> - The output directory path as a String.</p>"},{"location":"markista/javadoc/util/Context/#setreporter","title":"setReporter","text":"<p>void setReporter(Reporter reporter)</p> <p>Sets the reporter used for reporting messages and diagnostics during doc generation.</p> <p>Parameters:</p> <p><code>reporter</code> - The Reporter instance.</p>"},{"location":"markista/javadoc/util/Context/#getreporter","title":"getReporter","text":"<p>Reporter getReporter()</p> <p>Returns the currently set reporter instance.</p> <p>Returns:</p> <p>The Reporter.</p>"},{"location":"markista/javadoc/util/Context/#setmodulename","title":"setModuleName","text":"<p>void setModuleName(String name)</p> <p>Sets the current module name and resets the package name.</p> <p>Parameters:</p> <p><code>name</code> - The module name to set.</p>"},{"location":"markista/javadoc/util/Context/#getmodulename","title":"getModuleName","text":"<p>String getModuleName()</p> <p>Returns the current module name.</p> <p>Returns:</p> <p>The module name.</p>"},{"location":"markista/javadoc/util/Context/#setpackagename","title":"setPackageName","text":"<p>void setPackageName(String name)</p> <p>Sets the current package name and resets the type name.</p> <p>Parameters:</p> <p><code>name</code> - The package name to set.</p>"},{"location":"markista/javadoc/util/Context/#getpackagename","title":"getPackageName","text":"<p>String getPackageName()</p> <p>Returns the current package name.</p> <p>Returns:</p> <p>The package name.</p>"},{"location":"markista/javadoc/util/Context/#settypename","title":"setTypeName","text":"<p>void setTypeName(String name)</p> <p>Sets the current type name.</p> <p>Parameters:</p> <p><code>name</code> - The type name to set.</p>"},{"location":"markista/javadoc/util/Context/#gettypename","title":"getTypeName","text":"<p>String getTypeName()</p> <p>Returns the current type name.</p> <p>Returns:</p> <p>The type name.</p>"},{"location":"markista/javadoc/util/Context/#setmethodname","title":"setMethodName","text":"<p>void setMethodName(String name)</p> <p>Sets the current method name.</p> <p>Parameters:</p> <p><code>name</code> - The method name to set.</p>"},{"location":"markista/javadoc/util/Context/#getmethodname","title":"getMethodName","text":"<p>String getMethodName()</p> <p>Returns the current method name.</p> <p>Returns:</p> <p>The method name.</p>"},{"location":"markista/javadoc/util/Context/#setfieldname","title":"setFieldName","text":"<p>void setFieldName(String name)</p> <p>Sets the current field name.</p> <p>Parameters:</p> <p><code>name</code> - The field name to set.</p>"},{"location":"markista/javadoc/util/Context/#getfieldname","title":"getFieldName","text":"<p>String getFieldName()</p> <p>Returns the current field name.</p> <p>Returns:</p> <p>The field name.</p>"},{"location":"markista/javadoc/util/Context/#reportinfo","title":"reportInfo","text":"<p>void reportInfo(String message)</p> <p>Reports an informational message through the reporter.</p> <p>Parameters:</p> <p><code>message</code> - The message to report.</p>"},{"location":"markista/javadoc/util/Context/#reportwarning","title":"reportWarning","text":"<p>void reportWarning(String message)</p> <p>Reports a warning message including location information.</p> <p>Parameters:</p> <p><code>message</code> - The warning message to report.</p>"},{"location":"markista/javadoc/util/Context/#reporterror","title":"reportError","text":"<p>void reportError(String message)</p> <p>Reports an error message including location information.</p> <p>Parameters:</p> <p><code>message</code> - The error message to report.</p>"},{"location":"markista/javadoc/util/Context/#location","title":"location","text":"<p>private String location()</p> <p>Returns a string describing the current location context in module, package, type, method, and field. Used to append context details to diagnostic messages.</p> <p>Returns:</p> <p>A formatted multi-line string describing the current location, or empty if no location info.</p>"},{"location":"markista/javadoc/util/Context/#getdirectory","title":"getDirectory","text":"<p>File getDirectory()</p> <p>Constructs a File object representing the directory path corresponding to the current output directory, module, and fully qualified package name. If flattenDirectories is enabled, only directories containing documentation for types are created according to the flattenedDirectories prefix.</p> <p>Returns:</p> <p>The File object representing the directory.</p>"},{"location":"markista/javadoc/util/Context/#createfile","title":"createFile","text":"<p>Writer createFile()</p> <p>Creates a Writer for writing a file corresponding to the current context (type name, package, module). Creates directories as necessary. Defaults of output directory are applied if not set.</p> <p>Returns:</p> <p>A Writer object for writing the file.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/util/Context/#createmodulefile","title":"createModuleFile","text":"<p>Writer createModuleFile(String fileName)</p> <p>Creates a Writer for writing a module-level file inside the module's directory. Creates directories as necessary. Defaults of output directory are applied if not set.</p> <p>Parameters:</p> <p><code>fileName</code> - The file name to create inside the module directory.</p> <p>Returns:</p> <p>A Writer object for writing the file.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/util/Context/#createfileinternal","title":"createFileInternal","text":"<p>private Writer createFileInternal(File containingDir, String fileName)</p> <p>Helper method that creates a Writer for a file inside the specified directory.</p> <p>Parameters:</p> <p><code>containingDir</code> - The directory where the file is created.</p> <p><code>fileName</code> - The filename of the file to create.</p> <p>Returns:</p> <p>A Writer for the file.</p> <p>Throws:</p> <p>IOException</p>"},{"location":"markista/javadoc/util/Context/#pathseparator","title":"pathSeparator","text":"<p>private char pathSeparator()</p> <p>Returns the character used to separate parts of filesystem paths for output directory construction. This method works around a macOS bug where <code>File.pathSeparatorChar</code> wrongly returns ':' instead of '/'.</p> <p>Returns:</p> <p>The platform-appropriate character for separating path components.</p>"},{"location":"markista/javadoc/util/LinkResolver/","title":"LinkResolver","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/LinkResolver/#class-linkresolver","title":"Class LinkResolver","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.LinkResolver </p> <p><code>LinkResolver</code> calculates the paths for Markdown documents to link between different packages and to URLs of external packages and their contents.</p> <p>This class manages resolving references and generating links for types, packages, modules, and native Java elements.</p> <p>It supports resolving primitives, void, native Java modules and packages, and also local API model packages and types.</p> <p>LinkResolver must be initialized for the current API before use via <code>init(Api)</code>. It provides multiple resolve methods for building appropriate links.</p> <p>The class supports relative path calculation for Markdown output. It also manages native Java documentation URLs for modules and packages.</p>"},{"location":"markista/javadoc/util/LinkResolver/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private static final String DOT_HTML private static final String JAVA_24_URL private static final List&lt;String&gt; primitives private static final ModuleLayer moduleLayer private static HashMap&lt;String, String&gt; nativeModuleNames private static HashMap&lt;String, String&gt; nativePackageNames private static HashMap&lt;String, String&gt; suffix private static Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation. private static String flattenedDirectories"},{"location":"markista/javadoc/util/LinkResolver/#constructor-summary","title":"Constructor Summary","text":"Constructor Description LinkResolver() The default constructor is private to prevent instantiation."},{"location":"markista/javadoc/util/LinkResolver/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void init(Api a) Initializes the LinkResolver for the API being documented. static void setFlattenedDirectories(String sd) Sets the string used to adjust flattened directories in relative path calculations. static void addNativeModuleUrl(String moduleName, String baseUrl, String s) Adds a native module URL base for linking native Java modules and their packages. private static String getPackageName(String id) Extracts the package name part from an identifier string, assuming lowercase start for package. private static String getClassName(String id) Extracts the class name part from an identifier string, assuming uppercase start for class. static Reference resolve(String to) Resolves a reference from the current package context to a target type or package. static Reference resolve(String from, String to) Resolves a reference from a specific source package to a target identifier. private static Reference resolveUnsupported(String target) Checks if the target is unsupported by the <code>LinkResolver</code>. private static Reference resolvePrimitiveOrVoid(String target) Checks if the target is a primitive type or void. static String qualifyType(String name) Returns canonical package and class names for a given type name, ensuring both parts are qualified. static Reference resolveNativePackageOrType(String toPackageName, String toClassName) Resolves a native Java package or type to an external documentation URL. static Reference resolveLocalPackageOrType(String from, String toPackageName, String toClassName) Resolves a local package or type within the documented API to a relative link. private static void addClassToReference(String className, Reference link) Appends the class name to the URI on the Reference and sets kind TYPE if not URL. static Reference resolveModule(String from, String target) Resolves a module reference by name to a Reference either local or native. static ModuleNode getModule(String moduleName) Returns the ModuleNode for the named module in the current API. static boolean isPackageQualified(String name) Checks if a package name is qualified (contains a dot). static String qualifyClass(String simpleName) Qualifies a simple class name to its fully qualified name within the API, if exists. static String qualifyPackage(String simpleName) Qualifies a simple package name to its fully qualified name within the API, if exists. static String relativize(String to) Produces a relative path from the current package context to a target package. static String relativizeWithModules(String from, String to) Produces a relative path considering modules between two packages. static String relativize(String from, String to) Produces a relative path string from one package to another by splitting and comparing components. private static String flattenDirectory(String path) Removes prefix directories from a path if flattenedDirectories is set and matches. private static int findCommonIndex(String[] fromParts, String[] toParts) Finds the common prefix index between two string arrays. private static void appendParentDirs(StringBuilder rel, int count) Appends parent directory segments (..) to the relative path string builder. private static void appendTargetDirs(StringBuilder rel, String[] toParts, int start) Appends target directory segments to the relative path string builder starting at index start. private static void addNativeModule(String moduleName) Adds a native Java module URL for linking purposes using a standard Oracle Javadoc base URL. static void addNativeModules() Adds known native modules for Java SE 24 to the resolver."},{"location":"markista/javadoc/util/LinkResolver/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/util/LinkResolver/#dot_html","title":"DOT_HTML","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/LinkResolver/#java_24_url","title":"JAVA_24_URL","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/LinkResolver/#primitives","title":"primitives","text":""},{"location":"markista/javadoc/util/LinkResolver/#modulelayer","title":"moduleLayer","text":""},{"location":"markista/javadoc/util/LinkResolver/#nativemodulenames","title":"nativeModuleNames","text":""},{"location":"markista/javadoc/util/LinkResolver/#nativepackagenames","title":"nativePackageNames","text":""},{"location":"markista/javadoc/util/LinkResolver/#suffix","title":"suffix","text":""},{"location":"markista/javadoc/util/LinkResolver/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/util/LinkResolver/#flatteneddirectories","title":"flattenedDirectories","text":""},{"location":"markista/javadoc/util/LinkResolver/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/LinkResolver/#init","title":"init","text":"<p>static void init(Api a)</p> <p>Initializes the LinkResolver for the API being documented.</p> <p>Parameters:</p> <p><code>a</code> - The API being documented.</p>"},{"location":"markista/javadoc/util/LinkResolver/#setflatteneddirectories","title":"setFlattenedDirectories","text":"<p>static void setFlattenedDirectories(String sd)</p> <p>Sets the string used to adjust flattened directories in relative path calculations.</p> <p>Parameters:</p> <p><code>sd</code> - The string representing flattened directories.</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemoduleurl","title":"addNativeModuleUrl","text":"<p>static void addNativeModuleUrl(String moduleName, String baseUrl, String s)</p> <p>Adds a native module URL base for linking native Java modules and their packages.</p> <p>Parameters:</p> <p><code>moduleName</code> - The native module's name (e.g., java.base).</p> <p><code>baseUrl</code> - The base URL for the native module's documentation.</p> <p><code>s</code> - The suffix to append to URLs for this module's packages (e.g., \".html\").</p>"},{"location":"markista/javadoc/util/LinkResolver/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String id)</p> <p>Extracts the package name part from an identifier string, assuming lowercase start for package.</p> <p>Parameters:</p> <p><code>id</code> - The identifier string (e.g., \"java.lang.String\").</p> <p>Returns:</p> <p>The package name portion or empty string if not a package.</p>"},{"location":"markista/javadoc/util/LinkResolver/#getclassname","title":"getClassName","text":"<p>private static String getClassName(String id)</p> <p>Extracts the class name part from an identifier string, assuming uppercase start for class.</p> <p>Parameters:</p> <p><code>id</code> - The identifier string.</p> <p>Returns:</p> <p>The class name portion or empty string if none found.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve","title":"resolve","text":"<p>static Reference resolve(String to)</p> <p>Resolves a reference from the current package context to a target type or package.</p> <p>Parameters:</p> <p><code>to</code> - The identifier to resolve.</p> <p>Returns:</p> <p>A Reference object representing the resolved link or special kind.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolve_1","title":"resolve","text":"<p>static Reference resolve(String from, String to)</p> <p>Resolves a reference from a specific source package to a target identifier. Tries multiple strategies: unsupported, primitive/void, native, local, module.</p> <p>Parameters:</p> <p><code>from</code> - The package name the reference originates from.</p> <p><code>to</code> - The target identifier to resolve.</p> <p>Returns:</p> <p>A Reference object representing the resolved link or special kind.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolveunsupported","title":"resolveUnsupported","text":"<p>private static Reference resolveUnsupported(String target)</p> <p>Checks if the target is unsupported by the <code>LinkResolver</code>.</p> <p>Parameters:</p> <p><code>target</code> - The target to be resolved.</p> <p>Returns:</p> <p>A <code>Reference</code> with <code>Reference.Kind.UNKNOWN</code> if unsupported, else <code>Reference.Kind.NONE</code>.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolveprimitiveorvoid","title":"resolvePrimitiveOrVoid","text":"<p>private static Reference resolvePrimitiveOrVoid(String target)</p> <p>Checks if the target is a primitive type or void.</p> <p>Parameters:</p> <p><code>target</code> - The target to be resolved.</p> <p>Returns:</p> <p>A Reference with appropriate kind if primitive or void, else none.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifytype","title":"qualifyType","text":"<p>static String qualifyType(String name)</p> <p>Returns canonical package and class names for a given type name, ensuring both parts are qualified.</p> <p>Parameters:</p> <p><code>name</code> - The type name to qualify.</p> <p>Returns:</p> <p>A String array: .</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvenativepackageortype","title":"resolveNativePackageOrType","text":"<p>static Reference resolveNativePackageOrType(String toPackageName, String toClassName)</p> <p>Resolves a native Java package or type to an external documentation URL.</p> <p>Parameters:</p> <p><code>toPackageName</code> - The package name.</p> <p><code>toClassName</code> - The class name within the package.</p> <p>Returns:</p> <p>A Reference with scope NATIVE and kind URL if native, else none.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvelocalpackageortype","title":"resolveLocalPackageOrType","text":"<p>static Reference resolveLocalPackageOrType(String from, String toPackageName, String toClassName)</p> <p>Resolves a local package or type within the documented API to a relative link.</p> <p>Parameters:</p> <p><code>from</code> - The originating package name.</p> <p><code>toPackageName</code> - The target package name.</p> <p><code>toClassName</code> - The target class name.</p> <p>Returns:</p> <p>A Reference with scope LOCAL and kind MODULE or TYPE, or none if unresolved.</p>"},{"location":"markista/javadoc/util/LinkResolver/#addclasstoreference","title":"addClassToReference","text":"<p>private static void addClassToReference(String className, Reference link)</p> <p>Appends the class name to the URI on the Reference and sets kind TYPE if not URL.</p> <p>Parameters:</p> <p><code>className</code> - The class name to add.</p> <p><code>link</code> - The Reference object to modify.</p>"},{"location":"markista/javadoc/util/LinkResolver/#resolvemodule","title":"resolveModule","text":"<p>static Reference resolveModule(String from, String target)</p> <p>Resolves a module reference by name to a Reference either local or native.</p> <p>Parameters:</p> <p><code>from</code> - The package name from which the link originates.</p> <p><code>target</code> - The module name to resolve.</p> <p>Returns:</p> <p>A Reference with scope LOCAL or NATIVE with appropriate URI or none if unresolved.</p>"},{"location":"markista/javadoc/util/LinkResolver/#getmodule","title":"getModule","text":"<p>static ModuleNode getModule(String moduleName)</p> <p>Returns the ModuleNode for the named module in the current API.</p> <p>Parameters:</p> <p><code>moduleName</code> - The module's name.</p> <p>Returns:</p> <p>The ModuleNode if found, else null.</p>"},{"location":"markista/javadoc/util/LinkResolver/#ispackagequalified","title":"isPackageQualified","text":"<p>static boolean isPackageQualified(String name)</p> <p>Checks if a package name is qualified (contains a dot).</p> <p>Parameters:</p> <p><code>name</code> - The package name to check.</p> <p>Returns:</p> <p>True if the name is qualified, false otherwise.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifyclass","title":"qualifyClass","text":"<p>static String qualifyClass(String simpleName)</p> <p>Qualifies a simple class name to its fully qualified name within the API, if exists.</p> <p>Parameters:</p> <p><code>simpleName</code> - The class simple name.</p> <p>Returns:</p> <p>The fully qualified class name or empty string if not found.</p>"},{"location":"markista/javadoc/util/LinkResolver/#qualifypackage","title":"qualifyPackage","text":"<p>static String qualifyPackage(String simpleName)</p> <p>Qualifies a simple package name to its fully qualified name within the API, if exists.</p> <p>Parameters:</p> <p><code>simpleName</code> - The package simple name.</p> <p>Returns:</p> <p>The fully qualified package name or empty string if not found.</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize","title":"relativize","text":"<p>static String relativize(String to)</p> <p>Produces a relative path from the current package context to a target package.</p> <p>Parameters:</p> <p><code>to</code> - The target package name.</p> <p>Returns:</p> <p>A relative filesystem path string.</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativizewithmodules","title":"relativizeWithModules","text":"<p>static String relativizeWithModules(String from, String to)</p> <p>Produces a relative path considering modules between two packages. If packages belong to different modules, the relative path includes module directories.</p> <p>Parameters:</p> <p><code>from</code> - The package name for the source.</p> <p><code>to</code> - The package name for the target.</p> <p>Returns:</p> <p>The relative path string.</p>"},{"location":"markista/javadoc/util/LinkResolver/#relativize_1","title":"relativize","text":"<p>static String relativize(String from, String to)</p> <p>Produces a relative path string from one package to another by splitting and comparing components. Supports flattened directories if set.</p> <p>Parameters:</p> <p><code>from</code> - The source package name.</p> <p><code>to</code> - The target package name.</p> <p>Returns:</p> <p>The relative path string.</p>"},{"location":"markista/javadoc/util/LinkResolver/#flattendirectory","title":"flattenDirectory","text":"<p>private static String flattenDirectory(String path)</p> <p>Removes prefix directories from a path if flattenedDirectories is set and matches.</p> <p>Parameters:</p> <p><code>path</code> - The package name or path to flatten.</p> <p>Returns:</p> <p>The adjusted path or original if no flattening applies.</p>"},{"location":"markista/javadoc/util/LinkResolver/#findcommonindex","title":"findCommonIndex","text":"<p>private static int findCommonIndex(String[] fromParts, String[] toParts)</p> <p>Finds the common prefix index between two string arrays.</p> <p>Parameters:</p> <p><code>fromParts</code> - Array of strings for source path.</p> <p><code>toParts</code> - Array of strings for target path.</p> <p>Returns:</p> <p>The number of common leading segments.</p>"},{"location":"markista/javadoc/util/LinkResolver/#appendparentdirs","title":"appendParentDirs","text":"<p>private static void appendParentDirs(StringBuilder rel, int count)</p> <p>Appends parent directory segments (..) to the relative path string builder.</p> <p>Parameters:</p> <p><code>rel</code> - The StringBuilder accumulating the path.</p> <p><code>count</code> - The number of parent directory segments to append.</p>"},{"location":"markista/javadoc/util/LinkResolver/#appendtargetdirs","title":"appendTargetDirs","text":"<p>private static void appendTargetDirs(StringBuilder rel, String[] toParts, int start)</p> <p>Appends target directory segments to the relative path string builder starting at index start.</p> <p>Parameters:</p> <p><code>rel</code> - The StringBuilder accumulating the path.</p> <p><code>toParts</code> - Array of target path segments.</p> <p><code>start</code> - The start index for appending segments.</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodule","title":"addNativeModule","text":"<p>private static void addNativeModule(String moduleName)</p> <p>Adds a native Java module URL for linking purposes using a standard Oracle Javadoc base URL.</p> <p>Parameters:</p> <p><code>moduleName</code> - The native module name (e.g., java.base).</p>"},{"location":"markista/javadoc/util/LinkResolver/#addnativemodules","title":"addNativeModules","text":"<p>static void addNativeModules()</p> <p>Adds known native modules for Java SE 24 to the resolver. This populates internal mappings for native module and package documentation URLs.</p>"},{"location":"markista/javadoc/util/Markdown/","title":"Markdown","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Markdown/#class-markdown","title":"Class Markdown","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Markdown </p> <p>A utility class for producing Markdown formatted text and resolving Markdown links to point to the correct file, directory, or web page.</p>"},{"location":"markista/javadoc/util/Markdown/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static final String FORMAT_SIMPLE_LINK private static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities."},{"location":"markista/javadoc/util/Markdown/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Markdown()"},{"location":"markista/javadoc/util/Markdown/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String fullSignature(MethodNode method) Formats the signature of a method as markdown. static String formatParams(List&lt;ParamNode&gt; params) Formats a list of <code>ParamNode</code> objects as markdown, identifying and linking type names. static String formatReference(Reference ref) Formats a link specified in a <code>Reference</code> object as markdown. static String formatText(Text text) Formats text contained in a <code>Text</code> object as markdown. static String resolveMarkdownLinks(String markdown) Resolves markdown formatted links to point to the correct directory and page. static String formatLink(Text.Segment segment) Formats links contained in a text segment as markdown. static String mdAutoLink(String identifier) Create a markdown link, automatically deciding what kind of link to make. static String mdAutoLink(String identifier, boolean simplify) Create a markdown link, automatically deciding what kind of link to make. static String mdAutoLink(String identifier, String displayName, boolean simplify) Create a markdown link, automatically deciding what kind of link to make. private static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean simplify) static String mdRefLink(Reference link) Creates a markdown formatted link from a Reference object. static String mdRefLinkMethod(Reference link) Creates a markdown formatted link from a Reference object. static String linkGenerics(String str, boolean simplify) Changes qualified generic type names to unqualified generic  type names and adds links to their API documentation. static String splitAndLink(String typesString, boolean simplify) Creates markdown formatted text with links to types from a string. static String mdAnchor(String phrase) Converts a string to the format required for use as a Markdown anchor. static String mdAnchorLink(String phrase) Create a markdown formatted link to an anchor within the same markdown page. static String mdDocumentLink(String docName) Creates a Markdown link to another Markdown document static String mdDocumentLink(String phrase, String docName) Creates a Markdown formatted link to another Markdown page or a web page static String escape(String str) Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>."},{"location":"markista/javadoc/util/Markdown/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/Markdown/#format_simple_link","title":"FORMAT_SIMPLE_LINK","text":"<p>See Also:</p> <p>Constant Field Values</p>"},{"location":"markista/javadoc/util/Markdown/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/util/Markdown/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Markdown/#fullsignature","title":"fullSignature","text":"<p>static String fullSignature(MethodNode method)</p> <p>Formats the signature of a method as markdown.</p> <p>Parameters:</p> <p><code>method</code> - The method to be formatted as markdown</p> <p>Returns:</p> <p>Markdown formatted text representing the method's signature</p>"},{"location":"markista/javadoc/util/Markdown/#formatparams","title":"formatParams","text":"<p>static String formatParams(List&lt;ParamNode&gt; params)</p> <p>Formats a list of <code>ParamNode</code> objects as markdown, identifying and linking type names.</p> <p>Parameters:</p> <p><code>params</code> - a <code>Reference</code> object specifying a link</p> <p>Returns:</p> <p>Markdown formatted text containing a link</p>"},{"location":"markista/javadoc/util/Markdown/#formatreference","title":"formatReference","text":"<p>static String formatReference(Reference ref)</p> <p>Formats a link specified in a <code>Reference</code> object as markdown.</p> <p>Parameters:</p> <p><code>ref</code> - a <code>Reference</code> object specifying a link</p> <p>Returns:</p> <p>Markdown formatted text containing a link</p>"},{"location":"markista/javadoc/util/Markdown/#formattext","title":"formatText","text":"<p>static String formatText(Text text)</p> <p>Formats text contained in a <code>Text</code> object as markdown.</p> <p>Parameters:</p> <p><code>text</code> - A <code>Text</code> object to be formatted</p> <p>Returns:</p> <p>Markdown formatted text</p>"},{"location":"markista/javadoc/util/Markdown/#resolvemarkdownlinks","title":"resolveMarkdownLinks","text":"<p>static String resolveMarkdownLinks(String markdown)</p> <p>Resolves markdown formatted links to point to the correct directory and page.</p> <p>Parameters:</p> <p><code>markdown</code> - Markdown formatted text containing links</p> <p>Returns:</p> <p>markdown formatted text with resolved links</p>"},{"location":"markista/javadoc/util/Markdown/#formatlink","title":"formatLink","text":"<p>static String formatLink(Text.Segment segment)</p> <p>Formats links contained in a text segment as markdown.</p> <p>Parameters:</p> <p><code>segment</code> - A text segment</p> <p>Returns:</p> <p>Markdown formatted text with a resolved link</p>"},{"location":"markista/javadoc/util/Markdown/#mdautolink","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier)</p> <p>Create a markdown link, automatically deciding what kind of link to make.</p> <p>Parameters:</p> <p><code>identifier</code> - a package, type, or method identifier</p> <p>Returns:</p> <p>markdown text for a link to a document for the specified identifier or an anchor link</p>"},{"location":"markista/javadoc/util/Markdown/#mdautolink_1","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier, boolean simplify)</p> <p>Create a markdown link, automatically deciding what kind of link to make.</p> <p>Parameters:</p> <p><code>identifier</code> - a package, type, or method identifier</p> <p><code>simplify</code> - if true, the fully simplified version of the identifier is shown</p> <p>Returns:</p> <p>markdown text for a link to a document for the specified identifier or an anchor link</p>"},{"location":"markista/javadoc/util/Markdown/#mdautolink_2","title":"mdAutoLink","text":"<p>static String mdAutoLink(String identifier, String displayName, boolean simplify)</p> <p>Create a markdown link, automatically deciding what kind of link to make.</p> <p>Parameters:</p> <p><code>identifier</code> - a package, type, or method identifier</p> <p><code>displayName</code> - If non-null, <code>displayName</code> will be the text displayed in the generated markdown.</p> <p><code>simplify</code> - if true, the simplified version of the identifier is shown</p> <p>Returns:</p> <p>markdown text for a link to a document for the specified identifier or an anchor link</p>"},{"location":"markista/javadoc/util/Markdown/#setdisplayname","title":"setDisplayName","text":"<p>private static void setDisplayName(Reference link, String displayName, boolean isLocalMethod, boolean simplify)</p>"},{"location":"markista/javadoc/util/Markdown/#mdreflink","title":"mdRefLink","text":"<p>static String mdRefLink(Reference link)</p> <p>Creates a markdown formatted link from a Reference object.</p> <p>Parameters:</p> <p><code>link</code> - The reference object</p> <p>Returns:</p> <p>a markdown formatted link</p>"},{"location":"markista/javadoc/util/Markdown/#mdreflinkmethod","title":"mdRefLinkMethod","text":"<p>static String mdRefLinkMethod(Reference link)</p> <p>Creates a markdown formatted link from a Reference object. with the option of simplifying qualified type names.</p> <p>Parameters:</p> <p><code>link</code> - The reference object</p> <p>Returns:</p> <p>a markdown formatted link</p>"},{"location":"markista/javadoc/util/Markdown/#linkgenerics","title":"linkGenerics","text":"<p>static String linkGenerics(String str, boolean simplify)</p> <p>Changes qualified generic type names to unqualified generic  type names and adds links to their API documentation.</p> <p>Parameters:</p> <p><code>str</code> - A string containing a qualified generic name.</p> <p><code>simplify</code> - If true, qualified type names will be simplified</p> <p>Returns:</p> <p>A string with the qualified names changed to unqualified            names and links to types added</p>"},{"location":"markista/javadoc/util/Markdown/#splitandlink","title":"splitAndLink","text":"<p>static String splitAndLink(String typesString, boolean simplify)</p> <p>Creates markdown formatted text with links to types from a string. containing one or more types separated by commas.</p> <p>Parameters:</p> <p><code>typesString</code> - A string containing a comma-separated list of type names</p> <p><code>simplify</code> - if true, the simplified version of the identifier is shown</p> <p>Returns:</p> <p>a list of links to types formatted as Markdown</p>"},{"location":"markista/javadoc/util/Markdown/#mdanchor","title":"mdAnchor","text":"<p>static String mdAnchor(String phrase)</p> <p>Converts a string to the format required for use as a Markdown anchor. Converted strings will be lowercase and contain no spaces.</p> <p>Parameters:</p> <p><code>phrase</code> - A string to be used in an anchor link</p> <p>Returns:</p> <p>The string converted to match the format required by Markdown anchor links</p>"},{"location":"markista/javadoc/util/Markdown/#mdanchorlink","title":"mdAnchorLink","text":"<p>static String mdAnchorLink(String phrase)</p> <p>Create a markdown formatted link to an anchor within the same markdown page.</p> <p>Parameters:</p> <p><code>phrase</code> - A string to be used in an anchor link</p> <p>Returns:</p> <p>Markdown formatted text containing a correctly formatted anchor link</p>"},{"location":"markista/javadoc/util/Markdown/#mddocumentlink","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String docName)</p> <p>Creates a Markdown link to another Markdown document</p> <p>Parameters:</p> <p><code>docName</code> - The filename of the document being linked to</p> <p>Returns:</p> <p>The Markdown formatted link</p>"},{"location":"markista/javadoc/util/Markdown/#mddocumentlink_1","title":"mdDocumentLink","text":"<p>static String mdDocumentLink(String phrase, String docName)</p> <p>Creates a Markdown formatted link to another Markdown page or a web page</p> <p>Parameters:</p> <p><code>phrase</code> - the text displayed for the link in the Markdown page</p> <p><code>docName</code> - the name of the Markdown page being linked to, or the                 URL of a web page being linked to</p> <p>Returns:</p> <p>Markdown formatted text containing a correctly formatted link to         the specified Markdown page or web page.</p>"},{"location":"markista/javadoc/util/Markdown/#escape","title":"escape","text":"<p>static String escape(String str)</p> <p>Escapes HTML <code>&lt;</code> and <code>&gt;</code> characters in a string with their corresponding HTML character entities, <code>&amp;lt;</code> and <code>&amp;gt;</code>.</p> <p>Parameters:</p> <p><code>str</code> - A string to be escaped</p> <p>Returns:</p> <p>The escaped string</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/","title":"MarkdownParser.Segment","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#class-markdownparsersegment","title":"Class MarkdownParser.Segment","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser.Segment  Enclosing Class: MarkdownParser</p> <p>Represents a segment of the parsed Markdown input. A segment has a kind and associated text content, and links to the next segment in sequence.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description MarkdownParser.Segment next MarkdownParser.SegmentKind kind String text"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser.Segment(MarkdownParser.SegmentKind k) Creates a Segment with the specified kind."},{"location":"markista/javadoc/util/MarkdownParser.Segment/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description void setKind(MarkdownParser.SegmentKind k) Sets the Segment kind. MarkdownParser.SegmentKind getKind() Returns the Segment kind. void setText(String t) Sets the text content of the Segment. String getText() Returns the text content of the Segment. void setNext(MarkdownParser.Segment segment) Sets the next Segment in the sequence. MarkdownParser.Segment getNext() Returns the next Segment, or an END Segment if none exists."},{"location":"markista/javadoc/util/MarkdownParser.Segment/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/MarkdownParser.Segment/#next","title":"next","text":""},{"location":"markista/javadoc/util/MarkdownParser.Segment/#kind","title":"kind","text":""},{"location":"markista/javadoc/util/MarkdownParser.Segment/#text","title":"text","text":""},{"location":"markista/javadoc/util/MarkdownParser.Segment/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/MarkdownParser.Segment/#setkind","title":"setKind","text":"<p>void setKind(MarkdownParser.SegmentKind k)</p> <p>Sets the Segment kind.</p> <p>Parameters:</p> <p><code>k</code> - The SegmentKind to set.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#getkind","title":"getKind","text":"<p>MarkdownParser.SegmentKind getKind()</p> <p>Returns the Segment kind.</p> <p>Returns:</p> <p>The SegmentKind.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#settext","title":"setText","text":"<p>void setText(String t)</p> <p>Sets the text content of the Segment.</p> <p>Parameters:</p> <p><code>t</code> - The text string.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#gettext","title":"getText","text":"<p>String getText()</p> <p>Returns the text content of the Segment.</p> <p>Returns:</p> <p>The text string.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#setnext","title":"setNext","text":"<p>void setNext(MarkdownParser.Segment segment)</p> <p>Sets the next Segment in the sequence.</p> <p>Parameters:</p> <p><code>segment</code> - The next Segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser.Segment/#getnext","title":"getNext","text":"<p>MarkdownParser.Segment getNext()</p> <p>Returns the next Segment, or an END Segment if none exists.</p> <p>Returns:</p> <p>The next Segment or an END Segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/","title":"MarkdownParser.SegmentKind","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#enum-markdownparsersegmentkind","title":"Enum MarkdownParser.SegmentKind","text":"<p>java.lang.Object java.lang.Enum&lt;io.github.sandydunlop.markista.util.MarkdownParser.SegmentKind&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser.SegmentKind  Enclosing Class: MarkdownParser</p> <p>Enum representing the kind of a Markdown segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#enum-constants","title":"Enum Constants","text":"Enum Constant Description NONE TEXT BRACKETS_TAG PARENS_TAG END"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser.SegmentKind()"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static MarkdownParser.SegmentKind values() static MarkdownParser.SegmentKind valueOf(String name)"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#enum-constant-details","title":"Enum Constant Details","text":""},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#none","title":"NONE","text":"<p>public static final MarkdownParser.SegmentKind NONE</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#text","title":"TEXT","text":"<p>public static final MarkdownParser.SegmentKind TEXT</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#brackets_tag","title":"BRACKETS_TAG","text":"<p>public static final MarkdownParser.SegmentKind BRACKETS_TAG</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#parens_tag","title":"PARENS_TAG","text":"<p>public static final MarkdownParser.SegmentKind PARENS_TAG</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#end","title":"END","text":"<p>public static final MarkdownParser.SegmentKind END</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#values","title":"values","text":"<p>static MarkdownParser.SegmentKind values()</p>"},{"location":"markista/javadoc/util/MarkdownParser.SegmentKind/#valueof","title":"valueOf","text":"<p>static MarkdownParser.SegmentKind valueOf(String name)</p>"},{"location":"markista/javadoc/util/MarkdownParser/","title":"MarkdownParser","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/MarkdownParser/#class-markdownparser","title":"Class MarkdownParser","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.MarkdownParser </p> <p>Parses a Markdown string into a sequence of segments representing text and special markup such as brackets and parentheses.</p> <p>This parser is designed to tokenize the Markdown content by identifying textual parts and segments enclosed in brackets  and parentheses (). It also handles inline code spans denoted by backticks (`) to avoid parsing markup inside code.</p> <p>The parsed segments can be iterated in sequence starting from the firstSegment() method. Each segment carries its type (kind) which specifies how it should be interpreted or rendered.</p> <p>Segment kinds include TEXT for normal text, BRACKETS_TAG for content inside square brackets, PARENS_TAG for content inside parentheses following brackets (typical Markdown link syntax), and END indicating the end of the sequence.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#nested-class-summary","title":"Nested Class Summary","text":"Modifier and Type Class Description MarkdownParser.Segment Represents a segment of the parsed Markdown input."},{"location":"markista/javadoc/util/MarkdownParser/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private int head private int tail int openBracket int openParenthesis int closeBracket int closeParenthesis private String markdown private List&lt;MarkdownParser.Segment&gt; segments private MarkdownParser.Segment prev"},{"location":"markista/javadoc/util/MarkdownParser/#constructor-summary","title":"Constructor Summary","text":"Constructor Description MarkdownParser(String md) Creates a new MarkdownParser and immediately parses the provided Markdown string."},{"location":"markista/javadoc/util/MarkdownParser/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description private void processCharInGeneral() Handles a character encountered when not in code or special markup. private void handleOpenBracket() Handles the open bracket 'Handles the open bracket '[' encountered in the markdown. private boolean handleOpenParenthesis(char prevChar) Handles an open parenthesis '(' encountered immediately after closing bracket '. private void handleCloseBracket() Handles the close bracket ' encountered in the markdown. private boolean handleCloseParenthesis(boolean parensFollowBrackets) Handles the close parenthesis ')' encountered. private void saveText() Saves any text from the tail position up to the current head as a TEXT segment. private void saveBracketsTag() Saves the content between the most recent pair of brackets as a BRACKETS_TAG segment. private void saveParensTag() Saves the content between the most recent pair of parentheses as a PARENS_TAG segment. private void saveSegment(MarkdownParser.Segment segment) Adds the specified segment to the list and links it to the previously saved segment. MarkdownParser.Segment firstSegment() Returns the first Segment in the parsed sequence."},{"location":"markista/javadoc/util/MarkdownParser/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/MarkdownParser/#head","title":"head","text":""},{"location":"markista/javadoc/util/MarkdownParser/#tail","title":"tail","text":""},{"location":"markista/javadoc/util/MarkdownParser/#openbracket","title":"openBracket","text":""},{"location":"markista/javadoc/util/MarkdownParser/#openparenthesis","title":"openParenthesis","text":""},{"location":"markista/javadoc/util/MarkdownParser/#closebracket","title":"closeBracket","text":""},{"location":"markista/javadoc/util/MarkdownParser/#closeparenthesis","title":"closeParenthesis","text":""},{"location":"markista/javadoc/util/MarkdownParser/#markdown","title":"markdown","text":""},{"location":"markista/javadoc/util/MarkdownParser/#segments","title":"segments","text":""},{"location":"markista/javadoc/util/MarkdownParser/#prev","title":"prev","text":""},{"location":"markista/javadoc/util/MarkdownParser/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/MarkdownParser/#processcharingeneral","title":"processCharInGeneral","text":"<p>private void processCharInGeneral()</p> <p>Handles a character encountered when not in code or special markup. Currently a placeholder for any general character processing.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#handleopenbracket","title":"handleOpenBracket","text":"<p>private void handleOpenBracket()</p> <p>Handles the open bracket 'Handles the open bracket '[' encountered in the markdown. Saves any preceding text segment before marking the position of the open bracket.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#handleopenparenthesis","title":"handleOpenParenthesis","text":"<p>private boolean handleOpenParenthesis(char prevChar)</p> <p>Handles an open parenthesis '(' encountered immediately after closing bracket '.</p> <p>Parameters:</p> <p><code>prevChar</code> - The previous character before '(' to determine if parentheses follow brackets.</p> <p>Returns:</p> <p>true if parentheses follow brackets, false otherwise.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#handleclosebracket","title":"handleCloseBracket","text":"<p>private void handleCloseBracket()</p> <p>Handles the close bracket ' encountered in the markdown. Records the position and saves a bracket-tag segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#handlecloseparenthesis","title":"handleCloseParenthesis","text":"<p>private boolean handleCloseParenthesis(boolean parensFollowBrackets)</p> <p>Handles the close parenthesis ')' encountered. If parentheses follow brackets, saves a parentheses-tag segment.</p> <p>Parameters:</p> <p><code>parensFollowBrackets</code> - True if parentheses are following brackets (indicating a link).</p> <p>Returns:</p> <p>Always returns false to reset parsing state for parentheses.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#savetext","title":"saveText","text":"<p>private void saveText()</p> <p>Saves any text from the tail position up to the current head as a TEXT segment. Does nothing if no text is available in that range.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#savebracketstag","title":"saveBracketsTag","text":"<p>private void saveBracketsTag()</p> <p>Saves the content between the most recent pair of brackets as a BRACKETS_TAG segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#saveparenstag","title":"saveParensTag","text":"<p>private void saveParensTag()</p> <p>Saves the content between the most recent pair of parentheses as a PARENS_TAG segment.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#savesegment","title":"saveSegment","text":"<p>private void saveSegment(MarkdownParser.Segment segment)</p> <p>Adds the specified segment to the list and links it to the previously saved segment.</p> <p>Parameters:</p> <p><code>segment</code> - The Segment to save and link.</p>"},{"location":"markista/javadoc/util/MarkdownParser/#firstsegment","title":"firstSegment","text":"<p>MarkdownParser.Segment firstSegment()</p> <p>Returns the first Segment in the parsed sequence. If no segments exist, returns an END kind Segment.</p> <p>Returns:</p> <p>The first Segment or an END Segment if none exist.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/","title":"ModuleDirectives","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#class-moduledirectives","title":"Class ModuleDirectives","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.ModuleDirectives </p> <p>A utility class for creating DirectiveNode objects which encapsulate  the information provided by Directive  objects scanned by the ApiScanner.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static DocletEnvironment environment"},{"location":"markista/javadoc/util/ModuleDirectives/#constructor-summary","title":"Constructor Summary","text":"Constructor Description ModuleDirectives()"},{"location":"markista/javadoc/util/ModuleDirectives/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void setEnvironment(DocletEnvironment env) Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements. static DirectiveNode createFrom(ModuleElement.Directive directive) Creates a DirectiveNode to encapsulate the information provided by a module directive element. static DirectiveNode createRequiresDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a requires directive. static DirectiveNode createExportsDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an exports directive. static DirectiveNode createOpensDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing an opens directive. static DirectiveNode createUsesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a uses directive. static DirectiveNode createProvidesDirective(ModuleElement.Directive directive) Creates a DirectiveNode representing a provides directive."},{"location":"markista/javadoc/util/ModuleDirectives/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#environment","title":"environment","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/ModuleDirectives/#setenvironment","title":"setEnvironment","text":"<p>static void setEnvironment(DocletEnvironment env)</p> <p>Sets the doclet environment where it can get access to  an Elements implementation to retrieve information about scanned elements.</p> <p>Parameters:</p> <p><code>env</code> - The doclet environment</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createfrom","title":"createFrom","text":"<p>static DirectiveNode createFrom(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode to encapsulate the information provided by a module directive element.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned module directive.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createrequiresdirective","title":"createRequiresDirective","text":"<p>static DirectiveNode createRequiresDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a requires directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned RequiresDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createexportsdirective","title":"createExportsDirective","text":"<p>static DirectiveNode createExportsDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an exports directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned ExportsDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createopensdirective","title":"createOpensDirective","text":"<p>static DirectiveNode createOpensDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing an opens directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned OpensDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createusesdirective","title":"createUsesDirective","text":"<p>static DirectiveNode createUsesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a uses directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned UsesDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/ModuleDirectives/#createprovidesdirective","title":"createProvidesDirective","text":"<p>static DirectiveNode createProvidesDirective(ModuleElement.Directive directive)</p> <p>Creates a DirectiveNode representing a provides directive.</p> <p>Parameters:</p> <p><code>directive</code> - a scanned ProvidesDirective element.</p> <p>Returns:</p> <p>A DirectiveNode representing the scanned directive element.</p>"},{"location":"markista/javadoc/util/TypeUtils/","title":"TypeUtils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/TypeUtils/#class-typeutils","title":"Class TypeUtils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.TypeUtils </p> <p>Utility class providing static methods to create and manipulate TypeNodes, MethodNodes, FieldNodes, and other API model objects from language model elements and Javadoc doc trees obtained from the Java source code.</p> <p>This class bridges the Java language model and the internal API representation used for generating documentation. It includes methods to extract element details, ownership, modifiers, supertypes, interfaces, annotations, and documentation text.</p> <p>The TypeUtils class must be initialized with an Api and DocletEnvironment before usage via the init(Api, DocletEnvironment) method.</p> <p>It provides numerous helper methods to process types, methods, fields, annotations, and project structure metadata.</p> <p>Methods also support handling Javadoc comment trees to extract detailed documentation fragments such as @deprecated, @param, @return, @since, and @see tags.</p> <p>The class works internally with the Api model for cross-referencing and linking discovered elements.</p> <p>This class is for internal use within the documentation generator and is not thread-safe.</p>"},{"location":"markista/javadoc/util/TypeUtils/#field-summary","title":"Field Summary","text":"Modifier and Type Field Description private static Context ctx The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities. private static DocletEnvironment environment private static Api api The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation."},{"location":"markista/javadoc/util/TypeUtils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description TypeUtils()"},{"location":"markista/javadoc/util/TypeUtils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static void init(Api a, DocletEnvironment e) Initializes this utility class to use the given API model and Doclet environment. static TypeNode nodeFromElement(TypeElement element) Creates or retrieves a TypeNode from the supplied TypeElement. static void setEnumConstants(EnumNode enumNode, TypeElement e) Reads enum constants from the TypeElement and adds them as FieldNodes to the EnumNode. static MethodNode nodeFromElement(ExecutableElement element) Creates a MethodNode representation from the ExecutableElement element (method or constructor). static FieldNode nodeFromElement(VariableElement element) Creates a FieldNode representation from the VariableElement element representing a field. static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind) Factory method to create TypeNode (ClassNode, InterfaceNode, EnumNode, or AnnotationNode) based on ElementKind. static Text createText(List&lt;? extends DocTree&gt; dtList) Creates a complete Text object by traversing a list of DocTree nodes from the Javadoc comment. static Text.Segment createTextSegment(DocTree docTree) Creates a single Text.Segment from a DocTree node, setting the appropriate kind and content. static String getDocTreeText(DocTree docTree, int start) Extracts text from a DocTree to build a string from a part of its tokenized representation. static String getDocTreePart(DocTree docTree, int n) Extracts a specific part (token) from a DocTree's toString representation. static void setDocumentation(Node node, Element e) Sets documentation text for a Node based on the doc comment tree attached to a language model element. static void setTypeOwnership(TypeNode typeNode, TypeElement element) Sets ownership of a TypeNode based on its enclosing type or package. static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement) Sets annotations on the MethodNode, in particular looks for @Override annotation to set overridden methods. static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement) Checks implemented interfaces of a method's owning type, and sets \"specifiedBy\" on the method if it implements an interface method. static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement) Recursively searches for an overridden method matching the supplied method within the supertypes of its owner. static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement) Searches the given TypeElement for a method matching the supplied ExecutableElement\\u2019s name. static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method) Attempts to find an overridden method defined in native Java classes (e.g., from runtime classes). static void addConstantFieldValuesReference(ModuleNode moduleNode) Adds references to constant field values from classes in the API to the provided module node. static boolean isInterface(TypeMirror typeMirror) Returns true if the TypeMirror represents an interface. static void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result) Finds all interfaces implemented directly by the given TypeElement and adds their names to the result list. static void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result) Collects all supertypes (classes) of the specified type recursively and adds them to the result list. static DeprecatedTree getDeprecation(DocCommentTree docComment) Finds the DeprecatedTree from a Javadoc DocCommentTree if present. static ReturnTree getReturnTree(DocCommentTree dcTree) Finds the @return tag from a Javadoc DocCommentTree if present. static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter) Finds the @param tag in a DocCommentTree matching the specified parameter variable. static List&lt;Reference&gt; getReferences(DocCommentTree dcTree) Extracts a list of Reference objects representing occurrences of @see tags in the Javadoc comment. static Text getSince(DocCommentTree dcTree) Extracts the @since tag content from a DocCommentTree, if present. static String getUrl(String html) Extracts a URL string from html-like text, e.g., from an href attribute inside double-quotes. static void setModifiers(Node node, Set&lt;Modifier&gt; modifiers) Adds modifiers to a model Node based on the set of language model modifiers. static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes) Adds list of thrown types (exceptions) to a MethodNode based on Java model type mirrors. static void setDeprecationStatus(Node node, Element e, DocCommentTree dct) Sets the deprecation status of a Node based on element annotations and Javadoc @deprecated tag. static boolean isIncludedInApi(Element e) Returns true if the element should be included in the public API documentation based on its modifiers and configuration. static void setMethodParams(MethodNode methodDoc, ExecutableElement ee) Sets the parameters on a MethodNode by inspecting the ExecutableElement and its doc comment tags. static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations) Adds implementation type names to a DirectiveNode. static TypeNode getFieldType(String className, String fieldName) Gets the field type as a TypeNode for the specified class name and field name. static TypeNode getParamType(ExecutableElement method, String fieldName) Gets the parameter type as a TypeNode for the specified parameter name in the method. private static String getPackageName(String qualifiedTypeName) Extracts the package name from a fully qualified type name. static PackageElement getEnclosingPackageElement(Element element) Recursively finds the enclosing PackageElement of a given element. static TypeElement getEnclosingTypeElement(Element element) Recursively finds the enclosing TypeElement (class, interface, enum, annotation) for the given element."},{"location":"markista/javadoc/util/TypeUtils/#field-details","title":"Field Details","text":""},{"location":"markista/javadoc/util/TypeUtils/#ctx","title":"ctx","text":"<p>The Context singleton instance providing access to the current documentation generation context, including configuration, current module/package/type names, and reporting utilities.</p>"},{"location":"markista/javadoc/util/TypeUtils/#environment","title":"environment","text":""},{"location":"markista/javadoc/util/TypeUtils/#api","title":"api","text":"<p>The Api model representing the entire documented API structure, including modules, packages, types, and members used for cross-referencing and navigation.</p>"},{"location":"markista/javadoc/util/TypeUtils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/TypeUtils/#init","title":"init","text":"<p>static void init(Api a, DocletEnvironment e)</p> <p>Initializes this utility class to use the given API model and Doclet environment. Sets up internal references and context necessary for subsequent operations.</p> <p>Parameters:</p> <p><code>a</code> - The Api instance representing the overall API model.</p> <p><code>e</code> - The DocletEnvironment providing access to Javadoc doc trees and processing utilities.</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement","title":"nodeFromElement","text":"<p>static TypeNode nodeFromElement(TypeElement element)</p> <p>Creates or retrieves a TypeNode from the supplied TypeElement. This method extracts type details such as qualified name, package, kind, ownership, modifiers, supertypes, and interfaces, adds the new TypeNode to the API model, and returns it.</p> <p>Parameters:</p> <p><code>element</code> - The language model TypeElement to create a TypeNode from.</p> <p>Returns:</p> <p>The corresponding TypeNode in the API model, or null if unsupported or error occurs.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setenumconstants","title":"setEnumConstants","text":"<p>static void setEnumConstants(EnumNode enumNode, TypeElement e)</p> <p>Reads enum constants from the TypeElement and adds them as FieldNodes to the EnumNode.</p> <p>Parameters:</p> <p><code>enumNode</code> - The EnumNode to populate with constants.</p> <p><code>e</code> - The TypeElement representing the enum type.</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement_1","title":"nodeFromElement","text":"<p>static MethodNode nodeFromElement(ExecutableElement element)</p> <p>Creates a MethodNode representation from the ExecutableElement element (method or constructor). Sets return type, parameters, modifiers, thrown exceptions, ownership, and annotations. Adds the method to the owning TypeNode's method or constructor list.</p> <p>Parameters:</p> <p><code>element</code> - The ExecutableElement to convert.</p> <p>Returns:</p> <p>The constructed MethodNode, or null if errors occur.</p>"},{"location":"markista/javadoc/util/TypeUtils/#nodefromelement_2","title":"nodeFromElement","text":"<p>static FieldNode nodeFromElement(VariableElement element)</p> <p>Creates a FieldNode representation from the VariableElement element representing a field. Links the field to the owning TypeNode.</p> <p>Parameters:</p> <p><code>element</code> - The VariableElement to convert.</p> <p>Returns:</p> <p>The FieldNode, or null if errors occur.</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtypenode","title":"createTypeNode","text":"<p>static TypeNode createTypeNode(String qualifiedName, String simpleName, PackageNode packageNode, ElementKind elementKind)</p> <p>Factory method to create TypeNode (ClassNode, InterfaceNode, EnumNode, or AnnotationNode) based on ElementKind.</p> <p>Parameters:</p> <p><code>qualifiedName</code> - Fully qualified name of the type.</p> <p><code>simpleName</code> - The simple (unqualified) name of the type.</p> <p><code>packageNode</code> - The owning PackageNode.</p> <p><code>elementKind</code> - The ElementKind representing the type kind.</p> <p>Returns:</p> <p>A TypeNode instance corresponding to the kind, or null if unsupported.</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtext","title":"createText","text":"<p>static Text createText(List&lt;? extends DocTree&gt; dtList)</p> <p>Creates a complete Text object by traversing a list of DocTree nodes from the Javadoc comment.</p> <p>Parameters:</p> <p><code>dtList</code> - List of DocTree nodes representing a part of a Javadoc comment.</p> <p>Returns:</p> <p>A Text object composed of segments derived from each DocTree node.</p>"},{"location":"markista/javadoc/util/TypeUtils/#createtextsegment","title":"createTextSegment","text":"<p>static Text.Segment createTextSegment(DocTree docTree)</p> <p>Creates a single Text.Segment from a DocTree node, setting the appropriate kind and content.</p> <p>Parameters:</p> <p><code>docTree</code> - The DocTree node to convert.</p> <p>Returns:</p> <p>A Text.Segment representing the content and kind of the provided DocTree.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdoctreetext","title":"getDocTreeText","text":"<p>static String getDocTreeText(DocTree docTree, int start)</p> <p>Extracts text from a DocTree to build a string from a part of its tokenized representation.</p> <p>Parameters:</p> <p><code>docTree</code> - The DocTree to extract from.</p> <p><code>start</code> - The starting index for extraction.</p> <p>Returns:</p> <p>A string representing the extracted part or empty string if extraction fails.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdoctreepart","title":"getDocTreePart","text":"<p>static String getDocTreePart(DocTree docTree, int n)</p> <p>Extracts a specific part (token) from a DocTree's toString representation.</p> <p>Parameters:</p> <p><code>docTree</code> - The DocTree to parse.</p> <p><code>n</code> - The zero-based index of the part to extract.</p> <p>Returns:</p> <p>The extracted string part or empty string if out of range.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setdocumentation","title":"setDocumentation","text":"<p>static void setDocumentation(Node node, Element e)</p> <p>Sets documentation text for a Node based on the doc comment tree attached to a language model element. This populates first sentence, body, and full body texts.</p> <p>Parameters:</p> <p><code>node</code> - The Node to set documentation for.</p> <p><code>e</code> - The element whose doc comment is used.</p>"},{"location":"markista/javadoc/util/TypeUtils/#settypeownership","title":"setTypeOwnership","text":"<p>static void setTypeOwnership(TypeNode typeNode, TypeElement element)</p> <p>Sets ownership of a TypeNode based on its enclosing type or package. Updates the ownership link and qualified names accordingly.</p> <p>Parameters:</p> <p><code>typeNode</code> - The TypeNode to set ownership on.</p> <p><code>element</code> - The TypeElement representing the type.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmethodannotations","title":"setMethodAnnotations","text":"<p>static void setMethodAnnotations(MethodNode method, ExecutableElement methodElement)</p> <p>Sets annotations on the MethodNode, in particular looks for @Override annotation to set overridden methods.</p> <p>Parameters:</p> <p><code>method</code> - The MethodNode to update.</p> <p><code>methodElement</code> - The ExecutableElement representing the method.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setspecifiedby","title":"setSpecifiedBy","text":"<p>static void setSpecifiedBy(MethodNode methodNode, ExecutableElement methodElement)</p> <p>Checks implemented interfaces of a method's owning type, and sets \"specifiedBy\" on the method if it implements an interface method.</p> <p>Parameters:</p> <p><code>methodNode</code> - The MethodNode to update.</p> <p><code>methodElement</code> - The ExecutableElement representing the method.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddenmethod","title":"getOverriddenMethod","text":"<p>static OverriddenMethodNode getOverriddenMethod(MethodNode method, ExecutableElement methodElement)</p> <p>Recursively searches for an overridden method matching the supplied method within the supertypes of its owner.</p> <p>Parameters:</p> <p><code>method</code> - The MethodNode for which to find an overridden method.</p> <p><code>methodElement</code> - The ExecutableElement representing the method.</p> <p>Returns:</p> <p>An OverriddenMethodNode if a matching override is found, else null.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddenmethod_1","title":"getOverriddenMethod","text":"<p>static OverriddenMethodNode getOverriddenMethod(TypeElement superclass, ExecutableElement methodElement)</p> <p>Searches the given TypeElement for a method matching the supplied ExecutableElement\\u2019s name.</p> <p>Parameters:</p> <p><code>superclass</code> - The TypeElement representing a supertype.</p> <p><code>methodElement</code> - The method to match by name.</p> <p>Returns:</p> <p>An OverriddenMethodNode if a match found, else null.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getoverriddennativemethod","title":"getOverriddenNativeMethod","text":"<p>static OverriddenMethodNode getOverriddenNativeMethod(String qualifiedTypeName, MethodNode method)</p> <p>Attempts to find an overridden method defined in native Java classes (e.g., from runtime classes).</p> <p>Parameters:</p> <p><code>qualifiedTypeName</code> - The fully qualified name of the type.</p> <p><code>method</code> - The MethodNode that may override the native method.</p> <p>Returns:</p> <p>An OverriddenMethodNode if found, or null otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#addconstantfieldvaluesreference","title":"addConstantFieldValuesReference","text":"<p>static void addConstantFieldValuesReference(ModuleNode moduleNode)</p> <p>Adds references to constant field values from classes in the API to the provided module node.</p> <p>Parameters:</p> <p><code>moduleNode</code> - The ModuleNode to which constant value references will be added.</p>"},{"location":"markista/javadoc/util/TypeUtils/#isinterface","title":"isInterface","text":"<p>static boolean isInterface(TypeMirror typeMirror)</p> <p>Returns true if the TypeMirror represents an interface.</p> <p>Parameters:</p> <p><code>typeMirror</code> - The TypeMirror to check.</p> <p>Returns:</p> <p>true if the type is an interface, false otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#findimplementedinterfaces","title":"findImplementedInterfaces","text":"<p>static void findImplementedInterfaces(TypeElement typeElement, List&lt;String&gt; result)</p> <p>Finds all interfaces implemented directly by the given TypeElement and adds their names to the result list.</p> <p>Parameters:</p> <p><code>typeElement</code> - The type to examine.</p> <p><code>result</code> - The list to receive the qualified interface names.</p>"},{"location":"markista/javadoc/util/TypeUtils/#collectallsupertypes","title":"collectAllSupertypes","text":"<p>static void collectAllSupertypes(TypeMirror t, List&lt;String&gt; result)</p> <p>Collects all supertypes (classes) of the specified type recursively and adds them to the result list. java.lang.Object is excluded.</p> <p>Parameters:</p> <p><code>t</code> - The type to examine.</p> <p><code>result</code> - The list to receive supertypes.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getdeprecation","title":"getDeprecation","text":"<p>static DeprecatedTree getDeprecation(DocCommentTree docComment)</p> <p>Finds the DeprecatedTree from a Javadoc DocCommentTree if present.</p> <p>Parameters:</p> <p><code>docComment</code> - The Javadoc comment tree.</p> <p>Returns:</p> <p>The DeprecatedTree if found, null otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getreturntree","title":"getReturnTree","text":"<p>static ReturnTree getReturnTree(DocCommentTree dcTree)</p> <p>Finds the @return tag from a Javadoc DocCommentTree if present.</p> <p>Parameters:</p> <p><code>dcTree</code> - The DocCommentTree to search.</p> <p>Returns:</p> <p>The ReturnTree if found, null otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getparamtree","title":"getParamTree","text":"<p>static ParamTree getParamTree(DocCommentTree dcTree, VariableElement parameter)</p> <p>Finds the @param tag in a DocCommentTree matching the specified parameter variable.</p> <p>Parameters:</p> <p><code>dcTree</code> - The DocCommentTree containing block tags.</p> <p><code>parameter</code> - The VariableElement parameter to match.</p> <p>Returns:</p> <p>The matching ParamTree if found, null otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getreferences","title":"getReferences","text":"<p>static List&lt;Reference&gt; getReferences(DocCommentTree dcTree)</p> <p>Extracts a list of Reference objects representing occurrences of @see tags in the Javadoc comment.</p> <p>Parameters:</p> <p><code>dcTree</code> - The DocCommentTree to process.</p> <p>Returns:</p> <p>A list of Reference objects extracted from @see tags.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getsince","title":"getSince","text":"<p>static Text getSince(DocCommentTree dcTree)</p> <p>Extracts the @since tag content from a DocCommentTree, if present.</p> <p>Parameters:</p> <p><code>dcTree</code> - The DocCommentTree containing tags.</p> <p>Returns:</p> <p>A Text object representing @since content or an empty Text if none present.</p>"},{"location":"markista/javadoc/util/TypeUtils/#geturl","title":"getUrl","text":"<p>static String getUrl(String html)</p> <p>Extracts a URL string from html-like text, e.g., from an href attribute inside double-quotes.</p> <p>Parameters:</p> <p><code>html</code> - The input HTML-like string.</p> <p>Returns:</p> <p>The extracted URL inside quotes or null if none found.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmodifiers","title":"setModifiers","text":"<p>static void setModifiers(Node node, Set&lt;Modifier&gt; modifiers)</p> <p>Adds modifiers to a model Node based on the set of language model modifiers.</p> <p>Parameters:</p> <p><code>node</code> - The Node to add modifiers to.</p> <p><code>modifiers</code> - The set of Modifier enums from language model.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setthrowntypes","title":"setThrownTypes","text":"<p>static void setThrownTypes(MethodNode methodNode, List&lt;? extends TypeMirror&gt; thrownTypes)</p> <p>Adds list of thrown types (exceptions) to a MethodNode based on Java model type mirrors.</p> <p>Parameters:</p> <p><code>methodNode</code> - The MethodNode to add thrown types to.</p> <p><code>thrownTypes</code> - The list of TypeMirror representing thrown exceptions.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setdeprecationstatus","title":"setDeprecationStatus","text":"<p>static void setDeprecationStatus(Node node, Element e, DocCommentTree dct)</p> <p>Sets the deprecation status of a Node based on element annotations and Javadoc @deprecated tag.</p> <p>Parameters:</p> <p><code>node</code> - The Node to update.</p> <p><code>e</code> - The language model element corresponding to the node.</p> <p><code>dct</code> - The DocCommentTree containing javadoc comments.</p>"},{"location":"markista/javadoc/util/TypeUtils/#isincludedinapi","title":"isIncludedInApi","text":"<p>static boolean isIncludedInApi(Element e)</p> <p>Returns true if the element should be included in the public API documentation based on its modifiers and configuration.</p> <p>Parameters:</p> <p><code>e</code> - The language model element to test.</p> <p>Returns:</p> <p>true if element is public or protected or private member documentation is configured; false otherwise.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setmethodparams","title":"setMethodParams","text":"<p>static void setMethodParams(MethodNode methodDoc, ExecutableElement ee)</p> <p>Sets the parameters on a MethodNode by inspecting the ExecutableElement and its doc comment tags.</p> <p>Parameters:</p> <p><code>methodDoc</code> - The MethodNode to update.</p> <p><code>ee</code> - The ExecutableElement representing the method or constructor.</p>"},{"location":"markista/javadoc/util/TypeUtils/#setimplementations","title":"setImplementations","text":"<p>static void setImplementations(DirectiveNode directiveNode, List&lt;? extends TypeElement&gt; implementations)</p> <p>Adds implementation type names to a DirectiveNode.</p> <p>Parameters:</p> <p><code>directiveNode</code> - The DirectiveNode to update.</p> <p><code>implementations</code> - List of TypeElements representing implementations.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getfieldtype","title":"getFieldType","text":"<p>static TypeNode getFieldType(String className, String fieldName)</p> <p>Gets the field type as a TypeNode for the specified class name and field name.</p> <p>Parameters:</p> <p><code>className</code> - Fully qualified class name containing the field.</p> <p><code>fieldName</code> - The field name.</p> <p>Returns:</p> <p>A TypeNode representing the field's type, or null if not found.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getparamtype","title":"getParamType","text":"<p>static TypeNode getParamType(ExecutableElement method, String fieldName)</p> <p>Gets the parameter type as a TypeNode for the specified parameter name in the method.</p> <p>Parameters:</p> <p><code>method</code> - The ExecutableElement representing the method.</p> <p><code>fieldName</code> - The parameter name.</p> <p>Returns:</p> <p>A TypeNode for the parameter's type, or null if not found.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getpackagename","title":"getPackageName","text":"<p>private static String getPackageName(String qualifiedTypeName)</p> <p>Extracts the package name from a fully qualified type name.</p> <p>Parameters:</p> <p><code>qualifiedTypeName</code> - The fully qualified type name.</p> <p>Returns:</p> <p>The package name portion or null if input null.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getenclosingpackageelement","title":"getEnclosingPackageElement","text":"<p>static PackageElement getEnclosingPackageElement(Element element)</p> <p>Recursively finds the enclosing PackageElement of a given element.</p> <p>Parameters:</p> <p><code>element</code> - The language model element.</p> <p>Returns:</p> <p>The nearest enclosing PackageElement or null if none found.</p>"},{"location":"markista/javadoc/util/TypeUtils/#getenclosingtypeelement","title":"getEnclosingTypeElement","text":"<p>static TypeElement getEnclosingTypeElement(Element element)</p> <p>Recursively finds the enclosing TypeElement (class, interface, enum, annotation) for the given element.</p> <p>Parameters:</p> <p><code>element</code> - The language model element such as a field or method.</p> <p>Returns:</p> <p>The enclosing TypeElement or null if none found.</p>"},{"location":"markista/javadoc/util/Utils/","title":"Utils","text":"<p>Package io.github.sandydunlop.markista.util</p>"},{"location":"markista/javadoc/util/Utils/#class-utils","title":"Class Utils","text":"<p>java.lang.Object \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0io.github.sandydunlop.markista.util.Utils </p> <p>A set of utility methods for changing between qualified and unqualified names.</p>"},{"location":"markista/javadoc/util/Utils/#constructor-summary","title":"Constructor Summary","text":"Constructor Description Utils()"},{"location":"markista/javadoc/util/Utils/#method-summary","title":"Method Summary","text":"Modifier and Type Method Description static String removeGenerics(String str) Removes the generic type and its surrounding &lt;&gt; from a string, if present static String removeParentheses(String expression) Removes parentheses and what they contain from an expression static String simplifyNames(String str) Changes all qualified names in a string into unqualified names. private static String simplifyNamesLoop(String input) private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c) private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i) static boolean isValidSimpleNameChar(char c) Checks if the given character is valid in an unqualified name. static boolean isValidQualifiedNameChar(char c) Checks if the given character is valid in a qualified name. static boolean isNullOrEmpty(String str) Checks if a string is null or empty static boolean isNullOrEmpty(Text text) Checks if a Text object is null or empty static String inOneLine(String str) Removes new line characters from a string, replacing them with spaces"},{"location":"markista/javadoc/util/Utils/#method-details","title":"Method Details","text":""},{"location":"markista/javadoc/util/Utils/#removegenerics","title":"removeGenerics","text":"<p>static String removeGenerics(String str)</p> <p>Removes the generic type and its surrounding &lt;&gt; from a string, if present</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>The string with the generic type and surrounding &lt;&gt; removed</p>"},{"location":"markista/javadoc/util/Utils/#removeparentheses","title":"removeParentheses","text":"<p>static String removeParentheses(String expression)</p> <p>Removes parentheses and what they contain from an expression</p> <p>Parameters:</p> <p><code>expression</code> - An expression such as <code>classname.method(parameter)</code>.</p> <p>Returns:</p> <p>The expression with the parentheses removed</p>"},{"location":"markista/javadoc/util/Utils/#simplifynames","title":"simplifyNames","text":"<p>static String simplifyNames(String str)</p> <p>Changes all qualified names in a string into unqualified names.</p> <p>Parameters:</p> <p><code>str</code> - A string that may contain one or more qualified names.</p> <p>Returns:</p> <p>The input string, with all qualified names changed to unqualified names.</p>"},{"location":"markista/javadoc/util/Utils/#simplifynamesloop","title":"simplifyNamesLoop","text":"<p>private static String simplifyNamesLoop(String input)</p>"},{"location":"markista/javadoc/util/Utils/#shouldreplacequalifiedwithsimple","title":"shouldReplaceQualifiedWithSimple","text":"<p>private static boolean shouldReplaceQualifiedWithSimple(int qualifiedStart, int simpleStart, int i, int length, char c)</p>"},{"location":"markista/javadoc/util/Utils/#replacequalifiedwithsimple","title":"replaceQualifiedWithSimple","text":"<p>private static String replaceQualifiedWithSimple(String simplified, int qualifiedStart, int simpleStart, int i)</p>"},{"location":"markista/javadoc/util/Utils/#isvalidsimplenamechar","title":"isValidSimpleNameChar","text":"<p>static boolean isValidSimpleNameChar(char c)</p> <p>Checks if the given character is valid in an unqualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in an unqualified name.</p>"},{"location":"markista/javadoc/util/Utils/#isvalidqualifiednamechar","title":"isValidQualifiedNameChar","text":"<p>static boolean isValidQualifiedNameChar(char c)</p> <p>Checks if the given character is valid in a qualified name.</p> <p>Parameters:</p> <p><code>c</code> - The character to check.</p> <p>Returns:</p> <p>Whether or not the character is valid in a qualified name.</p>"},{"location":"markista/javadoc/util/Utils/#isnullorempty","title":"isNullOrEmpty","text":"<p>static boolean isNullOrEmpty(String str)</p> <p>Checks if a string is null or empty</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>True if the string is either null or empty</p>"},{"location":"markista/javadoc/util/Utils/#isnullorempty_1","title":"isNullOrEmpty","text":"<p>static boolean isNullOrEmpty(Text text)</p> <p>Checks if a Text object is null or empty</p> <p>Parameters:</p> <p><code>text</code> - The Text object</p> <p>Returns:</p> <p>True if the Text object is either null or empty</p>"},{"location":"markista/javadoc/util/Utils/#inoneline","title":"inOneLine","text":"<p>static String inOneLine(String str)</p> <p>Removes new line characters from a string, replacing them with spaces</p> <p>Parameters:</p> <p><code>str</code> - The string</p> <p>Returns:</p> <p>The string, with newlines converted to spaces</p>"},{"location":"newsfeed/","title":"Newsfeed - An RSS News Reader for Minecraft","text":""},{"location":"newsfeed/#features","title":"Features","text":"<p>This mod adds a news feed to the game that displays the latest news from a configurable source. The mod is designed to be lightweight and easy to use, with a simple interface that allows you to quickly view the latest news headlines. The default news source is set to the BBC World News RSS feed, but you can change it to any RSS feed you like. </p> <p>When a new article is published to the feed, a notification will appear in the game. You can view the article by pressing the Newsfeed key (default <code>N</code>). The article will be displayed in a GUI that shows the title, description, and a link to the full article. You can also view previous headlines in the GUI.</p> <p> news article being displayed</p> <p> news headline being displayed</p>"},{"location":"newsfeed/#download","title":"Download","text":"<p>Downloads are available for Minecraft versions 1.21.4 to 1.21.7.</p> <p>JAR files are available to download on Modrinth.</p> <p>Source code is available on Github.</p>"},{"location":"newsfeed/#configuration","title":"Configuration","text":"<p>Newsfeed is compatible with mod_menu and can be configured in-game. </p> <p> configuration screen</p> <p>Alternatively, the configuration file is located in the <code>config</code> folder of your Minecraft instance. The file is named <code>newsfeed.json</code>. You can edit this file to change the settings of the mod.</p>"},{"location":"newsfeed/#license","title":"License","text":"<p>This mod is licensed under the MIT License. You are free to use, modify, and distribute this mod as long as you include the original license in your distribution.</p>"}]}